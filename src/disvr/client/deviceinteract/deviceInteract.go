// Code generated by goctl. DO NOT EDIT!
// Source: di.proto

package client

import (
	"context"

	"github.com/i-Things/things/src/disvr/internal/svc"
	"github.com/i-Things/things/src/disvr/pb/di"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DataHubLogIndex          = di.DataHubLogIndex
	DataHubLogIndexReq       = di.DataHubLogIndexReq
	DataHubLogIndexResp      = di.DataHubLogIndexResp
	DataSchemaIndex          = di.DataSchemaIndex
	DataSchemaIndexResp      = di.DataSchemaIndexResp
	DataSchemaLatestIndexReq = di.DataSchemaLatestIndexReq
	DataSchemaLogIndexReq    = di.DataSchemaLogIndexReq
	DataSdkLogIndex          = di.DataSdkLogIndex
	DataSdkLogIndexReq       = di.DataSdkLogIndexReq
	DataSdkLogIndexResp      = di.DataSdkLogIndexResp
	PageInfo                 = di.PageInfo
	Response                 = di.Response
	SendActionReq            = di.SendActionReq
	SendActionResp           = di.SendActionResp
	SendPropertyReq          = di.SendPropertyReq
	SendPropertyResp         = di.SendPropertyResp

	DeviceInteract interface {
		// 同步调用设备行为
		SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error)
		// 同步调用设备属性
		SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error)
	}

	defaultDeviceInteract struct {
		cli zrpc.Client
	}

	directDeviceInteract struct {
		svcCtx *svc.ServiceContext
		svr    di.DeviceInteractServer
	}
)

func NewDeviceInteract(cli zrpc.Client) DeviceInteract {
	return &defaultDeviceInteract{
		cli: cli,
	}
}

func NewDirectDeviceInteract(svcCtx *svc.ServiceContext, svr di.DeviceInteractServer) DeviceInteract {
	return &directDeviceInteract{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 同步调用设备行为
func (m *defaultDeviceInteract) SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	client := di.NewDeviceInteractClient(m.cli.Conn())
	return client.SendAction(ctx, in, opts...)
}

// 同步调用设备行为
func (d *directDeviceInteract) SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	return d.svr.SendAction(ctx, in)
}

// 同步调用设备属性
func (m *defaultDeviceInteract) SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	client := di.NewDeviceInteractClient(m.cli.Conn())
	return client.SendProperty(ctx, in, opts...)
}

// 同步调用设备属性
func (d *directDeviceInteract) SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	return d.svr.SendProperty(ctx, in)
}
