syntax = "proto3";
option go_package = "pb/di";
import "google/protobuf/wrappers.proto";

package di;

//设备日志
service DeviceLog {
  //获取设备sdk调试日志
  rpc dataSdkLogIndex(DataSdkLogIndexReq) returns (DataSdkLogIndexResp);
  //获取设备调试信息记录登入登出,操作
  rpc dataHubLogIndex(DataHubLogIndexReq)   returns (DataHubLogIndexResp);
  //获取设备数据信息
  rpc dataSchemaLatestIndex(DataSchemaLatestIndexReq)     returns (DataSchemaIndexResp);
  //获取设备数据信息
  rpc dataSchemaLogIndex(DataSchemaLogIndexReq)     returns (DataSchemaIndexResp);
}

//设备交互
service DeviceInteract {
  //同步调用设备行为
  rpc sendAction(SendActionReq)         returns(SendActionResp);
  //同步调用设备属性
  rpc sendProperty(SendPropertyReq)     returns(SendPropertyResp);
}


message Response {
}
message PageInfo{
  int64 page = 1;
  int64 size = 2;
}

/*获取对应日志信息*/
message DataSchemaLogIndexReq{
  PageInfo page = 1;//使用了聚合函数及间隔的时候无效
  string method = 2; //获取的类型   property 属性 event事件 action 请求
  repeated string deviceName = 3; //设备名(不填获取产品下所有设备)
  string productID = 4; //产品id (必填)
  string dataID = 5; //获取的具体标识符的数据(必填)
  int64 timeStart = 6;//获取时间的开始(毫秒时间戳)
  int64 timeEnd = 7;//时间的结束(毫秒时间戳)
  int64 interval = 8;//间隔(单位毫秒) 如果这个值不为零值 则时间的开始和结束必须有效及聚合函数不应该为空
  string argFunc = 9;//聚合函数 avg:平均值 first:第一个参数 last:最后一个参数 count:总数 twa: 时间加权平均函数 参考:https://docs.taosdata.com/taos-sql/function
  //  /*
  //  FILL 语句指定某一窗口区间数据缺失的情况下的填充模式。填充模式包括以下几种：
  //    不进行填充：NONE（默认填充模式）。
  //    VALUE 填充：固定值填充，此时需要指定填充的数值。例如：FILL(VALUE, 1.23)。
  //    PREV 填充：使用前一个非 NULL 值填充数据。例如：FILL(PREV)。
  //    NULL 填充：使用 NULL 填充数据。例如：FILL(NULL)。
  //    LINEAR 填充：根据前后距离最近的非 NULL 值做线性插值填充。例如：FILL(LINEAR)。
  //    NEXT 填充：使用下一个非 NULL 值填充数据。例如：FILL(NEXT)。
  //  */
  string fill = 10; //填充模式 参考:https://docs.taosdata.com/taos-sql/distinguished/
  int32 order = 11; //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
}

/*获取对应日志信息*/
message DataSchemaLatestIndexReq{
  string method = 1; //获取的类型   property 属性 event事件 action 请求
  string deviceName = 2; //设备名(必填)
  string productID = 3; //产品id (必填)
  repeated string dataID = 4; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

/*设备的日志数据*/
message DataSchemaIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string type = 2 ;//类型 事件类型: 信息:info  告警alert  故障:fault
  string dataID = 3;//属性id
  string getValue = 4;//获取到的值
  string sendValue = 5;//发送过去的参数(action限定)
}

/*获取对应日志信息*/
message DataSchemaIndexResp{
  int64 total = 1; //总数
  repeated DataSchemaIndex list = 2;
}

/*设备的日志数据*/
message DataHubLogIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string action = 2 ;//操作类型;显示相应的操作名称、API名称、服务的method
  string requestID = 3;//请求ID
  string tranceID = 4;//服务器端事务id
  string topic = 5;//主题
  string content = 6;//具体内容
  int64 resultType = 7;//请求结果状态
}

/*实时获取对应信息*/
message DataHubLogIndexReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始(毫秒时间戳)
  int64   timeEnd = 4;//时间的结束(毫秒时间戳)
  PageInfo   page = 5;//分页信息
}
/*实时获取对应信息*/
message DataHubLogIndexResp{
  int64 total = 1; //总数
  repeated DataHubLogIndex list = 2;
}

message SendActionReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string actionId = 3;//产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
  string inputParams = 4;//输入参数
}
message SendActionResp{
  string clientToken = 1;//调用id
  string outputParams = 2;//输出参数 注意：此字段可能返回 null，表示取不到有效值。
  string  status = 3;//返回状态
  int64   code = 4;//设备返回状态码
}

message SendPropertyReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string data = 3;//属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
  int64  dataTimestamp = 4;//上报数据UNIX时间戳, 仅对Method:reported有效
  string method = 5;//请求类型 , 不填该参数或者 desired 表示下发属性给设备, reported 表示模拟设备上报属性
}
message SendPropertyResp{
  int64   code = 1;//设备返回状态码
  string  status = 2;//返回状态
  string clientToken = 3;//调用id
  string data = 4;//返回信息
}
/*获取sdk调试日志信息*/
message DataSdkLogIndexReq {
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始
  int64   timeEnd = 4;//时间的结束
  PageInfo page = 5;//分页信息 只获取一个则不填
}
/*sdk调试日志信息*/
message DataSdkLogIndexResp {
  int64 total = 1; //总数
  repeated DataSdkLogIndex list = 2;
}
message DataSdkLogIndex {
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  int64 loglevel = 2 ;//操作类型;显示相应的操作名称、API名称、服务的method
  string content = 3;//具体内容
}