// Code generated by goctl. DO NOT EDIT.
// Source: ud.proto

package server

import (
	"context"

	"github.com/i-Things/things/src/udsvr/internal/logic/rule"
	"github.com/i-Things/things/src/udsvr/internal/svc"
	"github.com/i-Things/things/src/udsvr/pb/ud"
)

type RuleServer struct {
	svcCtx *svc.ServiceContext
	ud.UnimplementedRuleServer
}

func NewRuleServer(svcCtx *svc.ServiceContext) *RuleServer {
	return &RuleServer{
		svcCtx: svcCtx,
	}
}

// 场景
func (s *RuleServer) SceneInfoCreate(ctx context.Context, in *ud.SceneInfo) (*ud.WithID, error) {
	l := rulelogic.NewSceneInfoCreateLogic(ctx, s.svcCtx)
	return l.SceneInfoCreate(in)
}

func (s *RuleServer) SceneInfoUpdate(ctx context.Context, in *ud.SceneInfo) (*ud.Empty, error) {
	l := rulelogic.NewSceneInfoUpdateLogic(ctx, s.svcCtx)
	return l.SceneInfoUpdate(in)
}

func (s *RuleServer) SceneInfoDelete(ctx context.Context, in *ud.WithID) (*ud.Empty, error) {
	l := rulelogic.NewSceneInfoDeleteLogic(ctx, s.svcCtx)
	return l.SceneInfoDelete(in)
}

func (s *RuleServer) SceneInfoIndex(ctx context.Context, in *ud.SceneInfoIndexReq) (*ud.SceneInfoIndexResp, error) {
	l := rulelogic.NewSceneInfoIndexLogic(ctx, s.svcCtx)
	return l.SceneInfoIndex(in)
}

func (s *RuleServer) SceneInfoRead(ctx context.Context, in *ud.WithID) (*ud.SceneInfo, error) {
	l := rulelogic.NewSceneInfoReadLogic(ctx, s.svcCtx)
	return l.SceneInfoRead(in)
}

func (s *RuleServer) SceneManuallyTrigger(ctx context.Context, in *ud.WithID) (*ud.Empty, error) {
	l := rulelogic.NewSceneManuallyTriggerLogic(ctx, s.svcCtx)
	return l.SceneManuallyTrigger(in)
}
