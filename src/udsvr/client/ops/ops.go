// Code generated by goctl. DO NOT EDIT.
// Source: ud.proto

package ops

import (
	"context"

	"github.com/i-Things/things/src/udsvr/internal/svc"
	"github.com/i-Things/things/src/udsvr/pb/ud"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Empty                 = ud.Empty
	OpsWorkOrder          = ud.OpsWorkOrder
	OpsWorkOrderIndexReq  = ud.OpsWorkOrderIndexReq
	OpsWorkOrderIndexResp = ud.OpsWorkOrderIndexResp
	PageInfo              = ud.PageInfo
	SceneInfo             = ud.SceneInfo
	SceneInfoIndexReq     = ud.SceneInfoIndexReq
	SceneInfoIndexResp    = ud.SceneInfoIndexResp
	TimeRange             = ud.TimeRange
	WithID                = ud.WithID

	Ops interface {
		// 维护工单  Work Order
		OpsWorkOrderCreate(ctx context.Context, in *OpsWorkOrder, opts ...grpc.CallOption) (*WithID, error)
		OpsWorkOrderUpdate(ctx context.Context, in *OpsWorkOrder, opts ...grpc.CallOption) (*Empty, error)
		OpsWorkOrderIndex(ctx context.Context, in *OpsWorkOrderIndexReq, opts ...grpc.CallOption) (*OpsWorkOrderIndexResp, error)
	}

	defaultOps struct {
		cli zrpc.Client
	}

	directOps struct {
		svcCtx *svc.ServiceContext
		svr    ud.OpsServer
	}
)

func NewOps(cli zrpc.Client) Ops {
	return &defaultOps{
		cli: cli,
	}
}

func NewDirectOps(svcCtx *svc.ServiceContext, svr ud.OpsServer) Ops {
	return &directOps{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 维护工单  Work Order
func (m *defaultOps) OpsWorkOrderCreate(ctx context.Context, in *OpsWorkOrder, opts ...grpc.CallOption) (*WithID, error) {
	client := ud.NewOpsClient(m.cli.Conn())
	return client.OpsWorkOrderCreate(ctx, in, opts...)
}

// 维护工单  Work Order
func (d *directOps) OpsWorkOrderCreate(ctx context.Context, in *OpsWorkOrder, opts ...grpc.CallOption) (*WithID, error) {
	return d.svr.OpsWorkOrderCreate(ctx, in)
}

func (m *defaultOps) OpsWorkOrderUpdate(ctx context.Context, in *OpsWorkOrder, opts ...grpc.CallOption) (*Empty, error) {
	client := ud.NewOpsClient(m.cli.Conn())
	return client.OpsWorkOrderUpdate(ctx, in, opts...)
}

func (d *directOps) OpsWorkOrderUpdate(ctx context.Context, in *OpsWorkOrder, opts ...grpc.CallOption) (*Empty, error) {
	return d.svr.OpsWorkOrderUpdate(ctx, in)
}

func (m *defaultOps) OpsWorkOrderIndex(ctx context.Context, in *OpsWorkOrderIndexReq, opts ...grpc.CallOption) (*OpsWorkOrderIndexResp, error) {
	client := ud.NewOpsClient(m.cli.Conn())
	return client.OpsWorkOrderIndex(ctx, in, opts...)
}

func (d *directOps) OpsWorkOrderIndex(ctx context.Context, in *OpsWorkOrderIndexReq, opts ...grpc.CallOption) (*OpsWorkOrderIndexResp, error) {
	return d.svr.OpsWorkOrderIndex(ctx, in)
}
