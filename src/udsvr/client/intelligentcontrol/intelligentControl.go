// Code generated by goctl. DO NOT EDIT.
// Source: ud.proto

package intelligentcontrol

import (
	"context"

	"github.com/i-Things/things/src/udsvr/internal/svc"
	"github.com/i-Things/things/src/udsvr/pb/ud"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AutoInfo             = ud.AutoInfo
	AutoInfoIndexReq     = ud.AutoInfoIndexReq
	AutoInfoIndexResp    = ud.AutoInfoIndexResp
	Empty                = ud.Empty
	PageInfo             = ud.PageInfo
	SceneDevice          = ud.SceneDevice
	SceneDeviceIndexReq  = ud.SceneDeviceIndexReq
	SceneDeviceIndexResp = ud.SceneDeviceIndexResp
	SceneInfo            = ud.SceneInfo
	SceneInfoIndexReq    = ud.SceneInfoIndexReq
	SceneInfoIndexResp   = ud.SceneInfoIndexResp
	TimeRange            = ud.TimeRange
	WithID               = ud.WithID

	IntelligentControl interface {
		// 场景
		SceneInfoCreate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*WithID, error)
		SceneInfoUpdate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*Empty, error)
		SceneInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
		SceneInfoIndex(ctx context.Context, in *SceneInfoIndexReq, opts ...grpc.CallOption) (*SceneInfoIndexResp, error)
		SceneInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*SceneInfo, error)
		SceneManuallyTrigger(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultIntelligentControl struct {
		cli zrpc.Client
	}

	directIntelligentControl struct {
		svcCtx *svc.ServiceContext
		svr    ud.IntelligentControlServer
	}
)

func NewIntelligentControl(cli zrpc.Client) IntelligentControl {
	return &defaultIntelligentControl{
		cli: cli,
	}
}

func NewDirectIntelligentControl(svcCtx *svc.ServiceContext, svr ud.IntelligentControlServer) IntelligentControl {
	return &directIntelligentControl{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 场景
func (m *defaultIntelligentControl) SceneInfoCreate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*WithID, error) {
	client := ud.NewIntelligentControlClient(m.cli.Conn())
	return client.SceneInfoCreate(ctx, in, opts...)
}

// 场景
func (d *directIntelligentControl) SceneInfoCreate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*WithID, error) {
	return d.svr.SceneInfoCreate(ctx, in)
}

func (m *defaultIntelligentControl) SceneInfoUpdate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := ud.NewIntelligentControlClient(m.cli.Conn())
	return client.SceneInfoUpdate(ctx, in, opts...)
}

func (d *directIntelligentControl) SceneInfoUpdate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*Empty, error) {
	return d.svr.SceneInfoUpdate(ctx, in)
}

func (m *defaultIntelligentControl) SceneInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	client := ud.NewIntelligentControlClient(m.cli.Conn())
	return client.SceneInfoDelete(ctx, in, opts...)
}

func (d *directIntelligentControl) SceneInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	return d.svr.SceneInfoDelete(ctx, in)
}

func (m *defaultIntelligentControl) SceneInfoIndex(ctx context.Context, in *SceneInfoIndexReq, opts ...grpc.CallOption) (*SceneInfoIndexResp, error) {
	client := ud.NewIntelligentControlClient(m.cli.Conn())
	return client.SceneInfoIndex(ctx, in, opts...)
}

func (d *directIntelligentControl) SceneInfoIndex(ctx context.Context, in *SceneInfoIndexReq, opts ...grpc.CallOption) (*SceneInfoIndexResp, error) {
	return d.svr.SceneInfoIndex(ctx, in)
}

func (m *defaultIntelligentControl) SceneInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*SceneInfo, error) {
	client := ud.NewIntelligentControlClient(m.cli.Conn())
	return client.SceneInfoRead(ctx, in, opts...)
}

func (d *directIntelligentControl) SceneInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*SceneInfo, error) {
	return d.svr.SceneInfoRead(ctx, in)
}

func (m *defaultIntelligentControl) SceneManuallyTrigger(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	client := ud.NewIntelligentControlClient(m.cli.Conn())
	return client.SceneManuallyTrigger(ctx, in, opts...)
}

func (d *directIntelligentControl) SceneManuallyTrigger(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	return d.svr.SceneManuallyTrigger(ctx, in)
}
