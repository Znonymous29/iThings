// Code generated by goctl. DO NOT EDIT.
// Source: ud.proto

package userdevice

import (
	"context"

	"github.com/i-Things/things/src/udsvr/internal/svc"
	"github.com/i-Things/things/src/udsvr/pb/ud"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeviceCore            = ud.DeviceCore
	Empty                 = ud.Empty
	OpsWorkOrder          = ud.OpsWorkOrder
	OpsWorkOrderIndexReq  = ud.OpsWorkOrderIndexReq
	OpsWorkOrderIndexResp = ud.OpsWorkOrderIndexResp
	PageInfo              = ud.PageInfo
	SceneInfo             = ud.SceneInfo
	SceneInfoIndexReq     = ud.SceneInfoIndexReq
	SceneInfoIndexResp    = ud.SceneInfoIndexResp
	TimeRange             = ud.TimeRange
	UserCollectDeviceSave = ud.UserCollectDeviceSave
	WithID                = ud.WithID

	UserDevice interface {
		UserCollectDeviceMultiCreate(ctx context.Context, in *UserCollectDeviceSave, opts ...grpc.CallOption) (*Empty, error)
		UserCollectDeviceMultiDelete(ctx context.Context, in *UserCollectDeviceSave, opts ...grpc.CallOption) (*Empty, error)
		UserCollectDeviceIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserCollectDeviceSave, error)
	}

	defaultUserDevice struct {
		cli zrpc.Client
	}

	directUserDevice struct {
		svcCtx *svc.ServiceContext
		svr    ud.UserDeviceServer
	}
)

func NewUserDevice(cli zrpc.Client) UserDevice {
	return &defaultUserDevice{
		cli: cli,
	}
}

func NewDirectUserDevice(svcCtx *svc.ServiceContext, svr ud.UserDeviceServer) UserDevice {
	return &directUserDevice{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

func (m *defaultUserDevice) UserCollectDeviceMultiCreate(ctx context.Context, in *UserCollectDeviceSave, opts ...grpc.CallOption) (*Empty, error) {
	client := ud.NewUserDeviceClient(m.cli.Conn())
	return client.UserCollectDeviceMultiCreate(ctx, in, opts...)
}

func (d *directUserDevice) UserCollectDeviceMultiCreate(ctx context.Context, in *UserCollectDeviceSave, opts ...grpc.CallOption) (*Empty, error) {
	return d.svr.UserCollectDeviceMultiCreate(ctx, in)
}

func (m *defaultUserDevice) UserCollectDeviceMultiDelete(ctx context.Context, in *UserCollectDeviceSave, opts ...grpc.CallOption) (*Empty, error) {
	client := ud.NewUserDeviceClient(m.cli.Conn())
	return client.UserCollectDeviceMultiDelete(ctx, in, opts...)
}

func (d *directUserDevice) UserCollectDeviceMultiDelete(ctx context.Context, in *UserCollectDeviceSave, opts ...grpc.CallOption) (*Empty, error) {
	return d.svr.UserCollectDeviceMultiDelete(ctx, in)
}

func (m *defaultUserDevice) UserCollectDeviceIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserCollectDeviceSave, error) {
	client := ud.NewUserDeviceClient(m.cli.Conn())
	return client.UserCollectDeviceIndex(ctx, in, opts...)
}

func (d *directUserDevice) UserCollectDeviceIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserCollectDeviceSave, error) {
	return d.svr.UserCollectDeviceIndex(ctx, in)
}
