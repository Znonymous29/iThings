info(
    title: "产品管理模块"
    desc: "产品管理模块"
    author: "杨磊"
    email: "603685348@qq.com"
    version: "v1"
)
import "common.api"  //公共结构体定义
import "things/schema/info.api"
@server(
    group : things/schema/common
    prefix: /api/v1/things/schema/common
    middleware: SetupWare, CheckTokenWare,CheckApiWare, DataAuthWare, TeardownWare
)
    //物联网平台通过定义一种物的描述语言来描述物模型模块和功能，称为TSL（Thing Specification Language）
service api {
    @doc "更新产品物模型"
    @handler update
    post /update (CommonSchemaUpdateReq) returns ()
    @doc "更新产品物模型"
    @handler create
    post /create (CommonSchemaCreateReq) returns ()
    @doc "更新产品物模型"
    @handler delete
    post /delete (CommonSchemaDeleteReq) returns ()
    @doc "获取产品物模型"
    @handler index
    post /index (CommonSchemaIndexReq) returns (CommonSchemaIndexResp)
}

type (
    CommonSchemaUpdateReq struct {
        *CommonSchemaInfo
    }
    CommonSchemaCreateReq struct {
         *CommonSchemaInfo
    }
    CommonSchemaDeleteReq {
        ID int64 `json:"id"`         //产品id
    }
    CommonSchemaIndexReq {
        Page *PageInfo `json:"page,optional"`                              //分页信息,只获取一个则不填
        Type int64 `json:"type,optional"`                                  //物模型类型 1:property属性 2:event事件 3:action行为
        Identifiers []string `json:"identifiers,optional"`                 //过滤标识符列表
        ProductIDs []string `json:"productIDs,optional"`//提取产品共有的物模型
    }
    CommonSchemaIndexResp {
        List []*CommonSchemaInfo `json:"list"`           //分页信息,只获取一个则不填
        Total int64 `json:"total"`                        //总数(只有分页的时候会返回)
    }
)


type (
/*物模型条目*/
    CommonSchemaInfo struct {
        ID int64 `json:"id,optional"`         //产品id
        Type int64 `json:"type,optional"`                             //物模型类型 1:property属性 2:event事件 3:action行为
        Identifier string `json:"identifier,optional"`                //标识符
        ExtendConfig string    `json:"extendConfig,optional"`//拓展参数
        Name *string `json:"name,optional"`                           //功能名称
        Desc *string `json:"desc,optional"`                           //描述
        Required int64 `json:"required,optional"`                     //是否必须 1:是 2:否
        Affordance *string `json:"affordance,optional"`                //各功能类型的详细参数定义
//        Event *SchemaEvent `json:"event,optional"`           //事件参数定义
//        Property *SchemaProperty `json:"property,optional"`  //属性参数定义
//        Action *SchemaAction `json:"action,optional"`        //行为参数定义
    }

)