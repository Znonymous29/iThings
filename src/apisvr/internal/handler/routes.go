// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	devicedeviceauth "github.com/i-Things/things/src/apisvr/internal/handler/device/device/auth"
	devicedeviceinfo "github.com/i-Things/things/src/apisvr/internal/handler/device/device/info"
	devicedeviceinteract "github.com/i-Things/things/src/apisvr/internal/handler/device/device/interact"
	devicedevicemsg "github.com/i-Things/things/src/apisvr/internal/handler/device/device/msg"
	deviceproductinfo "github.com/i-Things/things/src/apisvr/internal/handler/device/product/info"
	deviceproductschema "github.com/i-Things/things/src/apisvr/internal/handler/device/product/schema"
	systemuser "github.com/i-Things/things/src/apisvr/internal/handler/system/user"
	"github.com/i-Things/things/src/apisvr/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/core/create",
				Handler: systemuser.CoreCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info/create",
				Handler: systemuser.InfoCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/captcha",
				Handler: systemuser.CaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/core/index",
				Handler: systemuser.CoreIndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: systemuser.LoginHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/system/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckToken},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/info/update",
					Handler: systemuser.InfoUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemuser.ReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/delete",
					Handler: systemuser.InfoDeleteHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: devicedeviceauth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/access",
				Handler: devicedeviceauth.AccessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/root-check",
				Handler: devicedeviceauth.RootCheckHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/device/device/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/hub-log/index",
				Handler: devicedevicemsg.HubLogIndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/sdk-log/index",
				Handler: devicedevicemsg.SdkLogIndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/schema-log/index",
				Handler: devicedevicemsg.SchemaLogIndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/schema-latest/index",
				Handler: devicedevicemsg.SchemaLatestIndexHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/device/device/msg"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: devicedeviceinfo.CreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: devicedeviceinfo.UpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: devicedeviceinfo.DeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/index",
				Handler: devicedeviceinfo.IndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/read",
				Handler: devicedeviceinfo.ReadHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/device/device/info"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/send-action",
				Handler: devicedeviceinteract.SendActionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/send-property",
				Handler: devicedeviceinteract.SendPropertyHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/device/device/interact"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: deviceproductinfo.CreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: deviceproductinfo.UpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: deviceproductinfo.DeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/index",
				Handler: deviceproductinfo.IndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/read",
				Handler: deviceproductinfo.ReadHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/device/product/info"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/schema/update",
				Handler: deviceproductschema.UpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/schema/read",
				Handler: deviceproductschema.ReadHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/device/product/schema"),
	)
}
