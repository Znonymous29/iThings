// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	frontdc "github.com/i-Things/things/src/apisvr/internal/handler/front/dc"
	frontuser "github.com/i-Things/things/src/apisvr/internal/handler/front/user"
	frontverify "github.com/i-Things/things/src/apisvr/internal/handler/front/verify"
	opendc "github.com/i-Things/things/src/apisvr/internal/handler/open/dc"
	opendm "github.com/i-Things/things/src/apisvr/internal/handler/open/dm"
	openuser "github.com/i-Things/things/src/apisvr/internal/handler/open/user"
	"github.com/i-Things/things/src/apisvr/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/captcha",
				Handler: frontverify.CaptchaHandler(serverCtx),
			},
		},
		rest.WithPrefix("/front/verify"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: frontuser.LoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/registerCore",
					Handler: frontuser.RegisterCoreHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/front/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/register2",
					Handler: frontuser.Register2Handler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/front/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckToken, serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/userInfo",
					Handler: frontuser.UserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/modifyUserInfo",
					Handler: frontuser.ModifyUserInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/front/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/userCoreList",
					Handler: openuser.UserCoreListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/userInfos",
					Handler: openuser.UserInfosHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/open/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/loginAuth",
				Handler: opendm.LoginAuthHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/manageDevice",
				Handler: opendm.ManageDeviceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/manageProduct",
				Handler: opendm.ManageProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getProductInfo",
				Handler: opendm.GetProductInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/manageProductTemplate",
				Handler: opendm.ManageProductTemplateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getProductTemplate",
				Handler: opendm.GetProductTemplateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getDeviceInfo",
				Handler: opendm.GetDeviceInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/sendAction",
				Handler: opendm.SendActionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/sendProperty",
				Handler: opendm.SendPropertyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getDeviceData",
				Handler: opendm.GetDeviceDataHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getDeviceDescribeLog",
				Handler: opendm.GetDeviceDescribeLogHandler(serverCtx),
			},
		},
		rest.WithPrefix("/open/dm"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckToken},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/manageGroupInfo",
					Handler: frontdc.ManageGroupInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/manageGroupMember",
					Handler: frontdc.ManageGroupMemberHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/getGroupInfo",
					Handler: frontdc.GetGroupInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/getGroupMember",
					Handler: frontdc.GetGroupMemberHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sendAction",
					Handler: frontdc.SendActionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sendProperty",
					Handler: frontdc.SendPropertyHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/front/dc"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/manageGroupInfo",
				Handler: opendc.BgManageGroupInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/manageGroupMember",
				Handler: opendc.BgManageGroupMemberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getGroupInfo",
				Handler: opendc.BgGetGroupInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getGroupMember",
				Handler: opendc.BgGetGroupMemberHandler(serverCtx),
			},
		},
		rest.WithPrefix("/open/dc"),
	)
}
