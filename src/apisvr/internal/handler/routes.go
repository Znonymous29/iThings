// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	systemuser "github.com/i-Things/things/src/apisvr/internal/handler/system/user"
	thingsauth "github.com/i-Things/things/src/apisvr/internal/handler/things/auth"
	thingsdata "github.com/i-Things/things/src/apisvr/internal/handler/things/data"
	thingsdevice "github.com/i-Things/things/src/apisvr/internal/handler/things/device"
	thingsproduct "github.com/i-Things/things/src/apisvr/internal/handler/things/product"
	"github.com/i-Things/things/src/apisvr/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/core/create",
					Handler: systemuser.CoreCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/create",
					Handler: systemuser.InfoCreateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/captcha",
					Handler: systemuser.CaptchaHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/core/index",
					Handler: systemuser.CoreIndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: systemuser.LoginHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckToken, serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/info/update",
					Handler: systemuser.InfoUpdateHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/read",
					Handler: systemuser.ReadHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/info/delete",
					Handler: systemuser.InfoDeleteHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/api/v1/system/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: thingsauth.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/access",
				Handler: thingsauth.AccessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/root-check",
				Handler: thingsauth.RootCheckHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/things/auth"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/hub-log/index",
				Handler: thingsdata.HubLogIndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/sdk-log/index",
				Handler: thingsdata.SdkLogIndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/schema-log/index",
				Handler: thingsdata.SchemaLogIndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/schema-latest/index",
				Handler: thingsdata.SchemaLatestIndexHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/things/data"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/test",
				Handler: thingsdevice.TestHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/create",
				Handler: thingsdevice.InfoCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update",
				Handler: thingsdevice.InfoUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete",
				Handler: thingsdevice.InfoDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/index",
				Handler: thingsdevice.InfoIndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/read",
				Handler: thingsdevice.InfoReadHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/things/device"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/info/create",
				Handler: thingsproduct.InfoCreateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info/update",
				Handler: thingsproduct.InfoUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info/delete",
				Handler: thingsproduct.InfoDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info/index",
				Handler: thingsproduct.InfoIndexHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/info/read",
				Handler: thingsproduct.InfoReadHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/schema/update",
				Handler: thingsproduct.SchemaUpdateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/schema/read",
				Handler: thingsproduct.SchemaReadHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/things/product"),
	)
}
