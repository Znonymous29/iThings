// Code generated by goctl. DO NOT EDIT.
package types

type UserCoreCreateReq struct {
	ReqType  string `json:"reqType,options=phone|wxopen|wxin|wxminip|password"` //注册方式:	phone手机号注册 wxopen 微信开放平台登录 wxin 微信内登录 wxminip 微信小程序 密码方式 password 账密方式 必输
	Identity string `json:"identity"`                                           //手机号注册时填写手机号,账密登录时填写用户账号 必输
	Code     string `json:"code,optional"`                                      //验证码    微信登录填code
	CodeID   string `json:"codeID,optional"`                                    //验证码编号 微信登录填state
	Password string `json:"password"`                                           //明文密码 必输，且做大小写校验
	Role     int64  `json:"role"`                                               //用户角色 必输
}

type UserCoreCreateResp struct {
	Uid int64 `json:"uid,string"` //用户id
	JwtToken
}

type UserInfoCreateReq struct {
	Token string `json:"token"` //注册第一步的token
	UserInfo
}

type UserCaptchaReq struct {
	Data string `json:"data,optional"`              //短信验证时填写手机号
	Type string `json:"type,options=sms|image"`     //验证方式:短信验证,图片验证码
	Use  string `json:"use,options=login|register"` //用途
}

type UserCaptchaResp struct {
	CodeID string `json:"codeID"`       //验证码编号
	Url    string `json:"url,optional"` //图片验证码url
	Expire int64  `json:"expire"`       //过期时间
}

type UserCoreIndexReq struct {
	Page PageInfo `json:"page,optional,optional"` //分页信息,只获取一个则不填
}

type UserCoreIndexResp struct {
	List  []*UserCore `json:"list,omitempty"`           //用户核心信息列表
	Total int64       `json:"total,optional,omitempty"` //总数
}

type UserInfoUpdateReq struct {
	Uid        string `json:"uid,optional"`               //用户id
	NickName   string `json:"nickName,optional"`          // 用户的昵称
	InviterUid int64  `json:"inviterUid,string,optional"` // 邀请人用户id
	InviterId  string `json:"inviterId,optional"`         // 邀请码
	Sex        int64  `json:"sex,optional"`               // 用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
	City       string `json:"city,optional"`              // 用户所在城市
	Country    string `json:"country,optional"`           // 用户所在国家
	Province   string `json:"province,optional"`          // 用户所在省份
	Language   string `json:"language,optional"`          // 用户的语言，简体中文为zh_CN
	HeadImgUrl string `json:"headImgUrl,optional"`        // 用户头像
}

type UserIndexResp struct {
	Uid        int64  `json:"uid,string"`                 // 用户id
	UserName   string `json:"userName,optional"`          //用户名(唯一)
	NickName   string `json:"nickName,optional"`          // 用户的昵称
	InviterUid int64  `json:"inviterUid,string,optional"` // 邀请人用户id
	InviterId  string `json:"inviterId,optional"`         // 邀请码
	Sex        int64  `json:"sex,optional"`               // 用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
	City       string `json:"city,optional"`              // 用户所在城市
	Country    string `json:"country,optional"`           // 用户所在国家
	Province   string `json:"province,optional"`          // 用户所在省份
	Language   string `json:"language,optional"`          // 用户的语言，简体中文为zh_CN
	HeadImgUrl string `json:"headImgUrl,optional"`        // 用户头像
	CreateTime int64  `json:"createTime,string,optional"`
	Password   string `json:"password,omitempty"` // 登录密码
	Email      string `json:"email"`              // 邮箱
	Phone      string `json:"phone"`              // 手机号
	Wechat     string `json:"wechat"`             // 微信UnionID
	LastIP     string `json:"lastIP"`             // 最后登录ip
	RegIP      string `json:"regIP"`              // 注册ip
	Status     int64  `json:"status"`             // 用户状态:0为未注册状态
}

type UserInfoDeleteReq struct {
	Uid string `json:"uid,omitempty"` //用户id
}

type UserLoginReq struct {
	UserID    string `json:"userID"`                                        //登录账号(支持用户名,手机号登录) 账号密码登录时需要填写
	PwdType   int32  `json:"pwdType"`                                       //账号密码登录时需要填写.0,无密码 1，明文 2，md5加密
	Password  string `json:"password"`                                      //密码，建议md5转换 密码登录时需要填写
	LoginType string `json:"loginType,options=sms|img|wxopen|wxin|wxminip"` //验证类型 sms 短信验证码 img 图形验证码加账号密码登录 wxopen 微信开放平台登录 wxin 微信内登录 wxminip 微信小程序
	Code      string `json:"code,optional"`                                 //验证码    微信登录填code
	CodeID    string `json:"codeID,optional"`                               //验证码编号 微信登录填state
}

type UserLoginResp struct {
	Info  UserInfoWithRole `json:"info"`  //用户信息
	Token JwtToken         `json:"token"` //用户token
}

type JwtToken struct {
	AccessToken  string `json:"accessToken,omitempty"`
	AccessExpire int64  `json:"accessExpire,string,omitempty"`
	RefreshAfter int64  `json:"refreshAfter,string,omitempty"`
}

type UserInfoWithRole struct {
	UserInfo
	Role int64 `json:"role"` //用户角色
}

type UserInfo struct {
	Uid        int64  `json:"uid,string"`                 // 用户id
	UserName   string `json:"userName,optional"`          //用户名(唯一)
	NickName   string `json:"nickName,optional"`          // 用户的昵称
	InviterUid int64  `json:"inviterUid,string,optional"` // 邀请人用户id
	InviterId  string `json:"inviterId,optional"`         // 邀请码
	Sex        int64  `json:"sex,optional"`               // 用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
	City       string `json:"city,optional"`              // 用户所在城市
	Country    string `json:"country,optional"`           // 用户所在国家
	Province   string `json:"province,optional"`          // 用户所在省份
	Language   string `json:"language,optional"`          // 用户的语言，简体中文为zh_CN
	HeadImgUrl string `json:"headImgUrl,optional"`        // 用户头像
	CreateTime int64  `json:"createTime,string,optional"`
}

type UserCore struct {
	Uid         int64  `json:"uid,string"`
	UserName    string `json:"userName"`
	Password    string `json:"password,omitempty"` // 登录密码
	Email       string `json:"email"`              // 邮箱
	Phone       string `json:"phone"`              // 手机号
	Wechat      string `json:"wechat"`             // 微信UnionID
	LastIP      string `json:"lastIP"`             // 最后登录ip
	RegIP       string `json:"regIP"`              // 注册ip
	CreatedTime int64  `json:"createdTime,string"` //创建时间
	Status      int64  `json:"status"`             // 用户状态:0为未注册状态
	Role        int64  `json:"role"`               // 用户角色
}

type UserIndexReq struct {
	Uid int64 `json:"uid,string"` // 用户id
}

type PageInfo struct {
	Page int64 `json:"page,optional" form:"page,optional"` // 页码
	Size int64 `json:"size,optional" form:"size,optional"` // 每页大小
}

type LoginAuthReq struct {
	Username    string `json:"username"`                       //用户名
	Password    string `json:"password,optional"`              //密码
	ClientID    string `json:"clientID"`                       //clientID
	Ip          string `json:"ip"`                             //访问的ip地址
	Certificate string `json:"certificate,optional,omitempty"` //客户端证书 base64后传过来
}

type AccessAuthReq struct {
	Username string `json:"username,omitempty"` //用户名
	Topic    string `json:"topic,omitempty"`    //主题
	ClientID string `json:"clientID,omitempty"` //clientID
	Access   string `json:"access,omitempty"`   //操作
	Ip       string `json:"ip,omitempty"`       //访问的ip地址
}

type RootCheckReq struct {
	Username    string `json:"username,omitempty"`             //用户名
	Password    string `json:"password,optional,omitempty"`    //密码
	ClientID    string `json:"clientID,omitempty"`             //clientID
	Ip          string `json:"ip,omitempty"`                   //访问的ip地址
	Certificate []byte `json:"certificate,optional,omitempty"` //客户端证书
}

type DataHubLogIndexReq struct {
	DeviceName string   `json:"deviceName,omitempty"`                //设备名
	ProductID  string   `json:"productID,omitempty"`                 //产品id 获取产品id下的所有设备信息
	TimeStart  int64    `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd    int64    `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page       PageInfo `json:"page,optional"`                       //分页信息
}

type DataHubLogIndexResp struct {
	List  []*DataHubLogIndex `json:"list"`  //数据
	Total int64              `json:"total"` //总数
}

type DataHubLogIndex struct {
	Timestamp  int64  `json:"timestamp,string"`
	Action     string `json:"action"`
	RequestID  string `json:"requestID"`
	TranceID   string `json:"tranceID"`
	Topic      string `json:"topic"`
	Content    string `json:"content"`
	ResultType int64  `json:"resultType,string"`
}

type DataSdkLogIndexReq struct {
	DeviceName string   `json:"deviceName,omitempty"`                //设备名
	ProductID  string   `json:"productID,omitempty"`                 //产品id 获取产品id下的所有设备信息
	TimeStart  int64    `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd    int64    `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page       PageInfo `json:"page,optional"`                       //分页信息
}

type DataSdkIndexResp struct {
	List  []*DataSdkIndex `json:"list"`  //数据
	Total int64           `json:"total"` //总数
}

type DataSdkIndex struct {
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
	Loglevel  int64  `json:"loglevel"`         //日志级别 1)关闭 2)错误 3)告警 4)信息 5)调试
	Content   string `json:"content"`          //具体内容
}

type DataSchemaLogIndexReq struct {
	Method     string   `json:"method,omitempty"`                    //获取的类型   property 属性 event事件  log 所有日志
	DeviceName []string `json:"deviceName,omitempty"`                //设备名(不填获取产品下所有设备)
	ProductID  string   `json:"productID,omitempty"`                 //产品id 获取产品id下的所有设备信息
	DataID     string   `json:"dataID,optional,omitempty"`           //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
	TimeStart  int64    `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd    int64    `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page       PageInfo `json:"page,optional"`                       //分页信息
	Interval   int64    `json:"interval,optional"`                   //分页信息
	ArgFunc    string   `json:"argFunc,optional"`                    //分页信息
	Fill       string   `json:"fill,optional"`                       //填充模式 参考:https://docs.taosdata.com/taos-sql/distinguished/
	Order      int32    `json:"order,optional"`                      //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
}

type DataSchemaLatestIndexReq struct {
	Method     string   `json:"method,omitempty"`          //获取的类型   property 属性 event事件  log 所有日志
	DeviceName string   `json:"deviceName,omitempty"`      //设备名
	ProductID  string   `json:"productID,omitempty"`       //产品id 获取产品id下的所有设备信息
	DataID     []string `json:"dataID,optional,omitempty"` //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

type DataSchemaIndexResp struct {
	List  []*DataSchemaIndex `json:"list"`  //数据
	Total int64              `json:"total"` //总数
}

type DataSchemaIndex struct {
	Timestamp int64  `json:"timestamp,string"`    //发生时间戳
	Type      string `json:"type,omitempty"`      //类型 事件类型: 信息:info  告警alert  故障:fault
	DataID    string `json:"dataID"`              //获取的具体属性值
	GetValue  string `json:"getValue,omitempty"`  //获取到的值
	SendValue string `json:"sendValue,omitempty"` //发送过去的参数(action限定)
}

type DeviceTag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type DeviceInfo struct {
	ProductID   string       `json:"productID"`                   //产品id 只读
	DeviceName  string       `json:"deviceName"`                  //设备名称 读写
	CreatedTime int64        `json:"createdTime,optional,string"` //创建时间 只读
	Secret      string       `json:"secret,optional"`             //设备秘钥 只读
	FirstLogin  int64        `json:"firstLogin,optional,string"`  //激活时间 只读
	LastLogin   int64        `json:"lastLogin,optional,string"`   //最后上线时间 只读
	Version     *string      `json:"version,optional"`            // 固件版本  读写
	LogLevel    int64        `json:"logLevel,optional"`           // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	Cert        string       `json:"cert,optional"`               // 设备证书  只读
	Tags        []*DeviceTag `json:"tags,optional"`               // 设备tag
	IsOnline    bool         `json:"isOnline,optional"`           // 在线状态:0)离线 1)在线
}

type DeviceInfoCreateReq struct {
	ProductID  string       `json:"productID"`         //产品id 只读
	DeviceName string       `json:"deviceName"`        //设备名称 读写
	LogLevel   int64        `json:"logLevel,optional"` // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	Tags       []*DeviceTag `json:"tags,optional"`     // 设备tag
}

type DeviceInfoUpdateReq struct {
	ProductID  string       `json:"productID"`         //产品id 只读
	DeviceName string       `json:"deviceName"`        //设备名称 读写
	LogLevel   int64        `json:"logLevel,optional"` // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	Tags       []*DeviceTag `json:"tags,optional"`     // 设备tag
}

type DeviceInfoDeleteReq struct {
	ProductID  string `json:"productID"`  //产品id 只读
	DeviceName string `json:"deviceName"` //设备名称 读写
}

type DeviceInfoReadReq struct {
	ProductID  string `json:"productID,optional"` //产品id 为空时获取所有产品
	DeviceName string `json:"deviceName"`         //设备名称 读写
}

type DeviceInfoIndexReq struct {
	Page       PageInfo     `json:"page,optional"`       //分页信息 只获取一个则不填
	ProductID  string       `json:"productID,optional"`  //产品id 为空时获取所有产品
	DeviceName string       `json:"deviceName,optional"` //过滤条件:模糊查询 设备名
	Tags       []*DeviceTag `json:"tags,optional"`       // key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
}

type DeviceInfoIndexResp struct {
	List  []*DeviceInfo `json:"list"`  //设备信息
	Total int64         `json:"total"` //总数(只有分页的时候会返回)
	Num   int64         `json:"num"`   //返回的数量
}

type ProductInfo struct {
	CreatedTime  int64   `json:"createdTime,optional,string"` //创建时间 只读
	ProductID    string  `json:"productID,optional"`          //产品id 只读
	ProductName  string  `json:"productName,optional"`        //产品名称
	AuthMode     int64   `json:"authMode,optional"`           //认证方式:1:账密认证,2:秘钥认证
	DeviceType   int64   `json:"deviceType,optional"`         //设备类型:1:设备,2:网关,3:子设备
	CategoryID   int64   `json:"categoryID,optional"`         //产品品类
	NetType      int64   `json:"netType,optional"`            //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	DataProto    int64   `json:"dataProto,optional"`          //数据协议:1:自定义,2:数据模板
	AutoRegister int64   `json:"autoRegister,optional"`       //动态注册:1:关闭,2:打开,3:打开并自动创建设备
	Secret       string  `json:"secret,optional"`             //动态注册产品秘钥 只读
	Description  *string `json:"description,optional"`        //描述
}

type ProductInfoReadReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductInfoCreateReq struct {
	ProductName  string  `json:"productName"`           //产品名称
	AuthMode     int64   `json:"authMode,optional"`     //认证方式:1:账密认证,2:秘钥认证
	DeviceType   int64   `json:"deviceType,optional"`   //设备类型:1:设备,2:网关,3:子设备
	CategoryID   int64   `json:"categoryID,optional"`   //产品品类
	NetType      int64   `json:"netType,optional"`      //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	DataProto    int64   `json:"dataProto,optional"`    //数据协议:1:自定义,2:数据模板
	AutoRegister int64   `json:"autoRegister,optional"` //动态注册:1:关闭,2:打开,3:打开并自动创建设备
	Description  *string `json:"description,optional"`  //描述
}

type ProductInfoUpdateReq struct {
	ProductID    string  `json:"productID"`             //产品id 只读
	ProductName  string  `json:"productName,optional"`  //产品名称
	AuthMode     int64   `json:"authMode,optional"`     //认证方式:1:账密认证,2:秘钥认证
	DeviceType   int64   `json:"deviceType,optional"`   //设备类型:1:设备,2:网关,3:子设备
	CategoryID   int64   `json:"categoryID,optional"`   //产品品类
	NetType      int64   `json:"netType,optional"`      //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	DataProto    int64   `json:"dataProto,optional"`    //数据协议:1:自定义,2:数据模板
	AutoRegister int64   `json:"autoRegister,optional"` //动态注册:1:关闭,2:打开,3:打开并自动创建设备
	Description  *string `json:"description,optional"`  //描述
}

type ProductInfoDeleteReq struct {
	ProductID string `json:"productID"` //产品id 只读
}

type ProductInfoIndexReq struct {
	Page        PageInfo `json:"page,optional"`        //分页信息,只获取一个则不填
	ProductName string   `json:"productName,optional"` //过滤产品名称
	DeviceType  int64    `json:"deviceType,optional"`  //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
}

type ProductInfoIndexResp struct {
	List  []*ProductInfo `json:"list"`           //产品信息
	Total int64          `json:"total,optional"` //拥有的总数
	Num   int64          `json:"num,optional"`   //返回的数量
}

type ProductSchema struct {
	CreatedTime int64  `json:"createdTime,optional,string"` //创建时间 只读
	ProductID   string `json:"productID,optional"`          //产品id 只读
	Schema      string `json:"schema,optional"`             //数据模板
}

type ProductSchemaUpdateReq struct {
	ProductID string `json:"productID"` //产品id
	Schema    string `json:"schema"`    //数据模板
}

type ProductSchemaReadReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductSchemaReadResp struct {
	ProductSchema
}
