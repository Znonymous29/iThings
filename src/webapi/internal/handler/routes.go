// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	dc "gitee.com/godLei6/things/src/webapi/internal/handler/dc"
	dm "gitee.com/godLei6/things/src/webapi/internal/handler/dm"
	user "gitee.com/godLei6/things/src/webapi/internal/handler/user"
	verify "gitee.com/godLei6/things/src/webapi/internal/handler/verify"
	"gitee.com/godLei6/things/src/webapi/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {
	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/verify/captcha",
				Handler: verify.CaptchaHandler(serverCtx),
			},
		},
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/front/user/login",
					Handler: user.LoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/front/user/registerCore",
					Handler: user.RegisterCoreHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/front/user/register2",
					Handler: user.Register2Handler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckToken, serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/front/user/info",
					Handler: user.UserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/front/user/modifyUserInfo",
					Handler: user.ModifyUserInfoHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.DmManage},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/backgrand/dm/loginAuth",
					Handler: dm.LoginAuthHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/backgrand/dm/manageDevice",
					Handler: dm.ManageDeviceHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/backgrand/dm/manageProduct",
					Handler: dm.ManageProductHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/backgrand/dm/getProductInfo",
					Handler: dm.GetProductInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/backgrand/dm/getDeviceInfo",
					Handler: dm.GetDeviceInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/backgrand/dm/sendAction",
					Handler: dm.SendActionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/backgrand/dm/sendProperty",
					Handler: dm.SendPropertyHandler(serverCtx),
				},
			}...,
		),
	)

	engine.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/front/dc/manageGroupInfo",
				Handler: dc.ManageGroupInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/front/dc/manageGroupMember",
				Handler: dc.ManageGroupMemberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/front/dc/getGroupInfo",
				Handler: dc.GetGroupInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/front/dc/getGroupMember",
				Handler: dc.GetGroupMemberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/front/dc/sendAction",
				Handler: dc.SendActionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/front/dc/sendProperty",
				Handler: dc.SendPropertyHandler(serverCtx),
			},
		},
	)
}
