// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	backgranddc "github.com/go-things/things/src/webapi/internal/handler/backgrand/dc"
	backgranddm "github.com/go-things/things/src/webapi/internal/handler/backgrand/dm"
	backgranduser "github.com/go-things/things/src/webapi/internal/handler/backgrand/user"
	frontdc "github.com/go-things/things/src/webapi/internal/handler/front/dc"
	frontuser "github.com/go-things/things/src/webapi/internal/handler/front/user"
	frontverify "github.com/go-things/things/src/webapi/internal/handler/front/verify"
	"github.com/go-things/things/src/webapi/internal/svc"

	"github.com/tal-tech/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/captcha",
				Handler: frontverify.CaptchaHandler(serverCtx),
			},
		},
		rest.WithPrefix("/front/verify"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/login",
					Handler: frontuser.LoginHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/registerCore",
					Handler: frontuser.RegisterCoreHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/front/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/register2",
					Handler: frontuser.Register2Handler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/front/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckToken, serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/userInfo",
					Handler: frontuser.UserInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/modifyUserInfo",
					Handler: frontuser.ModifyUserInfoHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/front/user"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.Record},
			[]rest.Route{
				{
					Method:  http.MethodGet,
					Path:    "/userCoreList",
					Handler: backgranduser.UserCoreListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/userInfos",
					Handler: backgranduser.UserInfosHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/backgrand/user"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/loginAuth",
				Handler: backgranddm.LoginAuthHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/manageDevice",
				Handler: backgranddm.ManageDeviceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/manageProduct",
				Handler: backgranddm.ManageProductHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getProductInfo",
				Handler: backgranddm.GetProductInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/manageProductTemplate",
				Handler: backgranddm.ManageProductTemplateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getProductTemplate",
				Handler: backgranddm.GetProductTemplateHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getDeviceInfo",
				Handler: backgranddm.GetDeviceInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/sendAction",
				Handler: backgranddm.SendActionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/sendProperty",
				Handler: backgranddm.SendPropertyHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/getDeviceLog",
				Handler: backgranddm.GetDeviceLogHandler(serverCtx),
			},
		},
		rest.WithPrefix("/backgrand/dm"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.CheckToken},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/manageGroupInfo",
					Handler: frontdc.ManageGroupInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/manageGroupMember",
					Handler: frontdc.ManageGroupMemberHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/getGroupInfo",
					Handler: frontdc.GetGroupInfoHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/getGroupMember",
					Handler: frontdc.GetGroupMemberHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sendAction",
					Handler: frontdc.SendActionHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/sendProperty",
					Handler: frontdc.SendPropertyHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/front/dc"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/manageGroupInfo",
				Handler: backgranddc.BgManageGroupInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/manageGroupMember",
				Handler: backgranddc.BgManageGroupMemberHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getGroupInfo",
				Handler: backgranddc.BgGetGroupInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getGroupMember",
				Handler: backgranddc.BgGetGroupMemberHandler(serverCtx),
			},
		},
		rest.WithPrefix("/backgrand/dc"),
	)
}
