// Code generated by goctl. DO NOT EDIT.
// Source: vid.proto

package vidmgrgbsipmanage

import (
	"context"

	"github.com/i-Things/things/src/vidsvr/internal/svc"
	"github.com/i-Things/things/src/vidsvr/pb/vid"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	PageInfo                    = vid.PageInfo
	PageInfo_OrderBy            = vid.PageInfo_OrderBy
	Response                    = vid.Response
	StreamTrack                 = vid.StreamTrack
	VidPlanInfo                 = vid.VidPlanInfo
	VidmgrConfig                = vid.VidmgrConfig
	VidmgrConfigDeleteReq       = vid.VidmgrConfigDeleteReq
	VidmgrConfigIndexReq        = vid.VidmgrConfigIndexReq
	VidmgrConfigIndexResp       = vid.VidmgrConfigIndexResp
	VidmgrConfigReadReq         = vid.VidmgrConfigReadReq
	VidmgrGbsipChannel          = vid.VidmgrGbsipChannel
	VidmgrGbsipChannelCreate    = vid.VidmgrGbsipChannelCreate
	VidmgrGbsipChannelDelete    = vid.VidmgrGbsipChannelDelete
	VidmgrGbsipChannelIndexReq  = vid.VidmgrGbsipChannelIndexReq
	VidmgrGbsipChannelIndexResp = vid.VidmgrGbsipChannelIndexResp
	VidmgrGbsipChannelPlay      = vid.VidmgrGbsipChannelPlay
	VidmgrGbsipChannelRead      = vid.VidmgrGbsipChannelRead
	VidmgrGbsipChannelStop      = vid.VidmgrGbsipChannelStop
	VidmgrGbsipChannelUpdate    = vid.VidmgrGbsipChannelUpdate
	VidmgrGbsipDevice           = vid.VidmgrGbsipDevice
	VidmgrGbsipDeviceCreateReq  = vid.VidmgrGbsipDeviceCreateReq
	VidmgrGbsipDeviceDeleteReq  = vid.VidmgrGbsipDeviceDeleteReq
	VidmgrGbsipDeviceIndexReq   = vid.VidmgrGbsipDeviceIndexReq
	VidmgrGbsipDeviceIndexResp  = vid.VidmgrGbsipDeviceIndexResp
	VidmgrGbsipDeviceReadReq    = vid.VidmgrGbsipDeviceReadReq
	VidmgrGbsipDeviceUpdateReq  = vid.VidmgrGbsipDeviceUpdateReq
	VidmgrGbsipInfo             = vid.VidmgrGbsipInfo
	VidmgrGbsipInfoReadReq      = vid.VidmgrGbsipInfoReadReq
	VidmgrInfo                  = vid.VidmgrInfo
	VidmgrInfoActiveReq         = vid.VidmgrInfoActiveReq
	VidmgrInfoCountReq          = vid.VidmgrInfoCountReq
	VidmgrInfoCountResp         = vid.VidmgrInfoCountResp
	VidmgrInfoDeleteReq         = vid.VidmgrInfoDeleteReq
	VidmgrInfoIndexReq          = vid.VidmgrInfoIndexReq
	VidmgrInfoIndexResp         = vid.VidmgrInfoIndexResp
	VidmgrInfoReadReq           = vid.VidmgrInfoReadReq
	VidmgrStream                = vid.VidmgrStream
	VidmgrStreamCountReq        = vid.VidmgrStreamCountReq
	VidmgrStreamCountResp       = vid.VidmgrStreamCountResp
	VidmgrStreamCreateReq       = vid.VidmgrStreamCreateReq
	VidmgrStreamDeleteReq       = vid.VidmgrStreamDeleteReq
	VidmgrStreamIndexReq        = vid.VidmgrStreamIndexReq
	VidmgrStreamIndexResp       = vid.VidmgrStreamIndexResp
	VidmgrStreamReadReq         = vid.VidmgrStreamReadReq
	VidrecordfileInfo           = vid.VidrecordfileInfo

	VidmgrGbsipManage interface {
		// 新建通道
		VidmgrGbsipChannelCreate(ctx context.Context, in *VidmgrGbsipChannelCreate, opts ...grpc.CallOption) (*Response, error)
		// 删除通道
		VidmgrGbsipChannelDelete(ctx context.Context, in *VidmgrGbsipChannelDelete, opts ...grpc.CallOption) (*Response, error)
		// 更新通道
		VidmgrGbsipChannelUpdate(ctx context.Context, in *VidmgrGbsipChannelUpdate, opts ...grpc.CallOption) (*Response, error)
		// 播放通道
		VidmgrGbsipChannelPlay(ctx context.Context, in *VidmgrGbsipChannelPlay, opts ...grpc.CallOption) (*Response, error)
		// 暂停通道
		VidmgrGbsipChannelStop(ctx context.Context, in *VidmgrGbsipChannelStop, opts ...grpc.CallOption) (*Response, error)
		// 获取通道列表
		VidmgrGbsipChannelIndex(ctx context.Context, in *VidmgrGbsipChannelIndexReq, opts ...grpc.CallOption) (*VidmgrGbsipChannelIndexResp, error)
		// 获取通道详情
		VidmgrGbsipChannelRead(ctx context.Context, in *VidmgrGbsipChannelRead, opts ...grpc.CallOption) (*VidmgrGbsipChannel, error)
		// 新建GB28181设备
		VidmgrGbsipDeviceCreate(ctx context.Context, in *VidmgrGbsipDeviceCreateReq, opts ...grpc.CallOption) (*Response, error)
		// 删除GB28181设备
		VidmgrGbsipDeviceDelete(ctx context.Context, in *VidmgrGbsipDeviceDeleteReq, opts ...grpc.CallOption) (*Response, error)
		// 更新GB28181设备
		VidmgrGbsipDeviceUpdate(ctx context.Context, in *VidmgrGbsipDeviceUpdateReq, opts ...grpc.CallOption) (*Response, error)
		// 获取GB28181设备列表
		VidmgrGbsipDeviceIndex(ctx context.Context, in *VidmgrGbsipDeviceIndexReq, opts ...grpc.CallOption) (*VidmgrGbsipDeviceIndexResp, error)
		// 获取GB28181设备详情
		VidmgrGbsipDeviceRead(ctx context.Context, in *VidmgrGbsipDeviceReadReq, opts ...grpc.CallOption) (*VidmgrGbsipDevice, error)
		// 获取国标服务信息
		VidgmrGbsipInfoRead(ctx context.Context, in *VidmgrGbsipInfoReadReq, opts ...grpc.CallOption) (*VidmgrGbsipInfo, error)
	}

	defaultVidmgrGbsipManage struct {
		cli zrpc.Client
	}

	directVidmgrGbsipManage struct {
		svcCtx *svc.ServiceContext
		svr    vid.VidmgrGbsipManageServer
	}
)

func NewVidmgrGbsipManage(cli zrpc.Client) VidmgrGbsipManage {
	return &defaultVidmgrGbsipManage{
		cli: cli,
	}
}

func NewDirectVidmgrGbsipManage(svcCtx *svc.ServiceContext, svr vid.VidmgrGbsipManageServer) VidmgrGbsipManage {
	return &directVidmgrGbsipManage{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 新建通道
func (m *defaultVidmgrGbsipManage) VidmgrGbsipChannelCreate(ctx context.Context, in *VidmgrGbsipChannelCreate, opts ...grpc.CallOption) (*Response, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipChannelCreate(ctx, in, opts...)
}

// 新建通道
func (d *directVidmgrGbsipManage) VidmgrGbsipChannelCreate(ctx context.Context, in *VidmgrGbsipChannelCreate, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.VidmgrGbsipChannelCreate(ctx, in)
}

// 删除通道
func (m *defaultVidmgrGbsipManage) VidmgrGbsipChannelDelete(ctx context.Context, in *VidmgrGbsipChannelDelete, opts ...grpc.CallOption) (*Response, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipChannelDelete(ctx, in, opts...)
}

// 删除通道
func (d *directVidmgrGbsipManage) VidmgrGbsipChannelDelete(ctx context.Context, in *VidmgrGbsipChannelDelete, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.VidmgrGbsipChannelDelete(ctx, in)
}

// 更新通道
func (m *defaultVidmgrGbsipManage) VidmgrGbsipChannelUpdate(ctx context.Context, in *VidmgrGbsipChannelUpdate, opts ...grpc.CallOption) (*Response, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipChannelUpdate(ctx, in, opts...)
}

// 更新通道
func (d *directVidmgrGbsipManage) VidmgrGbsipChannelUpdate(ctx context.Context, in *VidmgrGbsipChannelUpdate, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.VidmgrGbsipChannelUpdate(ctx, in)
}

// 播放通道
func (m *defaultVidmgrGbsipManage) VidmgrGbsipChannelPlay(ctx context.Context, in *VidmgrGbsipChannelPlay, opts ...grpc.CallOption) (*Response, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipChannelPlay(ctx, in, opts...)
}

// 播放通道
func (d *directVidmgrGbsipManage) VidmgrGbsipChannelPlay(ctx context.Context, in *VidmgrGbsipChannelPlay, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.VidmgrGbsipChannelPlay(ctx, in)
}

// 暂停通道
func (m *defaultVidmgrGbsipManage) VidmgrGbsipChannelStop(ctx context.Context, in *VidmgrGbsipChannelStop, opts ...grpc.CallOption) (*Response, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipChannelStop(ctx, in, opts...)
}

// 暂停通道
func (d *directVidmgrGbsipManage) VidmgrGbsipChannelStop(ctx context.Context, in *VidmgrGbsipChannelStop, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.VidmgrGbsipChannelStop(ctx, in)
}

// 获取通道列表
func (m *defaultVidmgrGbsipManage) VidmgrGbsipChannelIndex(ctx context.Context, in *VidmgrGbsipChannelIndexReq, opts ...grpc.CallOption) (*VidmgrGbsipChannelIndexResp, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipChannelIndex(ctx, in, opts...)
}

// 获取通道列表
func (d *directVidmgrGbsipManage) VidmgrGbsipChannelIndex(ctx context.Context, in *VidmgrGbsipChannelIndexReq, opts ...grpc.CallOption) (*VidmgrGbsipChannelIndexResp, error) {
	return d.svr.VidmgrGbsipChannelIndex(ctx, in)
}

// 获取通道详情
func (m *defaultVidmgrGbsipManage) VidmgrGbsipChannelRead(ctx context.Context, in *VidmgrGbsipChannelRead, opts ...grpc.CallOption) (*VidmgrGbsipChannel, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipChannelRead(ctx, in, opts...)
}

// 获取通道详情
func (d *directVidmgrGbsipManage) VidmgrGbsipChannelRead(ctx context.Context, in *VidmgrGbsipChannelRead, opts ...grpc.CallOption) (*VidmgrGbsipChannel, error) {
	return d.svr.VidmgrGbsipChannelRead(ctx, in)
}

// 新建GB28181设备
func (m *defaultVidmgrGbsipManage) VidmgrGbsipDeviceCreate(ctx context.Context, in *VidmgrGbsipDeviceCreateReq, opts ...grpc.CallOption) (*Response, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipDeviceCreate(ctx, in, opts...)
}

// 新建GB28181设备
func (d *directVidmgrGbsipManage) VidmgrGbsipDeviceCreate(ctx context.Context, in *VidmgrGbsipDeviceCreateReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.VidmgrGbsipDeviceCreate(ctx, in)
}

// 删除GB28181设备
func (m *defaultVidmgrGbsipManage) VidmgrGbsipDeviceDelete(ctx context.Context, in *VidmgrGbsipDeviceDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipDeviceDelete(ctx, in, opts...)
}

// 删除GB28181设备
func (d *directVidmgrGbsipManage) VidmgrGbsipDeviceDelete(ctx context.Context, in *VidmgrGbsipDeviceDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.VidmgrGbsipDeviceDelete(ctx, in)
}

// 更新GB28181设备
func (m *defaultVidmgrGbsipManage) VidmgrGbsipDeviceUpdate(ctx context.Context, in *VidmgrGbsipDeviceUpdateReq, opts ...grpc.CallOption) (*Response, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipDeviceUpdate(ctx, in, opts...)
}

// 更新GB28181设备
func (d *directVidmgrGbsipManage) VidmgrGbsipDeviceUpdate(ctx context.Context, in *VidmgrGbsipDeviceUpdateReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.VidmgrGbsipDeviceUpdate(ctx, in)
}

// 获取GB28181设备列表
func (m *defaultVidmgrGbsipManage) VidmgrGbsipDeviceIndex(ctx context.Context, in *VidmgrGbsipDeviceIndexReq, opts ...grpc.CallOption) (*VidmgrGbsipDeviceIndexResp, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipDeviceIndex(ctx, in, opts...)
}

// 获取GB28181设备列表
func (d *directVidmgrGbsipManage) VidmgrGbsipDeviceIndex(ctx context.Context, in *VidmgrGbsipDeviceIndexReq, opts ...grpc.CallOption) (*VidmgrGbsipDeviceIndexResp, error) {
	return d.svr.VidmgrGbsipDeviceIndex(ctx, in)
}

// 获取GB28181设备详情
func (m *defaultVidmgrGbsipManage) VidmgrGbsipDeviceRead(ctx context.Context, in *VidmgrGbsipDeviceReadReq, opts ...grpc.CallOption) (*VidmgrGbsipDevice, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidmgrGbsipDeviceRead(ctx, in, opts...)
}

// 获取GB28181设备详情
func (d *directVidmgrGbsipManage) VidmgrGbsipDeviceRead(ctx context.Context, in *VidmgrGbsipDeviceReadReq, opts ...grpc.CallOption) (*VidmgrGbsipDevice, error) {
	return d.svr.VidmgrGbsipDeviceRead(ctx, in)
}

// 获取国标服务信息
func (m *defaultVidmgrGbsipManage) VidgmrGbsipInfoRead(ctx context.Context, in *VidmgrGbsipInfoReadReq, opts ...grpc.CallOption) (*VidmgrGbsipInfo, error) {
	client := vid.NewVidmgrGbsipManageClient(m.cli.Conn())
	return client.VidgmrGbsipInfoRead(ctx, in, opts...)
}

// 获取国标服务信息
func (d *directVidmgrGbsipManage) VidgmrGbsipInfoRead(ctx context.Context, in *VidmgrGbsipInfoReadReq, opts ...grpc.CallOption) (*VidmgrGbsipInfo, error) {
	return d.svr.VidgmrGbsipInfoRead(ctx, in)
}
