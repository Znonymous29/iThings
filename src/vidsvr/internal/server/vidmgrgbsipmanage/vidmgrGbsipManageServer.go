// Code generated by goctl. DO NOT EDIT.
// Source: vid.proto

package server

import (
	"context"

	"github.com/i-Things/things/src/vidsvr/internal/logic/vidmgrgbsipmanage"
	"github.com/i-Things/things/src/vidsvr/internal/svc"
	"github.com/i-Things/things/src/vidsvr/pb/vid"
)

type VidmgrGbsipManageServer struct {
	svcCtx *svc.ServiceContext
	vid.UnimplementedVidmgrGbsipManageServer
}

func NewVidmgrGbsipManageServer(svcCtx *svc.ServiceContext) *VidmgrGbsipManageServer {
	return &VidmgrGbsipManageServer{
		svcCtx: svcCtx,
	}
}

// 新建通道
func (s *VidmgrGbsipManageServer) VidmgrGbsipChannelCreate(ctx context.Context, in *vid.VidmgrGbsipChannelCreate) (*vid.Response, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipChannelCreateLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipChannelCreate(in)
}

// 删除通道
func (s *VidmgrGbsipManageServer) VidmgrGbsipChannelDelete(ctx context.Context, in *vid.VidmgrGbsipChannelDelete) (*vid.Response, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipChannelDeleteLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipChannelDelete(in)
}

// 更新通道
func (s *VidmgrGbsipManageServer) VidmgrGbsipChannelUpdate(ctx context.Context, in *vid.VidmgrGbsipChannelUpdate) (*vid.Response, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipChannelUpdateLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipChannelUpdate(in)
}

// 播放通道
func (s *VidmgrGbsipManageServer) VidmgrGbsipChannelPlay(ctx context.Context, in *vid.VidmgrGbsipChannelPlay) (*vid.Response, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipChannelPlayLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipChannelPlay(in)
}

// 暂停通道
func (s *VidmgrGbsipManageServer) VidmgrGbsipChannelStop(ctx context.Context, in *vid.VidmgrGbsipChannelStop) (*vid.Response, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipChannelStopLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipChannelStop(in)
}

// 获取通道列表
func (s *VidmgrGbsipManageServer) VidmgrGbsipChannelIndex(ctx context.Context, in *vid.VidmgrGbsipChannelIndexReq) (*vid.VidmgrGbsipChannelIndexResp, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipChannelIndexLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipChannelIndex(in)
}

// 获取通道详情
func (s *VidmgrGbsipManageServer) VidmgrGbsipChannelRead(ctx context.Context, in *vid.VidmgrGbsipChannelRead) (*vid.VidmgrGbsipChannel, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipChannelReadLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipChannelRead(in)
}

// 新建GB28181设备
func (s *VidmgrGbsipManageServer) VidmgrGbsipDeviceCreate(ctx context.Context, in *vid.VidmgrGbsipDeviceCreateReq) (*vid.Response, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipDeviceCreateLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipDeviceCreate(in)
}

// 删除GB28181设备
func (s *VidmgrGbsipManageServer) VidmgrGbsipDeviceDelete(ctx context.Context, in *vid.VidmgrGbsipDeviceDeleteReq) (*vid.Response, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipDeviceDeleteLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipDeviceDelete(in)
}

// 更新GB28181设备
func (s *VidmgrGbsipManageServer) VidmgrGbsipDeviceUpdate(ctx context.Context, in *vid.VidmgrGbsipDeviceUpdateReq) (*vid.Response, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipDeviceUpdateLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipDeviceUpdate(in)
}

// 获取GB28181设备列表
func (s *VidmgrGbsipManageServer) VidmgrGbsipDeviceIndex(ctx context.Context, in *vid.VidmgrGbsipDeviceIndexReq) (*vid.VidmgrGbsipDeviceIndexResp, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipDeviceIndexLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipDeviceIndex(in)
}

// 获取GB28181设备详情
func (s *VidmgrGbsipManageServer) VidmgrGbsipDeviceRead(ctx context.Context, in *vid.VidmgrGbsipDeviceReadReq) (*vid.VidmgrGbsipDevice, error) {
	l := vidmgrgbsipmanagelogic.NewVidmgrGbsipDeviceReadLogic(ctx, s.svcCtx)
	return l.VidmgrGbsipDeviceRead(in)
}

// 获取国标服务信息
func (s *VidmgrGbsipManageServer) VidgmrGbsipInfoRead(ctx context.Context, in *vid.VidmgrGbsipInfoReadReq) (*vid.VidmgrGbsipInfo, error) {
	l := vidmgrgbsipmanagelogic.NewVidgmrGbsipInfoReadLogic(ctx, s.svcCtx)
	return l.VidgmrGbsipInfoRead(in)
}
