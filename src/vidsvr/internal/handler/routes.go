// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	zlmediahooks "github.com/i-Things/things/src/vidsvr/internal/handler/zlmedia/hooks"
	zlmediaindex "github.com/i-Things/things/src/vidsvr/internal/handler/zlmedia/index"
	"github.com/i-Things/things/src/vidsvr/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/onFlowReport",
				Handler: zlmediahooks.OnFlowReportHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onHttpAccess",
				Handler: zlmediahooks.OnHttpAccessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onPlay",
				Handler: zlmediahooks.OnPlayHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onPublish",
				Handler: zlmediahooks.OnPublishHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onRecordMp4",
				Handler: zlmediahooks.OnRecordMp4Handler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onRtspRealm",
				Handler: zlmediahooks.OnRtspRealmHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onRtspAuth",
				Handler: zlmediahooks.OnRtspAuthHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onShellLogin",
				Handler: zlmediahooks.OnShellLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onStreamChanged",
				Handler: zlmediahooks.OnStreamChangedHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onStreamNoneReader",
				Handler: zlmediahooks.OnStreamNoneReaderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onStreamNotFound",
				Handler: zlmediahooks.OnStreamNotFoundHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onServerStarted",
				Handler: zlmediahooks.OnServerStartedHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onServerKeepalive",
				Handler: zlmediahooks.OnServerKeepaliveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onRtpServerTimeout",
				Handler: zlmediahooks.OnRtpServerTimeoutHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/zlmedia/hooks"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/getApiList",
				Handler: zlmediaindex.GetApiListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getThreadsLoad",
				Handler: zlmediaindex.GetThreadsLoadHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getWorkThreadsLoad",
				Handler: zlmediaindex.GetWorkThreadsLoadHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getServerConfig",
				Handler: zlmediaindex.GetServerConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/setServerConfig",
				Handler: zlmediaindex.SetServerConfigHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/restartServer",
				Handler: zlmediaindex.RestartServerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getMediaList",
				Handler: zlmediaindex.GetMediaListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/closeStream",
				Handler: zlmediaindex.CloseStreamHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/closeStreams",
				Handler: zlmediaindex.CloseStreamsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getAllSession",
				Handler: zlmediaindex.GetAllSessionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/kick_session",
				Handler: zlmediaindex.KickSessionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/kickSessions",
				Handler: zlmediaindex.KickSessionsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/addStreamProxy",
				Handler: zlmediaindex.AddStreamProxyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delStreamProxy",
				Handler: zlmediaindex.DelStreamProxyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/addFFmpegSource",
				Handler: zlmediaindex.AddFFmpegSourceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delFFmpegSource",
				Handler: zlmediaindex.DelFFmpegSourceHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/isMediaOnline",
				Handler: zlmediaindex.IsMediaOnlineHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getMediaInfo",
				Handler: zlmediaindex.GetMediaInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getRtpInfo",
				Handler: zlmediaindex.GetRtpInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getMp4RecordFile",
				Handler: zlmediaindex.GetMp4RecordFileHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/startRecord",
				Handler: zlmediaindex.StartRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/stopRecord",
				Handler: zlmediaindex.StopRecordHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/isRecording",
				Handler: zlmediaindex.IsRecordingHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getSnap",
				Handler: zlmediaindex.GetSnapHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/openRtpServer",
				Handler: zlmediaindex.OpenRtpServerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/closeRtpServer",
				Handler: zlmediaindex.CloseRtpServerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/listRtpServer",
				Handler: zlmediaindex.ListRtpServerHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/startSendRtp",
				Handler: zlmediaindex.StartSendRtpHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/startSendRtpPassive",
				Handler: zlmediaindex.StartSendRtpPassiveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/stopSendRtp",
				Handler: zlmediaindex.StopSendRtpHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getStatistic",
				Handler: zlmediaindex.GetStatisticHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/addStreamPusherProxy",
				Handler: zlmediaindex.AddStreamPusherProxyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delStreamPusherProxy",
				Handler: zlmediaindex.DelStreamPusherProxyHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/version",
				Handler: zlmediaindex.VersionHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/getMediaPlayerList",
				Handler: zlmediaindex.GetMediaPlayerListHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/zlmedia/index"),
	)
}
