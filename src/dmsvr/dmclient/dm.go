// Code generated by goctl. DO NOT EDIT!
// Source: dm.proto

//go:generate mockgen -destination ./dm_mock.go -package dmclient -source $GOFILE

package dmclient

import (
	"context"

	"gitee.com/godLei6/things/src/dmsvr/dm"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	PageInfo           = dm.PageInfo
	LoginAuthReq       = dm.LoginAuthReq
	GetProductInfoResp = dm.GetProductInfoResp
	DeviceInfo         = dm.DeviceInfo
	GetDeviceDataReq   = dm.GetDeviceDataReq
	GetDeviceDataResp  = dm.GetDeviceDataResp
	Response           = dm.Response
	GetDeviceInfoReq   = dm.GetDeviceInfoReq
	ManResp            = dm.ManResp
	AccessAuthReq      = dm.AccessAuthReq
	GetProductInfoReq  = dm.GetProductInfoReq
	GetDeviceInfoResp  = dm.GetDeviceInfoResp
	GetDeviceLogReq    = dm.GetDeviceLogReq
	ProductInfo        = dm.ProductInfo
	ManageProductReq   = dm.ManageProductReq
	ManageDeviceReq    = dm.ManageDeviceReq
	DeviceData         = dm.DeviceData
	GetDeviceLogResp   = dm.GetDeviceLogResp

	Dm interface {
		LoginAuth(ctx context.Context, in *LoginAuthReq) (*Response, error)
		AccessAuth(ctx context.Context, in *AccessAuthReq) (*Response, error)
		ManageDevice(ctx context.Context, in *ManageDeviceReq) (*DeviceInfo, error)
		ManageProduct(ctx context.Context, in *ManageProductReq) (*ProductInfo, error)
		GetProductInfo(ctx context.Context, in *GetProductInfoReq) (*GetProductInfoResp, error)
		GetDeviceInfo(ctx context.Context, in *GetDeviceInfoReq) (*GetDeviceInfoResp, error)
		GetDeviceData(ctx context.Context, in *GetDeviceDataReq) (*GetDeviceDataResp, error)
		GetDeviceLog(ctx context.Context, in *GetDeviceLogReq) (*GetDeviceLogResp, error)
	}

	defaultDm struct {
		cli zrpc.Client
	}
)

func NewDm(cli zrpc.Client) Dm {
	return &defaultDm{
		cli: cli,
	}
}

func (m *defaultDm) LoginAuth(ctx context.Context, in *LoginAuthReq) (*Response, error) {
	client := dm.NewDmClient(m.cli.Conn())
	return client.LoginAuth(ctx, in)
}

func (m *defaultDm) AccessAuth(ctx context.Context, in *AccessAuthReq) (*Response, error) {
	client := dm.NewDmClient(m.cli.Conn())
	return client.AccessAuth(ctx, in)
}

func (m *defaultDm) ManageDevice(ctx context.Context, in *ManageDeviceReq) (*DeviceInfo, error) {
	client := dm.NewDmClient(m.cli.Conn())
	return client.ManageDevice(ctx, in)
}

func (m *defaultDm) ManageProduct(ctx context.Context, in *ManageProductReq) (*ProductInfo, error) {
	client := dm.NewDmClient(m.cli.Conn())
	return client.ManageProduct(ctx, in)
}

func (m *defaultDm) GetProductInfo(ctx context.Context, in *GetProductInfoReq) (*GetProductInfoResp, error) {
	client := dm.NewDmClient(m.cli.Conn())
	return client.GetProductInfo(ctx, in)
}

func (m *defaultDm) GetDeviceInfo(ctx context.Context, in *GetDeviceInfoReq) (*GetDeviceInfoResp, error) {
	client := dm.NewDmClient(m.cli.Conn())
	return client.GetDeviceInfo(ctx, in)
}

func (m *defaultDm) GetDeviceData(ctx context.Context, in *GetDeviceDataReq) (*GetDeviceDataResp, error) {
	client := dm.NewDmClient(m.cli.Conn())
	return client.GetDeviceData(ctx, in)
}

func (m *defaultDm) GetDeviceLog(ctx context.Context, in *GetDeviceLogReq) (*GetDeviceLogResp, error) {
	client := dm.NewDmClient(m.cli.Conn())
	return client.GetDeviceLog(ctx, in)
}
