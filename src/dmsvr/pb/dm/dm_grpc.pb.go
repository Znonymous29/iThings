// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/dm.proto

package dm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DmClient is the client API for Dm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DmClient interface {
	//设备登录认证
	LoginAuth(ctx context.Context, in *LoginAuthReq, opts ...grpc.CallOption) (*Response, error)
	//设备操作认证
	AccessAuth(ctx context.Context, in *AccessAuthReq, opts ...grpc.CallOption) (*Response, error)
	//设备管理
	ManageDevice(ctx context.Context, in *ManageDeviceReq, opts ...grpc.CallOption) (*DeviceInfo, error)
	//产品管理
	ManageProduct(ctx context.Context, in *ManageProductReq, opts ...grpc.CallOption) (*ProductInfo, error)
	//获取产品信息
	GetProductInfo(ctx context.Context, in *GetProductInfoReq, opts ...grpc.CallOption) (*GetProductInfoResp, error)
	//产品模板管理
	ManageProductTemplate(ctx context.Context, in *ManageProductTemplateReq, opts ...grpc.CallOption) (*ProductTemplate, error)
	//获取产品信息
	GetProductTemplate(ctx context.Context, in *GetProductTemplateReq, opts ...grpc.CallOption) (*ProductTemplate, error)
	//获取设备信息
	GetDeviceInfo(ctx context.Context, in *GetDeviceInfoReq, opts ...grpc.CallOption) (*GetDeviceInfoResp, error)
	//获取设备调试信息记录登入登出,操作
	GetDeviceDescribeLog(ctx context.Context, in *GetDeviceDescribeLogReq, opts ...grpc.CallOption) (*GetDeviceDescribeLogResp, error)
	//获取设备数据信息
	GetDeviceData(ctx context.Context, in *GetDeviceDataReq, opts ...grpc.CallOption) (*GetDeviceDataResp, error)
	//同步调用设备行为
	SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error)
	//同步调用设备属性
	SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error)
}

type dmClient struct {
	cc grpc.ClientConnInterface
}

func NewDmClient(cc grpc.ClientConnInterface) DmClient {
	return &dmClient{cc}
}

func (c *dmClient) LoginAuth(ctx context.Context, in *LoginAuthReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dm.Dm/loginAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) AccessAuth(ctx context.Context, in *AccessAuthReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/dm.Dm/accessAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) ManageDevice(ctx context.Context, in *ManageDeviceReq, opts ...grpc.CallOption) (*DeviceInfo, error) {
	out := new(DeviceInfo)
	err := c.cc.Invoke(ctx, "/dm.Dm/manageDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) ManageProduct(ctx context.Context, in *ManageProductReq, opts ...grpc.CallOption) (*ProductInfo, error) {
	out := new(ProductInfo)
	err := c.cc.Invoke(ctx, "/dm.Dm/manageProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) GetProductInfo(ctx context.Context, in *GetProductInfoReq, opts ...grpc.CallOption) (*GetProductInfoResp, error) {
	out := new(GetProductInfoResp)
	err := c.cc.Invoke(ctx, "/dm.Dm/getProductInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) ManageProductTemplate(ctx context.Context, in *ManageProductTemplateReq, opts ...grpc.CallOption) (*ProductTemplate, error) {
	out := new(ProductTemplate)
	err := c.cc.Invoke(ctx, "/dm.Dm/manageProductTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) GetProductTemplate(ctx context.Context, in *GetProductTemplateReq, opts ...grpc.CallOption) (*ProductTemplate, error) {
	out := new(ProductTemplate)
	err := c.cc.Invoke(ctx, "/dm.Dm/getProductTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) GetDeviceInfo(ctx context.Context, in *GetDeviceInfoReq, opts ...grpc.CallOption) (*GetDeviceInfoResp, error) {
	out := new(GetDeviceInfoResp)
	err := c.cc.Invoke(ctx, "/dm.Dm/getDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) GetDeviceDescribeLog(ctx context.Context, in *GetDeviceDescribeLogReq, opts ...grpc.CallOption) (*GetDeviceDescribeLogResp, error) {
	out := new(GetDeviceDescribeLogResp)
	err := c.cc.Invoke(ctx, "/dm.Dm/getDeviceDescribeLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) GetDeviceData(ctx context.Context, in *GetDeviceDataReq, opts ...grpc.CallOption) (*GetDeviceDataResp, error) {
	out := new(GetDeviceDataResp)
	err := c.cc.Invoke(ctx, "/dm.Dm/getDeviceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	out := new(SendActionResp)
	err := c.cc.Invoke(ctx, "/dm.Dm/sendAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmClient) SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	out := new(SendPropertyResp)
	err := c.cc.Invoke(ctx, "/dm.Dm/sendProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DmServer is the server API for Dm service.
// All implementations must embed UnimplementedDmServer
// for forward compatibility
type DmServer interface {
	//设备登录认证
	LoginAuth(context.Context, *LoginAuthReq) (*Response, error)
	//设备操作认证
	AccessAuth(context.Context, *AccessAuthReq) (*Response, error)
	//设备管理
	ManageDevice(context.Context, *ManageDeviceReq) (*DeviceInfo, error)
	//产品管理
	ManageProduct(context.Context, *ManageProductReq) (*ProductInfo, error)
	//获取产品信息
	GetProductInfo(context.Context, *GetProductInfoReq) (*GetProductInfoResp, error)
	//产品模板管理
	ManageProductTemplate(context.Context, *ManageProductTemplateReq) (*ProductTemplate, error)
	//获取产品信息
	GetProductTemplate(context.Context, *GetProductTemplateReq) (*ProductTemplate, error)
	//获取设备信息
	GetDeviceInfo(context.Context, *GetDeviceInfoReq) (*GetDeviceInfoResp, error)
	//获取设备调试信息记录登入登出,操作
	GetDeviceDescribeLog(context.Context, *GetDeviceDescribeLogReq) (*GetDeviceDescribeLogResp, error)
	//获取设备数据信息
	GetDeviceData(context.Context, *GetDeviceDataReq) (*GetDeviceDataResp, error)
	//同步调用设备行为
	SendAction(context.Context, *SendActionReq) (*SendActionResp, error)
	//同步调用设备属性
	SendProperty(context.Context, *SendPropertyReq) (*SendPropertyResp, error)
	mustEmbedUnimplementedDmServer()
}

// UnimplementedDmServer must be embedded to have forward compatible implementations.
type UnimplementedDmServer struct {
}

func (UnimplementedDmServer) LoginAuth(context.Context, *LoginAuthReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAuth not implemented")
}
func (UnimplementedDmServer) AccessAuth(context.Context, *AccessAuthReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessAuth not implemented")
}
func (UnimplementedDmServer) ManageDevice(context.Context, *ManageDeviceReq) (*DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageDevice not implemented")
}
func (UnimplementedDmServer) ManageProduct(context.Context, *ManageProductReq) (*ProductInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageProduct not implemented")
}
func (UnimplementedDmServer) GetProductInfo(context.Context, *GetProductInfoReq) (*GetProductInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductInfo not implemented")
}
func (UnimplementedDmServer) ManageProductTemplate(context.Context, *ManageProductTemplateReq) (*ProductTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManageProductTemplate not implemented")
}
func (UnimplementedDmServer) GetProductTemplate(context.Context, *GetProductTemplateReq) (*ProductTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductTemplate not implemented")
}
func (UnimplementedDmServer) GetDeviceInfo(context.Context, *GetDeviceInfoReq) (*GetDeviceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedDmServer) GetDeviceDescribeLog(context.Context, *GetDeviceDescribeLogReq) (*GetDeviceDescribeLogResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDescribeLog not implemented")
}
func (UnimplementedDmServer) GetDeviceData(context.Context, *GetDeviceDataReq) (*GetDeviceDataResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceData not implemented")
}
func (UnimplementedDmServer) SendAction(context.Context, *SendActionReq) (*SendActionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAction not implemented")
}
func (UnimplementedDmServer) SendProperty(context.Context, *SendPropertyReq) (*SendPropertyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProperty not implemented")
}
func (UnimplementedDmServer) mustEmbedUnimplementedDmServer() {}

// UnsafeDmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DmServer will
// result in compilation errors.
type UnsafeDmServer interface {
	mustEmbedUnimplementedDmServer()
}

func RegisterDmServer(s grpc.ServiceRegistrar, srv DmServer) {
	s.RegisterService(&Dm_ServiceDesc, srv)
}

func _Dm_LoginAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).LoginAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/loginAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).LoginAuth(ctx, req.(*LoginAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_AccessAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).AccessAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/accessAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).AccessAuth(ctx, req.(*AccessAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_ManageDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageDeviceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).ManageDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/manageDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).ManageDevice(ctx, req.(*ManageDeviceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_ManageProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).ManageProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/manageProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).ManageProduct(ctx, req.(*ManageProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_GetProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).GetProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/getProductInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).GetProductInfo(ctx, req.(*GetProductInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_ManageProductTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManageProductTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).ManageProductTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/manageProductTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).ManageProductTemplate(ctx, req.(*ManageProductTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_GetProductTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductTemplateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).GetProductTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/getProductTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).GetProductTemplate(ctx, req.(*GetProductTemplateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/getDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).GetDeviceInfo(ctx, req.(*GetDeviceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_GetDeviceDescribeLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDescribeLogReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).GetDeviceDescribeLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/getDeviceDescribeLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).GetDeviceDescribeLog(ctx, req.(*GetDeviceDescribeLogReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_GetDeviceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceDataReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).GetDeviceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/getDeviceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).GetDeviceData(ctx, req.(*GetDeviceDataReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_SendAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).SendAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/sendAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).SendAction(ctx, req.(*SendActionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dm_SendProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendPropertyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmServer).SendProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dm.Dm/sendProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmServer).SendProperty(ctx, req.(*SendPropertyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dm_ServiceDesc is the grpc.ServiceDesc for Dm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.Dm",
	HandlerType: (*DmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "loginAuth",
			Handler:    _Dm_LoginAuth_Handler,
		},
		{
			MethodName: "accessAuth",
			Handler:    _Dm_AccessAuth_Handler,
		},
		{
			MethodName: "manageDevice",
			Handler:    _Dm_ManageDevice_Handler,
		},
		{
			MethodName: "manageProduct",
			Handler:    _Dm_ManageProduct_Handler,
		},
		{
			MethodName: "getProductInfo",
			Handler:    _Dm_GetProductInfo_Handler,
		},
		{
			MethodName: "manageProductTemplate",
			Handler:    _Dm_ManageProductTemplate_Handler,
		},
		{
			MethodName: "getProductTemplate",
			Handler:    _Dm_GetProductTemplate_Handler,
		},
		{
			MethodName: "getDeviceInfo",
			Handler:    _Dm_GetDeviceInfo_Handler,
		},
		{
			MethodName: "getDeviceDescribeLog",
			Handler:    _Dm_GetDeviceDescribeLog_Handler,
		},
		{
			MethodName: "getDeviceData",
			Handler:    _Dm_GetDeviceData_Handler,
		},
		{
			MethodName: "sendAction",
			Handler:    _Dm_SendAction_Handler,
		},
		{
			MethodName: "sendProperty",
			Handler:    _Dm_SendProperty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}
