// Code generated by goctl. DO NOT EDIT!
// Source: dm.proto

package client

import (
	"context"

	"github.com/i-Things/things/src/dmsvr/internal/svc"
	"github.com/i-Things/things/src/dmsvr/pb/dm"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AccessAuthReq            = dm.AccessAuthReq
	DataHubLogIndex          = dm.DataHubLogIndex
	DataHubLogIndexReq       = dm.DataHubLogIndexReq
	DataHubLogIndexResp      = dm.DataHubLogIndexResp
	DataSchemaIndex          = dm.DataSchemaIndex
	DataSchemaIndexResp      = dm.DataSchemaIndexResp
	DataSchemaLatestIndexReq = dm.DataSchemaLatestIndexReq
	DataSchemaLogIndexReq    = dm.DataSchemaLogIndexReq
	DataSdkLogIndex          = dm.DataSdkLogIndex
	DataSdkLogIndexReq       = dm.DataSdkLogIndexReq
	DataSdkLogIndexResp      = dm.DataSdkLogIndexResp
	DeviceInfo               = dm.DeviceInfo
	DeviceInfoDeleteReq      = dm.DeviceInfoDeleteReq
	DeviceInfoIndexReq       = dm.DeviceInfoIndexReq
	DeviceInfoIndexResp      = dm.DeviceInfoIndexResp
	DeviceInfoReadReq        = dm.DeviceInfoReadReq
	LoginAuthReq             = dm.LoginAuthReq
	PageInfo                 = dm.PageInfo
	ProductInfo              = dm.ProductInfo
	ProductInfoDeleteReq     = dm.ProductInfoDeleteReq
	ProductInfoIndexReq      = dm.ProductInfoIndexReq
	ProductInfoIndexResp     = dm.ProductInfoIndexResp
	ProductInfoReadReq       = dm.ProductInfoReadReq
	ProductSchema            = dm.ProductSchema
	ProductSchemaReadReq     = dm.ProductSchemaReadReq
	ProductSchemaUpdateReq   = dm.ProductSchemaUpdateReq
	Response                 = dm.Response
	RootCheckReq             = dm.RootCheckReq
	SendActionReq            = dm.SendActionReq
	SendActionResp           = dm.SendActionResp
	SendPropertyReq          = dm.SendPropertyReq
	SendPropertyResp         = dm.SendPropertyResp

	DeviceInteract interface {
		// 同步调用设备行为
		SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error)
		// 同步调用设备属性
		SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error)
	}

	defaultDeviceInteract struct {
		cli zrpc.Client
	}

	directDeviceInteract struct {
		svcCtx *svc.ServiceContext
		svr    dm.DeviceInteractServer
	}
)

func NewDeviceInteract(cli zrpc.Client) DeviceInteract {
	return &defaultDeviceInteract{
		cli: cli,
	}
}

func NewDirectDeviceInteract(svcCtx *svc.ServiceContext, svr dm.DeviceInteractServer) DeviceInteract {
	return &directDeviceInteract{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 同步调用设备行为
func (m *defaultDeviceInteract) SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	client := dm.NewDeviceInteractClient(m.cli.Conn())
	return client.SendAction(ctx, in, opts...)
}

// 同步调用设备行为
func (d *directDeviceInteract) SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	return d.svr.SendAction(ctx, in)
}

// 同步调用设备属性
func (m *defaultDeviceInteract) SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	client := dm.NewDeviceInteractClient(m.cli.Conn())
	return client.SendProperty(ctx, in, opts...)
}

// 同步调用设备属性
func (d *directDeviceInteract) SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	return d.svr.SendProperty(ctx, in)
}
