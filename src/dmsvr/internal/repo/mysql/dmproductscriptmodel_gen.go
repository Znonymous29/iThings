// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dmProductScriptFieldNames          = builder.RawFieldNames(&DmProductScript{})
	dmProductScriptRows                = strings.Join(dmProductScriptFieldNames, ",")
	dmProductScriptRowsExpectAutoSet   = strings.Join(stringx.Remove(dmProductScriptFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), ",")
	dmProductScriptRowsWithPlaceHolder = strings.Join(stringx.Remove(dmProductScriptFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), "=?,") + "=?"
)

type (
	dmProductScriptModel interface {
		Insert(ctx context.Context, data *DmProductScript) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DmProductScript, error)
		FindOneByProductID(ctx context.Context, productID string) (*DmProductScript, error)
		Update(ctx context.Context, data *DmProductScript) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDmProductScriptModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DmProductScript struct {
		Id          int64        `db:"id"`
		ProductID   string       `db:"productID"` // 产品id
		Script      string       `db:"script"`    // 脚本
		Lang        int64        `db:"lang"`      // 脚本语言类型 1:JavaScript 2:lua 3:python
		CreatedTime time.Time    `db:"createdTime"`
		UpdatedTime time.Time    `db:"updatedTime"`
		DeletedTime sql.NullTime `db:"deletedTime"`
	}
)

func newDmProductScriptModel(conn sqlx.SqlConn) *defaultDmProductScriptModel {
	return &defaultDmProductScriptModel{
		conn:  conn,
		table: "`dm_product_script`",
	}
}

func (m *defaultDmProductScriptModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDmProductScriptModel) FindOne(ctx context.Context, id int64) (*DmProductScript, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dmProductScriptRows, m.table)
	var resp DmProductScript
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDmProductScriptModel) FindOneByProductID(ctx context.Context, productID string) (*DmProductScript, error) {
	var resp DmProductScript
	query := fmt.Sprintf("select %s from %s where `productID` = ? limit 1", dmProductScriptRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, productID)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDmProductScriptModel) Insert(ctx context.Context, data *DmProductScript) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, dmProductScriptRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductID, data.Script, data.Lang)
	return ret, err
}

func (m *defaultDmProductScriptModel) Update(ctx context.Context, newData *DmProductScript) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dmProductScriptRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ProductID, newData.Script, newData.Lang, newData.Id)
	return err
}

func (m *defaultDmProductScriptModel) tableName() string {
	return m.table
}
