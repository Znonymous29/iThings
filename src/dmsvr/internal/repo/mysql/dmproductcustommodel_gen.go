// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dmProductCustomFieldNames          = builder.RawFieldNames(&DmProductCustom{})
	dmProductCustomRows                = strings.Join(dmProductCustomFieldNames, ",")
	dmProductCustomRowsExpectAutoSet   = strings.Join(stringx.Remove(dmProductCustomFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), ",")
	dmProductCustomRowsWithPlaceHolder = strings.Join(stringx.Remove(dmProductCustomFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), "=?,") + "=?"
)

type (
	dmProductCustomModel interface {
		Insert(ctx context.Context, data *DmProductCustom) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DmProductCustom, error)
		FindOneByProductID(ctx context.Context, productID string) (*DmProductCustom, error)
		Update(ctx context.Context, data *DmProductCustom) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDmProductCustomModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DmProductCustom struct {
		Id              int64          `db:"id"`
		ProductID       string         `db:"productID"`       // 产品id
		ScriptLang      int64          `db:"scriptLang"`      // 脚本语言类型 1:JavaScript 2:lua 3:python
		CustomTopic     sql.NullString `db:"customTopic"`     // 自定义topic数组
		TransformScript sql.NullString `db:"transformScript"` // 协议转换脚本
		LoginAuthScript sql.NullString `db:"loginAuthScript"` // 登录认证脚本
		CreatedTime     time.Time      `db:"createdTime"`
		UpdatedTime     time.Time      `db:"updatedTime"`
		DeletedTime     sql.NullTime   `db:"deletedTime"`
	}
)

func newDmProductCustomModel(conn sqlx.SqlConn) *defaultDmProductCustomModel {
	return &defaultDmProductCustomModel{
		conn:  conn,
		table: "`dm_product_custom`",
	}
}

func (m *defaultDmProductCustomModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDmProductCustomModel) FindOne(ctx context.Context, id int64) (*DmProductCustom, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dmProductCustomRows, m.table)
	var resp DmProductCustom
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDmProductCustomModel) FindOneByProductID(ctx context.Context, productID string) (*DmProductCustom, error) {
	var resp DmProductCustom
	query := fmt.Sprintf("select %s from %s where `productID` = ? limit 1", dmProductCustomRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, productID)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDmProductCustomModel) Insert(ctx context.Context, data *DmProductCustom) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, dmProductCustomRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProductID, data.ScriptLang, data.CustomTopic, data.TransformScript, data.LoginAuthScript)
	return ret, err
}

func (m *defaultDmProductCustomModel) Update(ctx context.Context, newData *DmProductCustom) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dmProductCustomRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ProductID, newData.ScriptLang, newData.CustomTopic, newData.TransformScript, newData.LoginAuthScript, newData.Id)
	return err
}

func (m *defaultDmProductCustomModel) tableName() string {
	return m.table
}
