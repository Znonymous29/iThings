// Code generated by goctl. DO NOT EDIT!

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productFirmwareFieldNames          = builder.RawFieldNames(&ProductFirmware{})
	productFirmwareRows                = strings.Join(productFirmwareFieldNames, ",")
	productFirmwareRowsExpectAutoSet   = strings.Join(stringx.Remove(productFirmwareFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	productFirmwareRowsWithPlaceHolder = strings.Join(stringx.Remove(productFirmwareFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"

	cacheThingsDmProductFirmwareIdPrefix          = "cache:thingsDm:productFirmware:id:"
	cacheThingsDmProductFirmwareProductIDIdPrefix = "cache:thingsDm:productFirmware:productID:id:"
)

type (
	productFirmwareModel interface {
		Insert(ctx context.Context, data *ProductFirmware) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductFirmware, error)
		FindOneByProductIDId(ctx context.Context, productID string, id int64) (*ProductFirmware, error)
		Update(ctx context.Context, data *ProductFirmware) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductFirmwareModel struct {
		sqlc.CachedConn
		table string
	}

	ProductFirmware struct {
		Id          int64        `db:"id"`
		ProductID   string       `db:"productID"` // 产品id
		CreatedTime time.Time    `db:"createdTime"`
		UpdatedTime sql.NullTime `db:"updatedTime"`
		DeletedTime sql.NullTime `db:"deletedTime"`
		Name        string       `db:"name"`        // 固件名称
		Version     string       `db:"version"`     // 固件版本
		Description string       `db:"description"` // 描述
		Size        int64        `db:"size"`        // 固件大小
		Dir         string       `db:"dir"`         // 固件标识,拿来下载文件
	}
)

func newProductFirmwareModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProductFirmwareModel {
	return &defaultProductFirmwareModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`product_firmware`",
	}
}

func (m *defaultProductFirmwareModel) Insert(ctx context.Context, data *ProductFirmware) (sql.Result, error) {
	thingsDmProductFirmwareIdKey := fmt.Sprintf("%s%v", cacheThingsDmProductFirmwareIdPrefix, data.Id)
	thingsDmProductFirmwareProductIDIdKey := fmt.Sprintf("%s%v:%v", cacheThingsDmProductFirmwareProductIDIdPrefix, data.ProductID, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productFirmwareRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductID, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Name, data.Version, data.Description, data.Size, data.Dir)
	}, thingsDmProductFirmwareIdKey, thingsDmProductFirmwareProductIDIdKey)
	return ret, err
}

func (m *defaultProductFirmwareModel) FindOne(ctx context.Context, id int64) (*ProductFirmware, error) {
	thingsDmProductFirmwareIdKey := fmt.Sprintf("%s%v", cacheThingsDmProductFirmwareIdPrefix, id)
	var resp ProductFirmware
	err := m.QueryRowCtx(ctx, &resp, thingsDmProductFirmwareIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productFirmwareRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductFirmwareModel) FindOneByProductIDId(ctx context.Context, productID string, id int64) (*ProductFirmware, error) {
	thingsDmProductFirmwareProductIDIdKey := fmt.Sprintf("%s%v:%v", cacheThingsDmProductFirmwareProductIDIdPrefix, productID, id)
	var resp ProductFirmware
	err := m.QueryRowIndexCtx(ctx, &resp, thingsDmProductFirmwareProductIDIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `productID` = ? and `id` = ? limit 1", productFirmwareRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, productID, id); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductFirmwareModel) Update(ctx context.Context, data *ProductFirmware) error {
	thingsDmProductFirmwareIdKey := fmt.Sprintf("%s%v", cacheThingsDmProductFirmwareIdPrefix, data.Id)
	thingsDmProductFirmwareProductIDIdKey := fmt.Sprintf("%s%v:%v", cacheThingsDmProductFirmwareProductIDIdPrefix, data.ProductID, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productFirmwareRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProductID, data.CreatedTime, data.UpdatedTime, data.DeletedTime, data.Name, data.Version, data.Description, data.Size, data.Dir, data.Id)
	}, thingsDmProductFirmwareIdKey, thingsDmProductFirmwareProductIDIdKey)
	return err
}

func (m *defaultProductFirmwareModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	thingsDmProductFirmwareIdKey := fmt.Sprintf("%s%v", cacheThingsDmProductFirmwareIdPrefix, id)
	thingsDmProductFirmwareProductIDIdKey := fmt.Sprintf("%s%v:%v", cacheThingsDmProductFirmwareProductIDIdPrefix, data.ProductID, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, thingsDmProductFirmwareIdKey, thingsDmProductFirmwareProductIDIdKey)
	return err
}

func (m *defaultProductFirmwareModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheThingsDmProductFirmwareIdPrefix, primary)
}

func (m *defaultProductFirmwareModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productFirmwareRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductFirmwareModel) tableName() string {
	return m.table
}
