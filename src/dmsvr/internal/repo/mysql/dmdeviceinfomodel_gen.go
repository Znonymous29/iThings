// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	dmDeviceInfoFieldNames          = builder.RawFieldNames(&DmDeviceInfo{})
	dmDeviceInfoRows                = strings.Join(dmDeviceInfoFieldNames, ",")
	dmDeviceInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(dmDeviceInfoFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), ",")
	dmDeviceInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(dmDeviceInfoFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), "=?,") + "=?"
)

type (
	dmDeviceInfoModel interface {
		Insert(ctx context.Context, data *DmDeviceInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DmDeviceInfo, error)
		FindOneByIccid(ctx context.Context, iccid sql.NullString) (*DmDeviceInfo, error)
		FindOneByPhone(ctx context.Context, phone sql.NullString) (*DmDeviceInfo, error)
		FindOneByProductIDDeviceName(ctx context.Context, productID string, deviceName string) (*DmDeviceInfo, error)
		Update(ctx context.Context, data *DmDeviceInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDmDeviceInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DmDeviceInfo struct {
		Id             int64          `db:"id"`
		ProjectID      int64          `db:"projectID"`      // 项目ID(雪花ID)
		AreaID         int64          `db:"areaID"`         // 项目区域ID(雪花ID)
		ProductID      string         `db:"productID"`      // 产品id
		DeviceName     string         `db:"deviceName"`     // 设备名称
		DeviceAlias    string         `db:"deviceAlias"`    // 设备别名
		Secret         string         `db:"secret"`         // 设备秘钥
		Cert           string         `db:"cert"`           // 设备证书
		Position       string         `db:"position"`       // 设备的位置(默认百度坐标系BD09)
		Imei           string         `db:"imei"`           // IMEI号信息
		Mac            string         `db:"mac"`            // MAC号信息
		Version        string         `db:"version"`        // 固件版本
		HardInfo       string         `db:"hardInfo"`       // 模组硬件型号
		SoftInfo       string         `db:"softInfo"`       // 模组软件版本
		MobileOperator int64          `db:"mobileOperator"` // 移动运营商:1)移动 2)联通 3)电信 4)广电
		Phone          sql.NullString `db:"phone"`          // 手机号
		Iccid          sql.NullString `db:"iccid"`          // SIM卡卡号
		Address        string         `db:"address"`        // 所在地址
		Tags           string         `db:"tags"`           // 设备标签
		UserID         int64          `db:"userID"`         // 所属用户id
		IsOnline       int64          `db:"isOnline"`       // 是否在线,1是2否
		FirstLogin     sql.NullTime   `db:"firstLogin"`     // 激活时间
		LastLogin      sql.NullTime   `db:"lastLogin"`      // 最后上线时间
		LogLevel       int64          `db:"logLevel"`       // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试
		CreatedTime    time.Time      `db:"createdTime"`
		UpdatedTime    time.Time      `db:"updatedTime"`
		DeletedTime    sql.NullTime   `db:"deletedTime"`
	}
)

func newDmDeviceInfoModel(conn sqlx.SqlConn) *defaultDmDeviceInfoModel {
	return &defaultDmDeviceInfoModel{
		conn:  conn,
		table: "`dm_device_info`",
	}
}

func (m *defaultDmDeviceInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDmDeviceInfoModel) FindOne(ctx context.Context, id int64) (*DmDeviceInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", dmDeviceInfoRows, m.table)
	var resp DmDeviceInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDmDeviceInfoModel) FindOneByIccid(ctx context.Context, iccid sql.NullString) (*DmDeviceInfo, error) {
	var resp DmDeviceInfo
	query := fmt.Sprintf("select %s from %s where `iccid` = ? limit 1", dmDeviceInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, iccid)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDmDeviceInfoModel) FindOneByPhone(ctx context.Context, phone sql.NullString) (*DmDeviceInfo, error) {
	var resp DmDeviceInfo
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", dmDeviceInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDmDeviceInfoModel) FindOneByProductIDDeviceName(ctx context.Context, productID string, deviceName string) (*DmDeviceInfo, error) {
	var resp DmDeviceInfo
	query := fmt.Sprintf("select %s from %s where `productID` = ? and `deviceName` = ? limit 1", dmDeviceInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, productID, deviceName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDmDeviceInfoModel) Insert(ctx context.Context, data *DmDeviceInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, dmDeviceInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ProjectID, data.AreaID, data.ProductID, data.DeviceName, data.DeviceAlias, data.Secret, data.Cert, data.Position, data.Imei, data.Mac, data.Version, data.HardInfo, data.SoftInfo, data.MobileOperator, data.Phone, data.Iccid, data.Address, data.Tags, data.UserID, data.IsOnline, data.FirstLogin, data.LastLogin, data.LogLevel)
	return ret, err
}

func (m *defaultDmDeviceInfoModel) Update(ctx context.Context, newData *DmDeviceInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, dmDeviceInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.ProjectID, newData.AreaID, newData.ProductID, newData.DeviceName, newData.DeviceAlias, newData.Secret, newData.Cert, newData.Position, newData.Imei, newData.Mac, newData.Version, newData.HardInfo, newData.SoftInfo, newData.MobileOperator, newData.Phone, newData.Iccid, newData.Address, newData.Tags, newData.UserID, newData.IsOnline, newData.FirstLogin, newData.LastLogin, newData.LogLevel, newData.Id)
	return err
}

func (m *defaultDmDeviceInfoModel) tableName() string {
	return m.table
}
