// Code generated by goctl. DO NOT EDIT!
// Source: dm.proto

package server

import (
	"context"

	"github.com/i-Things/things/src/dmsvr/internal/logic"
	"github.com/i-Things/things/src/dmsvr/internal/svc"
	"github.com/i-Things/things/src/dmsvr/pb/dm"
)

type DmServer struct {
	svcCtx *svc.ServiceContext
	dm.UnimplementedDmServer
}

func NewDmServer(svcCtx *svc.ServiceContext) *DmServer {
	return &DmServer{
		svcCtx: svcCtx,
	}
}

// 新增设备
func (s *DmServer) DeviceInfoCreate(ctx context.Context, in *dm.DeviceInfo) (*dm.Response, error) {
	l := logic.NewDeviceInfoCreateLogic(ctx, s.svcCtx)
	return l.DeviceInfoCreate(in)
}

// 更新设备
func (s *DmServer) DeviceInfoUpdate(ctx context.Context, in *dm.DeviceInfo) (*dm.Response, error) {
	l := logic.NewDeviceInfoUpdateLogic(ctx, s.svcCtx)
	return l.DeviceInfoUpdate(in)
}

// 删除设备
func (s *DmServer) DeviceInfoDelete(ctx context.Context, in *dm.DeviceInfoDeleteReq) (*dm.Response, error) {
	l := logic.NewDeviceInfoDeleteLogic(ctx, s.svcCtx)
	return l.DeviceInfoDelete(in)
}

// 获取设备信息列表
func (s *DmServer) DeviceInfoIndex(ctx context.Context, in *dm.DeviceInfoIndexReq) (*dm.DeviceInfoIndexResp, error) {
	l := logic.NewDeviceInfoIndexLogic(ctx, s.svcCtx)
	return l.DeviceInfoIndex(in)
}

// 获取设备信息详情
func (s *DmServer) DeviceInfoRead(ctx context.Context, in *dm.DeviceInfoReadReq) (*dm.DeviceInfo, error) {
	l := logic.NewDeviceInfoReadLogic(ctx, s.svcCtx)
	return l.DeviceInfoRead(in)
}

// 新增设备
func (s *DmServer) ProductInfoCreate(ctx context.Context, in *dm.ProductInfo) (*dm.Response, error) {
	l := logic.NewProductInfoCreateLogic(ctx, s.svcCtx)
	return l.ProductInfoCreate(in)
}

// 更新设备
func (s *DmServer) ProductInfoUpdate(ctx context.Context, in *dm.ProductInfo) (*dm.Response, error) {
	l := logic.NewProductInfoUpdateLogic(ctx, s.svcCtx)
	return l.ProductInfoUpdate(in)
}

// 删除设备
func (s *DmServer) ProductInfoDelete(ctx context.Context, in *dm.ProductInfoDeleteReq) (*dm.Response, error) {
	l := logic.NewProductInfoDeleteLogic(ctx, s.svcCtx)
	return l.ProductInfoDelete(in)
}

// 获取设备信息列表
func (s *DmServer) ProductInfoIndex(ctx context.Context, in *dm.ProductInfoIndexReq) (*dm.ProductInfoIndexResp, error) {
	l := logic.NewProductInfoIndexLogic(ctx, s.svcCtx)
	return l.ProductInfoIndex(in)
}

// 获取设备信息详情
func (s *DmServer) ProductInfoRead(ctx context.Context, in *dm.ProductInfoReadReq) (*dm.ProductInfo, error) {
	l := logic.NewProductInfoReadLogic(ctx, s.svcCtx)
	return l.ProductInfoRead(in)
}

// 更新产品物模型
func (s *DmServer) ProductSchemaUpdate(ctx context.Context, in *dm.ProductSchemaUpdateReq) (*dm.Response, error) {
	l := logic.NewProductSchemaUpdateLogic(ctx, s.svcCtx)
	return l.ProductSchemaUpdate(in)
}

// 获取产品物模型
func (s *DmServer) ProductSchemaRead(ctx context.Context, in *dm.ProductSchemaReadReq) (*dm.ProductSchema, error) {
	l := logic.NewProductSchemaReadLogic(ctx, s.svcCtx)
	return l.ProductSchemaRead(in)
}

// 管理产品的固件
func (s *DmServer) ManageFirmware(ctx context.Context, in *dm.ManageFirmwareReq) (*dm.Response, error) {
	l := logic.NewManageFirmwareLogic(ctx, s.svcCtx)
	return l.ManageFirmware(in)
}

// 获取产品固件信息
func (s *DmServer) GetFirmwareInfo(ctx context.Context, in *dm.GetFirmwareInfoReq) (*dm.GetFirmwareInfoResp, error) {
	l := logic.NewGetFirmwareInfoLogic(ctx, s.svcCtx)
	return l.GetFirmwareInfo(in)
}

// 设备登录认证
func (s *DmServer) LoginAuth(ctx context.Context, in *dm.LoginAuthReq) (*dm.Response, error) {
	l := logic.NewLoginAuthLogic(ctx, s.svcCtx)
	return l.LoginAuth(in)
}

// 设备操作认证
func (s *DmServer) AccessAuth(ctx context.Context, in *dm.AccessAuthReq) (*dm.Response, error) {
	l := logic.NewAccessAuthLogic(ctx, s.svcCtx)
	return l.AccessAuth(in)
}

// 鉴定是否是root账号
func (s *DmServer) RootCheck(ctx context.Context, in *dm.RootCheckReq) (*dm.Response, error) {
	l := logic.NewRootCheckLogic(ctx, s.svcCtx)
	return l.RootCheck(in)
}

// 同步调用设备行为
func (s *DmServer) SendAction(ctx context.Context, in *dm.SendActionReq) (*dm.SendActionResp, error) {
	l := logic.NewSendActionLogic(ctx, s.svcCtx)
	return l.SendAction(in)
}

// 同步调用设备属性
func (s *DmServer) SendProperty(ctx context.Context, in *dm.SendPropertyReq) (*dm.SendPropertyResp, error) {
	l := logic.NewSendPropertyLogic(ctx, s.svcCtx)
	return l.SendProperty(in)
}

// 获取设备sdk调试日志
func (s *DmServer) DataSdkLogIndex(ctx context.Context, in *dm.DataSdkLogIndexReq) (*dm.DataSdkLogIndexResp, error) {
	l := logic.NewDataSdkLogIndexLogic(ctx, s.svcCtx)
	return l.DataSdkLogIndex(in)
}

// 获取设备调试信息记录登入登出,操作
func (s *DmServer) DataHubLogIndex(ctx context.Context, in *dm.DataHubLogIndexReq) (*dm.DataHubLogIndexResp, error) {
	l := logic.NewDataHubLogIndexLogic(ctx, s.svcCtx)
	return l.DataHubLogIndex(in)
}

// 获取设备数据信息
func (s *DmServer) DataSchemaLatestIndex(ctx context.Context, in *dm.DataSchemaLatestIndexReq) (*dm.DataSchemaIndexResp, error) {
	l := logic.NewDataSchemaLatestIndexLogic(ctx, s.svcCtx)
	return l.DataSchemaLatestIndex(in)
}

// 获取设备数据信息
func (s *DmServer) DataSchemaLogIndex(ctx context.Context, in *dm.DataSchemaLogIndexReq) (*dm.DataSchemaIndexResp, error) {
	l := logic.NewDataSchemaLogIndexLogic(ctx, s.svcCtx)
	return l.DataSchemaLogIndex(in)
}
