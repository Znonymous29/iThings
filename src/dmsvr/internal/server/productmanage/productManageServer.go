// Code generated by goctl. DO NOT EDIT!
// Source: dm.proto

package server

import (
	"context"

	"github.com/i-Things/things/src/dmsvr/internal/logic/productmanage"
	"github.com/i-Things/things/src/dmsvr/internal/svc"
	"github.com/i-Things/things/src/dmsvr/pb/dm"
)

type ProductManageServer struct {
	svcCtx *svc.ServiceContext
	dm.UnimplementedProductManageServer
}

func NewProductManageServer(svcCtx *svc.ServiceContext) *ProductManageServer {
	return &ProductManageServer{
		svcCtx: svcCtx,
	}
}

// 新增设备
func (s *ProductManageServer) ProductInfoCreate(ctx context.Context, in *dm.ProductInfo) (*dm.Response, error) {
	l := productmanagelogic.NewProductInfoCreateLogic(ctx, s.svcCtx)
	return l.ProductInfoCreate(in)
}

// 更新设备
func (s *ProductManageServer) ProductInfoUpdate(ctx context.Context, in *dm.ProductInfo) (*dm.Response, error) {
	l := productmanagelogic.NewProductInfoUpdateLogic(ctx, s.svcCtx)
	return l.ProductInfoUpdate(in)
}

// 删除设备
func (s *ProductManageServer) ProductInfoDelete(ctx context.Context, in *dm.ProductInfoDeleteReq) (*dm.Response, error) {
	l := productmanagelogic.NewProductInfoDeleteLogic(ctx, s.svcCtx)
	return l.ProductInfoDelete(in)
}

// 获取设备信息列表
func (s *ProductManageServer) ProductInfoIndex(ctx context.Context, in *dm.ProductInfoIndexReq) (*dm.ProductInfoIndexResp, error) {
	l := productmanagelogic.NewProductInfoIndexLogic(ctx, s.svcCtx)
	return l.ProductInfoIndex(in)
}

// 获取设备信息详情
func (s *ProductManageServer) ProductInfoRead(ctx context.Context, in *dm.ProductInfoReadReq) (*dm.ProductInfo, error) {
	l := productmanagelogic.NewProductInfoReadLogic(ctx, s.svcCtx)
	return l.ProductInfoRead(in)
}

// 更新产品物模型
func (s *ProductManageServer) ProductSchemaUpdate(ctx context.Context, in *dm.ProductSchemaUpdateReq) (*dm.Response, error) {
	l := productmanagelogic.NewProductSchemaUpdateLogic(ctx, s.svcCtx)
	return l.ProductSchemaUpdate(in)
}

// 获取产品物模型
func (s *ProductManageServer) ProductSchemaRead(ctx context.Context, in *dm.ProductSchemaReadReq) (*dm.ProductSchema, error) {
	l := productmanagelogic.NewProductSchemaReadLogic(ctx, s.svcCtx)
	return l.ProductSchemaRead(in)
}
