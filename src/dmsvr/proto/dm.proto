syntax = "proto3";
option go_package = "pb/dm";
import "google/protobuf/wrappers.proto";
package dm;



//权限认证(提供给mqtt broker)
service DeviceAuth{
  //设备登录认证
  rpc loginAuth(LoginAuthReq)           returns (Response);
  //设备操作认证
  rpc accessAuth(AccessAuthReq)         returns (Response);
  //鉴定是否是root账号
  rpc rootCheck(RootCheckReq)           returns (Response);
}

//产品管理
service ProductManage{
  //新增设备
  rpc ProductInfoCreate(ProductInfo)     returns (Response);
  //更新设备
  rpc ProductInfoUpdate(ProductInfo)     returns (Response);
  //删除设备
  rpc ProductInfoDelete(ProductInfoDeleteReq)     returns (Response);
  //获取设备信息列表
  rpc ProductInfoIndex(ProductInfoIndexReq)     returns (ProductInfoIndexResp);
  //获取设备信息详情
  rpc ProductInfoRead(ProductInfoReadReq)     returns (ProductInfo);
  //更新产品物模型
  rpc ProductSchemaUpdate(ProductSchemaUpdateReq)returns (Response);
  //获取产品物模型
  rpc ProductSchemaRead(ProductSchemaReadReq)returns(ProductSchema);
}

//设备管理
service DeviceManage {
  //新增设备
  rpc DeviceInfoCreate(DeviceInfo)     returns (Response);
  //更新设备
  rpc DeviceInfoUpdate(DeviceInfo)     returns (Response);
  //删除设备
  rpc DeviceInfoDelete(DeviceInfoDeleteReq)     returns (Response);
  //获取设备信息列表
  rpc DeviceInfoIndex(DeviceInfoIndexReq)     returns (DeviceInfoIndexResp);
  //获取设备信息详情
  rpc DeviceInfoRead(DeviceInfoReadReq)     returns (DeviceInfo);
}

message Response {
}
message PageInfo{
  int64 page = 1;
  int64 size = 2;
}


message DeviceInfo{
  string   productID = 1; //产品id 只读
  string  deviceName = 3; //设备名称 读写
  int64   createdTime = 4; //创建时间 只读
  string  secret = 5; //设备秘钥 只读
  int64   firstLogin = 6; //激活时间 只读
  int64   lastLogin = 7; //最后上线时间 只读
  google.protobuf.StringValue  version = 8; // 固件版本  读写
  int64  logLevel = 9; // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
  string  cert = 10;// 设备证书  只读
  int32   isOnline = 11; //在线状态  1离线 2在线 只读
  map<string, string> tags = 12;//设备标签
}

message ProductInfo{
  int64   createdTime = 1; //创建时间 只读
  string   productID = 2; //产品id 只读
  string  productName = 3; //产品名称
  int64   authMode = 4;//认证方式:1:账密认证,2:秘钥认证
  int64   deviceType = 5;//设备类型:1:设备,2:网关,3:子设备
  int64   categoryID = 6;//产品品类
  int64   netType = 7;//通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
  int64   dataProto = 8;//数据协议:1:自定义,2:数据模板
  int64   autoRegister = 9;//动态注册:1:关闭,2:打开,3:打开并自动创建设备
  string   secret = 10;//动态注册产品秘钥 只读
  google.protobuf.StringValue   description = 11;//描述
  google.protobuf.StringValue   devStatus = 12; // 产品状态
}

message ProductInfoDeleteReq{
  string   productID = 1; //产品id
}

message ProductInfoReadReq{
  string   productID = 1; //产品id
}

message ProductSchema{
  int64   createdTime = 1; //创建时间 只读
  string   productID = 2; //产品id 只读
  string schema = 3;//数据模板
}

message ProductSchemaUpdateReq{
  ProductSchema info = 1;//产品信息
}

message ProductSchemaReadReq{
  string productID = 1; //产品id  如果为空返回所有产品的信息
}

message DeviceInfoDeleteReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceInfoReadReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceInfoIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  string  productID = 2; //过滤条件: 产品id
  string deviceName = 3;//过滤条件:模糊查询 设备名
  map<string, string> tags = 4;//key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
}

message DeviceInfoIndexResp{
  repeated DeviceInfo list = 1;//设备信息
  int64  total = 2;//总数(只有分页的时候会返回)
}

message ProductInfoIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  int64  deviceType = 2; //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
  string  productName = 3; //过滤条件: 产品名称
  repeated string   productIDs = 4; //过滤产品id列表
}

message ProductInfoIndexResp{
  repeated ProductInfo list = 1;//产品信息
  int64  total = 2;//总数(只有分页的时候会返回)
}


/*
上面是设备管理模块的消息
*/




/*
下面是设备管理模块的消息
*/
message LoginAuthReq {
  string username = 1;//用户名
  string password = 2;//密码
  string clientID = 3;//clientID
  string ip = 4;//访问的ip地址
  bytes certificate = 5;//客户端证书
}

message AccessAuthReq {
  string username = 1; //用户名
  string topic = 2;//主题
  string clientID = 3;//clientID
  string access = 4;//操作
  string ip = 5; //访问的ip地址
}

message RootCheckReq{
  string username = 1;//用户名
  string password = 2;//密码
  string clientID = 3;//clientID
  string ip = 4;//访问的ip地址
  bytes certificate = 5;//客户端证书
}
