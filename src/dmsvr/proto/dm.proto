syntax = "proto3";
option go_package = "pb/dm";
import "google/protobuf/wrappers.proto";
package dm;

service Dm {

  /*
  设备管理
  */
  //新增设备
  rpc DeviceInfoCreate(DeviceInfo)     returns (Response);
  //更新设备
  rpc DeviceInfoUpdate(DeviceInfo)     returns (Response);
  //删除设备
  rpc DeviceInfoDelete(DeviceInfoDeleteReq)     returns (Response);
  //获取设备信息列表
  rpc DeviceInfoIndex(DeviceInfoIndexReq)     returns (DeviceInfoIndexResp);
  //获取设备信息详情
  rpc DeviceInfoRead(DeviceInfoReadReq)     returns (DeviceInfo);
  /*
   设备管理
   */
  /*
 产品管理
 */
  //新增设备
  rpc ProductInfoCreate(ProductInfo)     returns (Response);
  //更新设备
  rpc ProductInfoUpdate(ProductInfo)     returns (Response);
  //删除设备
  rpc ProductInfoDelete(ProductInfoDeleteReq)     returns (Response);
  //获取设备信息列表
  rpc ProductInfoIndex(ProductInfoIndexReq)     returns (ProductInfoIndexResp);
  //获取设备信息详情
  rpc ProductInfoRead(ProductInfoReadReq)     returns (ProductInfo);
  //更新产品物模型
  rpc ProductSchemaUpdate(ProductSchemaUpdateReq)returns (Response);
  //获取产品物模型
  rpc ProductSchemaRead(ProductSchemaReadReq)returns(ProductSchema);

  //管理产品的固件
  rpc manageFirmware(ManageFirmwareReq)   returns (Response);
  //获取产品固件信息
  rpc GetFirmwareInfo(GetFirmwareInfoReq) returns (GetFirmwareInfoResp);
  /*
 产品管理
 */
  /*
  权限认证
  */
  //设备登录认证
  rpc loginAuth(LoginAuthReq)           returns (Response);
  //设备操作认证
  rpc accessAuth(AccessAuthReq)         returns (Response);
  //鉴定是否是root账号
  rpc rootCheck(RootCheckReq)           returns (Response);
  /*
    权限认证
    */

  /*
   数据交互
   */


  //同步调用设备行为
  rpc sendAction(SendActionReq)         returns(SendActionResp);
  //同步调用设备属性
  rpc sendProperty(SendPropertyReq)     returns(SendPropertyResp);

  //获取设备sdk调试日志
  rpc dataSdkLogIndex(DataSdkLogIndexReq) returns (DataSdkLogIndexResp);
  //获取设备调试信息记录登入登出,操作
  rpc dataHubLogIndex(DataHubLogIndexReq)   returns (DataHubLogIndexResp);
  //获取设备数据信息
  rpc dataSchemaLatestIndex(DataSchemaLatestIndexReq)     returns (DataSchemaIndexResp);
  //获取设备数据信息
  rpc dataSchemaLogIndex(DataSchemaLogIndexReq)     returns (DataSchemaIndexResp);
  /*
   数据交互
   */
}

message Response {
}
message PageInfo{
  int64 page = 1;
  int64 size = 2;
}


message DeviceInfo{
  string   productID = 1; //产品id 只读
  string  deviceName = 3; //设备名称 读写
  int64   createdTime = 4; //创建时间 只读
  string  secret = 5; //设备秘钥 只读
  int64   firstLogin = 6; //激活时间 只读
  int64   lastLogin = 7; //最后上线时间 只读
  google.protobuf.StringValue  version = 8; // 固件版本  读写
  int64  logLevel = 9; // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
  string  cert = 10;// 设备证书  只读
  bool   isOnline = 11; //在线状态 0离线1在线 只读
  map<string,string> tags = 12;//设备标签
}

message ProductInfo{
  int64   createdTime = 1; //创建时间 只读
  string   productID = 2; //产品id 只读
  string  productName = 3; //产品名称
  int64   authMode = 4;//认证方式:1:账密认证,2:秘钥认证
  int64   deviceType = 5;//设备类型:1:设备,2:网关,3:子设备
  int64   categoryID = 6;//产品品类
  int64   netType = 7;//通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
  int64   dataProto = 8;//数据协议:1:自定义,2:数据模板
  int64   autoRegister = 9;//动态注册:1:关闭,2:打开,3:打开并自动创建设备
  string   secret = 10;//动态注册产品秘钥 只读
  google.protobuf.StringValue   description = 11;//描述
  google.protobuf.StringValue   devStatus = 12; // 产品状态
}

message ProductInfoDeleteReq{
  string   productID = 1; //产品id
}

message ProductInfoReadReq{
  string   productID = 1; //产品id
}

message ProductSchema{
  int64   createdTime = 1; //创建时间 只读
  string   productID = 2; //产品id 只读
  string schema = 3;//数据模板
}

message ProductSchemaUpdateReq{
  ProductSchema info = 1;//产品信息
}

message ProductSchemaReadReq{
  string productID = 1; //产品id  如果为空返回所有产品的信息
}

message DeviceInfoDeleteReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceInfoReadReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceInfoIndexReq{
  string  productID = 2; //产品id
  PageInfo page = 3;//分页信息 只获取一个则不填
}

message DeviceInfoIndexResp{
  repeated DeviceInfo list = 1;//设备信息
  int64  total = 2;//总数(只有分页的时候会返回)
}

message ProductInfoIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  int64  deviceType = 2; //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
  string  productName = 3; //过滤条件: 产品名称
}

message ProductInfoIndexResp{
  repeated ProductInfo list = 1;//设备信息
  int64  total = 2;//总数(只有分页的时候会返回)
}


/*
上面是设备管理模块的消息
*/

/*获取对应日志信息*/
message DataSchemaLogIndexReq{
  PageInfo page = 1;//使用了聚合函数及间隔的时候无效
  string method = 2; //获取的类型   property 属性 event事件 action 请求
  string deviceName = 3; //设备名(必填)
  string productID = 4; //产品id (必填)
  string dataID = 5; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
  int64 timeStart = 6;//获取时间的开始(毫秒时间戳)
  int64 timeEnd = 7;//时间的结束(毫秒时间戳)
  int64 interval = 8;//间隔(单位毫秒) 如果这个值不为零值 则时间的开始和结束必须有效及聚合函数不应该为空
  string argFunc = 9;//聚合函数 avg:平均值 first:第一个参数 last:最后一个参数 count:总数 twa: 时间加权平均函数 参考:https://docs.taosdata.com/taos-sql/function
//  /*
//  FILL 语句指定某一窗口区间数据缺失的情况下的填充模式。填充模式包括以下几种：
//    不进行填充：NONE（默认填充模式）。
//    VALUE 填充：固定值填充，此时需要指定填充的数值。例如：FILL(VALUE, 1.23)。
//    PREV 填充：使用前一个非 NULL 值填充数据。例如：FILL(PREV)。
//    NULL 填充：使用 NULL 填充数据。例如：FILL(NULL)。
//    LINEAR 填充：根据前后距离最近的非 NULL 值做线性插值填充。例如：FILL(LINEAR)。
//    NEXT 填充：使用下一个非 NULL 值填充数据。例如：FILL(NEXT)。
//  */
//  string fill = 9;//填充模式
}

/*获取对应日志信息*/
message DataSchemaLatestIndexReq{
  string method = 1; //获取的类型   property 属性 event事件 action 请求
  string deviceName = 2; //设备名(必填)
  string productID = 3; //产品id (必填)
  repeated string dataID = 4; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

/*设备的日志数据*/
message DataSchemaIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string type = 2 ;//类型 事件类型: 信息:info  告警alert  故障:fault
  string dataID = 3;//属性id
  string getValue = 4;//获取到的值
  string sendValue = 5;//发送过去的参数(action限定)
}

/*获取对应日志信息*/
message DataSchemaIndexResp{
  int64 total = 1; //总数
  repeated DataSchemaIndex list = 2;
}

/*设备的日志数据*/
message DataHubLogIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string action = 2 ;//操作类型;显示相应的操作名称、API名称、服务的method
  string requestID = 3;//请求ID
  string tranceID = 4;//服务器端事务id
  string topic = 5;//主题
  string content = 6;//具体内容
  int64 resultType = 7;//请求结果状态
}

/*实时获取对应信息*/
message DataHubLogIndexReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始(毫秒时间戳)
  int64   timeEnd = 4;//时间的结束(毫秒时间戳)
  PageInfo   page = 5;//分页信息
}
/*实时获取对应信息*/
message DataHubLogIndexResp{
  int64 total = 1; //总数
  repeated DataHubLogIndex list = 2;
}

message SendActionReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string actionId = 3;//产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
  string inputParams = 4;//输入参数
}
message SendActionResp{
  string clientToken = 1;//调用id
  string outputParams = 2;//输出参数 注意：此字段可能返回 null，表示取不到有效值。
  string  status = 3;//返回状态
  int64   code = 4;//设备返回状态码
}

message SendPropertyReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string data = 3;//属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
  int64  dataTimestamp = 4;//上报数据UNIX时间戳, 仅对Method:reported有效
  string method = 5;//请求类型 , 不填该参数或者 desired 表示下发属性给设备, reported 表示模拟设备上报属性
}
message SendPropertyResp{
  int64   code = 1;//设备返回状态码
  string  status = 2;//返回状态
  string clientToken = 3;//调用id
  string data = 4;//返回信息
}
/*获取sdk调试日志信息*/
message DataSdkLogIndexReq {
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始
  int64   timeEnd = 4;//时间的结束
  PageInfo page = 5;//分页信息 只获取一个则不填
}
/*sdk调试日志信息*/
message DataSdkLogIndexResp {
  int64 total = 1; //总数
  repeated DataSdkLogIndex list = 2;
}
message DataSdkLogIndex {
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  int64 loglevel = 2 ;//操作类型;显示相应的操作名称、API名称、服务的method
  string content = 3;//具体内容
}


/*
下面是设备管理模块的消息
*/
message LoginAuthReq {
  string username = 1;//用户名
  string password = 2;//密码
  string clientID = 3;//clientID
  string ip = 4;//访问的ip地址
  bytes certificate = 5;//客户端证书
}

message AccessAuthReq {
  string username = 1; //用户名
  string topic = 2;//主题
  string clientID = 3;//clientID
  string access = 4;//操作
  string ip = 5; //访问的ip地址
}

message RootCheckReq{
  string username = 1;//用户名
  string password = 2;//密码
  string clientID = 3;//clientID
  string ip = 4;//访问的ip地址
  bytes certificate = 5;//客户端证书
}


message ManageFirmwareReq{
  int64 opt = 1;//操作 0:新增 1:修改 2:删除
  FirmwareInfo info = 2; //设备信息
}

message FirmwareInfo{
  string  productID = 1;//产品ID 只读
  string  version = 2;//固件版本 只读 产品下唯一
  string  name = 3;//固件名
  string  description = 4;//固件描述
  string  dir = 5;//固件标识,拿来下载文件 只读
  int64   size = 6;//固件大小 只读
}

message GetFirmwareInfoReq{
  string  productID = 1; //产品id 如果不传获取所有固件
  int64 version=2;//固件版本 如果不传,获取产品下或所有固件
  PageInfo page = 3;//分页信息 只获取一个则不填
}

message GetFirmwareInfoResp{
  repeated FirmwareInfo list = 1;//设备信息
  int64  total = 2;//总数(只有分页的时候会返回)
}