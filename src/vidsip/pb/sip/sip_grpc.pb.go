// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/sip.proto

package sip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SipManage_SipChannelCreate_FullMethodName = "/sip.SipManage/SipChannelCreate"
	SipManage_SipChannelDelete_FullMethodName = "/sip.SipManage/SipChannelDelete"
	SipManage_SipChannelUpdate_FullMethodName = "/sip.SipManage/SipChannelUpdate"
	SipManage_SipChannelPlay_FullMethodName   = "/sip.SipManage/SipChannelPlay"
	SipManage_SipChannelStop_FullMethodName   = "/sip.SipManage/SipChannelStop"
	SipManage_SipChannelIndex_FullMethodName  = "/sip.SipManage/SipChannelIndex"
	SipManage_SipChannelRead_FullMethodName   = "/sip.SipManage/SipChannelRead"
	SipManage_SipDeviceCreate_FullMethodName  = "/sip.SipManage/SipDeviceCreate"
	SipManage_SipDeviceDelete_FullMethodName  = "/sip.SipManage/SipDeviceDelete"
	SipManage_SipDeviceUpdate_FullMethodName  = "/sip.SipManage/SipDeviceUpdate"
	SipManage_SipDeviceIndex_FullMethodName   = "/sip.SipManage/SipDeviceIndex"
	SipManage_SipDeviceRead_FullMethodName    = "/sip.SipManage/SipDeviceRead"
	SipManage_SipInfoRead_FullMethodName      = "/sip.SipManage/SipInfoRead"
)

// SipManageClient is the client API for SipManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SipManageClient interface {
	//新建通道
	SipChannelCreate(ctx context.Context, in *SipChnCreateReq, opts ...grpc.CallOption) (*Response, error)
	//删除通道
	SipChannelDelete(ctx context.Context, in *SipChnDeleteReq, opts ...grpc.CallOption) (*Response, error)
	//更新通道
	SipChannelUpdate(ctx context.Context, in *SipChnUpdateReq, opts ...grpc.CallOption) (*Response, error)
	//播放通道
	SipChannelPlay(ctx context.Context, in *SipChnPlayReq, opts ...grpc.CallOption) (*Response, error)
	//暂停通道
	SipChannelStop(ctx context.Context, in *SipChnStopReq, opts ...grpc.CallOption) (*Response, error)
	//获取通道列表
	SipChannelIndex(ctx context.Context, in *SipChnIndexReq, opts ...grpc.CallOption) (*SipChnIndexResp, error)
	//获取通道详情
	SipChannelRead(ctx context.Context, in *SipChnReadReq, opts ...grpc.CallOption) (*SipChannel, error)
	//新建GB28181设备
	SipDeviceCreate(ctx context.Context, in *SipDevCreateReq, opts ...grpc.CallOption) (*Response, error)
	//删除GB28181设备
	SipDeviceDelete(ctx context.Context, in *SipDevDeleteReq, opts ...grpc.CallOption) (*Response, error)
	//更新GB28181设备
	SipDeviceUpdate(ctx context.Context, in *SipDevUpdateReq, opts ...grpc.CallOption) (*Response, error)
	//获取GB28181设备列表
	SipDeviceIndex(ctx context.Context, in *SipDevIndexReq, opts ...grpc.CallOption) (*SipDevIndexResp, error)
	//获取GB28181设备详情
	SipDeviceRead(ctx context.Context, in *SipDevReadReq, opts ...grpc.CallOption) (*SipDevice, error)
	//获取国标服务信息
	SipInfoRead(ctx context.Context, in *SipInfoReadReq, opts ...grpc.CallOption) (*SipInfo, error)
}

type sipManageClient struct {
	cc grpc.ClientConnInterface
}

func NewSipManageClient(cc grpc.ClientConnInterface) SipManageClient {
	return &sipManageClient{cc}
}

func (c *sipManageClient) SipChannelCreate(ctx context.Context, in *SipChnCreateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, SipManage_SipChannelCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipChannelDelete(ctx context.Context, in *SipChnDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, SipManage_SipChannelDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipChannelUpdate(ctx context.Context, in *SipChnUpdateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, SipManage_SipChannelUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipChannelPlay(ctx context.Context, in *SipChnPlayReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, SipManage_SipChannelPlay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipChannelStop(ctx context.Context, in *SipChnStopReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, SipManage_SipChannelStop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipChannelIndex(ctx context.Context, in *SipChnIndexReq, opts ...grpc.CallOption) (*SipChnIndexResp, error) {
	out := new(SipChnIndexResp)
	err := c.cc.Invoke(ctx, SipManage_SipChannelIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipChannelRead(ctx context.Context, in *SipChnReadReq, opts ...grpc.CallOption) (*SipChannel, error) {
	out := new(SipChannel)
	err := c.cc.Invoke(ctx, SipManage_SipChannelRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipDeviceCreate(ctx context.Context, in *SipDevCreateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, SipManage_SipDeviceCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipDeviceDelete(ctx context.Context, in *SipDevDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, SipManage_SipDeviceDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipDeviceUpdate(ctx context.Context, in *SipDevUpdateReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, SipManage_SipDeviceUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipDeviceIndex(ctx context.Context, in *SipDevIndexReq, opts ...grpc.CallOption) (*SipDevIndexResp, error) {
	out := new(SipDevIndexResp)
	err := c.cc.Invoke(ctx, SipManage_SipDeviceIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipDeviceRead(ctx context.Context, in *SipDevReadReq, opts ...grpc.CallOption) (*SipDevice, error) {
	out := new(SipDevice)
	err := c.cc.Invoke(ctx, SipManage_SipDeviceRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sipManageClient) SipInfoRead(ctx context.Context, in *SipInfoReadReq, opts ...grpc.CallOption) (*SipInfo, error) {
	out := new(SipInfo)
	err := c.cc.Invoke(ctx, SipManage_SipInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SipManageServer is the server API for SipManage service.
// All implementations must embed UnimplementedSipManageServer
// for forward compatibility
type SipManageServer interface {
	//新建通道
	SipChannelCreate(context.Context, *SipChnCreateReq) (*Response, error)
	//删除通道
	SipChannelDelete(context.Context, *SipChnDeleteReq) (*Response, error)
	//更新通道
	SipChannelUpdate(context.Context, *SipChnUpdateReq) (*Response, error)
	//播放通道
	SipChannelPlay(context.Context, *SipChnPlayReq) (*Response, error)
	//暂停通道
	SipChannelStop(context.Context, *SipChnStopReq) (*Response, error)
	//获取通道列表
	SipChannelIndex(context.Context, *SipChnIndexReq) (*SipChnIndexResp, error)
	//获取通道详情
	SipChannelRead(context.Context, *SipChnReadReq) (*SipChannel, error)
	//新建GB28181设备
	SipDeviceCreate(context.Context, *SipDevCreateReq) (*Response, error)
	//删除GB28181设备
	SipDeviceDelete(context.Context, *SipDevDeleteReq) (*Response, error)
	//更新GB28181设备
	SipDeviceUpdate(context.Context, *SipDevUpdateReq) (*Response, error)
	//获取GB28181设备列表
	SipDeviceIndex(context.Context, *SipDevIndexReq) (*SipDevIndexResp, error)
	//获取GB28181设备详情
	SipDeviceRead(context.Context, *SipDevReadReq) (*SipDevice, error)
	//获取国标服务信息
	SipInfoRead(context.Context, *SipInfoReadReq) (*SipInfo, error)
	mustEmbedUnimplementedSipManageServer()
}

// UnimplementedSipManageServer must be embedded to have forward compatible implementations.
type UnimplementedSipManageServer struct {
}

func (UnimplementedSipManageServer) SipChannelCreate(context.Context, *SipChnCreateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipChannelCreate not implemented")
}
func (UnimplementedSipManageServer) SipChannelDelete(context.Context, *SipChnDeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipChannelDelete not implemented")
}
func (UnimplementedSipManageServer) SipChannelUpdate(context.Context, *SipChnUpdateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipChannelUpdate not implemented")
}
func (UnimplementedSipManageServer) SipChannelPlay(context.Context, *SipChnPlayReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipChannelPlay not implemented")
}
func (UnimplementedSipManageServer) SipChannelStop(context.Context, *SipChnStopReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipChannelStop not implemented")
}
func (UnimplementedSipManageServer) SipChannelIndex(context.Context, *SipChnIndexReq) (*SipChnIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipChannelIndex not implemented")
}
func (UnimplementedSipManageServer) SipChannelRead(context.Context, *SipChnReadReq) (*SipChannel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipChannelRead not implemented")
}
func (UnimplementedSipManageServer) SipDeviceCreate(context.Context, *SipDevCreateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipDeviceCreate not implemented")
}
func (UnimplementedSipManageServer) SipDeviceDelete(context.Context, *SipDevDeleteReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipDeviceDelete not implemented")
}
func (UnimplementedSipManageServer) SipDeviceUpdate(context.Context, *SipDevUpdateReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipDeviceUpdate not implemented")
}
func (UnimplementedSipManageServer) SipDeviceIndex(context.Context, *SipDevIndexReq) (*SipDevIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipDeviceIndex not implemented")
}
func (UnimplementedSipManageServer) SipDeviceRead(context.Context, *SipDevReadReq) (*SipDevice, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipDeviceRead not implemented")
}
func (UnimplementedSipManageServer) SipInfoRead(context.Context, *SipInfoReadReq) (*SipInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SipInfoRead not implemented")
}
func (UnimplementedSipManageServer) mustEmbedUnimplementedSipManageServer() {}

// UnsafeSipManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SipManageServer will
// result in compilation errors.
type UnsafeSipManageServer interface {
	mustEmbedUnimplementedSipManageServer()
}

func RegisterSipManageServer(s grpc.ServiceRegistrar, srv SipManageServer) {
	s.RegisterService(&SipManage_ServiceDesc, srv)
}

func _SipManage_SipChannelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipChnCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipChannelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipChannelCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipChannelCreate(ctx, req.(*SipChnCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipChannelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipChnDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipChannelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipChannelDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipChannelDelete(ctx, req.(*SipChnDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipChannelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipChnUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipChannelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipChannelUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipChannelUpdate(ctx, req.(*SipChnUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipChannelPlay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipChnPlayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipChannelPlay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipChannelPlay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipChannelPlay(ctx, req.(*SipChnPlayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipChannelStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipChnStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipChannelStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipChannelStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipChannelStop(ctx, req.(*SipChnStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipChannelIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipChnIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipChannelIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipChannelIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipChannelIndex(ctx, req.(*SipChnIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipChannelRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipChnReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipChannelRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipChannelRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipChannelRead(ctx, req.(*SipChnReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipDeviceCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipDevCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipDeviceCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipDeviceCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipDeviceCreate(ctx, req.(*SipDevCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipDeviceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipDevDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipDeviceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipDeviceDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipDeviceDelete(ctx, req.(*SipDevDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipDeviceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipDevUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipDeviceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipDeviceUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipDeviceUpdate(ctx, req.(*SipDevUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipDeviceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipDevIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipDeviceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipDeviceIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipDeviceIndex(ctx, req.(*SipDevIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipDeviceRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipDevReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipDeviceRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipDeviceRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipDeviceRead(ctx, req.(*SipDevReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SipManage_SipInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SipInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SipManageServer).SipInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SipManage_SipInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SipManageServer).SipInfoRead(ctx, req.(*SipInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SipManage_ServiceDesc is the grpc.ServiceDesc for SipManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SipManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sip.SipManage",
	HandlerType: (*SipManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SipChannelCreate",
			Handler:    _SipManage_SipChannelCreate_Handler,
		},
		{
			MethodName: "SipChannelDelete",
			Handler:    _SipManage_SipChannelDelete_Handler,
		},
		{
			MethodName: "SipChannelUpdate",
			Handler:    _SipManage_SipChannelUpdate_Handler,
		},
		{
			MethodName: "SipChannelPlay",
			Handler:    _SipManage_SipChannelPlay_Handler,
		},
		{
			MethodName: "SipChannelStop",
			Handler:    _SipManage_SipChannelStop_Handler,
		},
		{
			MethodName: "SipChannelIndex",
			Handler:    _SipManage_SipChannelIndex_Handler,
		},
		{
			MethodName: "SipChannelRead",
			Handler:    _SipManage_SipChannelRead_Handler,
		},
		{
			MethodName: "SipDeviceCreate",
			Handler:    _SipManage_SipDeviceCreate_Handler,
		},
		{
			MethodName: "SipDeviceDelete",
			Handler:    _SipManage_SipDeviceDelete_Handler,
		},
		{
			MethodName: "SipDeviceUpdate",
			Handler:    _SipManage_SipDeviceUpdate_Handler,
		},
		{
			MethodName: "SipDeviceIndex",
			Handler:    _SipManage_SipDeviceIndex_Handler,
		},
		{
			MethodName: "SipDeviceRead",
			Handler:    _SipManage_SipDeviceRead_Handler,
		},
		{
			MethodName: "SipInfoRead",
			Handler:    _SipManage_SipInfoRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sip.proto",
}
