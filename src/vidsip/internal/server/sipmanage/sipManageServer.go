// Code generated by goctl. DO NOT EDIT.
// Source: sip.proto

package server

import (
	"context"

	"github.com/i-Things/things/src/vidsip/internal/logic/sipmanage"
	"github.com/i-Things/things/src/vidsip/internal/svc"
	"github.com/i-Things/things/src/vidsip/pb/sip"
)

type SipManageServer struct {
	svcCtx *svc.ServiceContext
	sip.UnimplementedSipManageServer
}

func NewSipManageServer(svcCtx *svc.ServiceContext) *SipManageServer {
	return &SipManageServer{
		svcCtx: svcCtx,
	}
}

// 新建通道
func (s *SipManageServer) SipChannelCreate(ctx context.Context, in *sip.SipChnCreateReq) (*sip.Response, error) {
	l := sipmanagelogic.NewSipChannelCreateLogic(ctx, s.svcCtx)
	return l.SipChannelCreate(in)
}

// 删除通道
func (s *SipManageServer) SipChannelDelete(ctx context.Context, in *sip.SipChnDeleteReq) (*sip.Response, error) {
	l := sipmanagelogic.NewSipChannelDeleteLogic(ctx, s.svcCtx)
	return l.SipChannelDelete(in)
}

// 更新通道
func (s *SipManageServer) SipChannelUpdate(ctx context.Context, in *sip.SipChnUpdateReq) (*sip.Response, error) {
	l := sipmanagelogic.NewSipChannelUpdateLogic(ctx, s.svcCtx)
	return l.SipChannelUpdate(in)
}

// 播放通道
func (s *SipManageServer) SipChannelPlay(ctx context.Context, in *sip.SipChnPlayReq) (*sip.Response, error) {
	l := sipmanagelogic.NewSipChannelPlayLogic(ctx, s.svcCtx)
	return l.SipChannelPlay(in)
}

// 暂停通道
func (s *SipManageServer) SipChannelStop(ctx context.Context, in *sip.SipChnStopReq) (*sip.Response, error) {
	l := sipmanagelogic.NewSipChannelStopLogic(ctx, s.svcCtx)
	return l.SipChannelStop(in)
}

// 获取通道列表
func (s *SipManageServer) SipChannelIndex(ctx context.Context, in *sip.SipChnIndexReq) (*sip.SipChnIndexResp, error) {
	l := sipmanagelogic.NewSipChannelIndexLogic(ctx, s.svcCtx)
	return l.SipChannelIndex(in)
}

// 获取通道详情
func (s *SipManageServer) SipChannelRead(ctx context.Context, in *sip.SipChnReadReq) (*sip.SipChannel, error) {
	l := sipmanagelogic.NewSipChannelReadLogic(ctx, s.svcCtx)
	return l.SipChannelRead(in)
}

// 新建GB28181设备
func (s *SipManageServer) SipDeviceCreate(ctx context.Context, in *sip.SipDevCreateReq) (*sip.Response, error) {
	l := sipmanagelogic.NewSipDeviceCreateLogic(ctx, s.svcCtx)
	return l.SipDeviceCreate(in)
}

// 删除GB28181设备
func (s *SipManageServer) SipDeviceDelete(ctx context.Context, in *sip.SipDevDeleteReq) (*sip.Response, error) {
	l := sipmanagelogic.NewSipDeviceDeleteLogic(ctx, s.svcCtx)
	return l.SipDeviceDelete(in)
}

// 更新GB28181设备
func (s *SipManageServer) SipDeviceUpdate(ctx context.Context, in *sip.SipDevUpdateReq) (*sip.Response, error) {
	l := sipmanagelogic.NewSipDeviceUpdateLogic(ctx, s.svcCtx)
	return l.SipDeviceUpdate(in)
}

// 获取GB28181设备列表
func (s *SipManageServer) SipDeviceIndex(ctx context.Context, in *sip.SipDevIndexReq) (*sip.SipDevIndexResp, error) {
	l := sipmanagelogic.NewSipDeviceIndexLogic(ctx, s.svcCtx)
	return l.SipDeviceIndex(in)
}

// 获取GB28181设备详情
func (s *SipManageServer) SipDeviceRead(ctx context.Context, in *sip.SipDevReadReq) (*sip.SipDevice, error) {
	l := sipmanagelogic.NewSipDeviceReadLogic(ctx, s.svcCtx)
	return l.SipDeviceRead(in)
}

// 获取国标服务信息
func (s *SipManageServer) SipInfoRead(ctx context.Context, in *sip.SipInfoReadReq) (*sip.SipInfo, error) {
	l := sipmanagelogic.NewSipInfoReadLogic(ctx, s.svcCtx)
	return l.SipInfoRead(in)
}
