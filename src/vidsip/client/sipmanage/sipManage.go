// Code generated by goctl. DO NOT EDIT.
// Source: sip.proto

package sipmanage

import (
	"context"

	"github.com/i-Things/things/src/vidsip/internal/svc"
	"github.com/i-Things/things/src/vidsip/pb/sip"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	PageInfo         = sip.PageInfo
	PageInfo_OrderBy = sip.PageInfo_OrderBy
	Response         = sip.Response
	SipChannel       = sip.SipChannel
	SipChnCreateReq  = sip.SipChnCreateReq
	SipChnDeleteReq  = sip.SipChnDeleteReq
	SipChnIndexReq   = sip.SipChnIndexReq
	SipChnIndexResp  = sip.SipChnIndexResp
	SipChnPlayReq    = sip.SipChnPlayReq
	SipChnReadReq    = sip.SipChnReadReq
	SipChnStopReq    = sip.SipChnStopReq
	SipChnUpdateReq  = sip.SipChnUpdateReq
	SipDevCreateReq  = sip.SipDevCreateReq
	SipDevDeleteReq  = sip.SipDevDeleteReq
	SipDevIndexReq   = sip.SipDevIndexReq
	SipDevIndexResp  = sip.SipDevIndexResp
	SipDevReadReq    = sip.SipDevReadReq
	SipDevUpdateReq  = sip.SipDevUpdateReq
	SipDevice        = sip.SipDevice
	SipInfo          = sip.SipInfo
	SipInfoReadReq   = sip.SipInfoReadReq

	SipManage interface {
		// 新建通道
		SipChannelCreate(ctx context.Context, in *SipChnCreateReq, opts ...grpc.CallOption) (*Response, error)
		// 删除通道
		SipChannelDelete(ctx context.Context, in *SipChnDeleteReq, opts ...grpc.CallOption) (*Response, error)
		// 更新通道
		SipChannelUpdate(ctx context.Context, in *SipChnUpdateReq, opts ...grpc.CallOption) (*Response, error)
		// 播放通道
		SipChannelPlay(ctx context.Context, in *SipChnPlayReq, opts ...grpc.CallOption) (*Response, error)
		// 暂停通道
		SipChannelStop(ctx context.Context, in *SipChnStopReq, opts ...grpc.CallOption) (*Response, error)
		// 获取通道列表
		SipChannelIndex(ctx context.Context, in *SipChnIndexReq, opts ...grpc.CallOption) (*SipChnIndexResp, error)
		// 获取通道详情
		SipChannelRead(ctx context.Context, in *SipChnReadReq, opts ...grpc.CallOption) (*SipChannel, error)
		// 新建GB28181设备
		SipDeviceCreate(ctx context.Context, in *SipDevCreateReq, opts ...grpc.CallOption) (*Response, error)
		// 删除GB28181设备
		SipDeviceDelete(ctx context.Context, in *SipDevDeleteReq, opts ...grpc.CallOption) (*Response, error)
		// 更新GB28181设备
		SipDeviceUpdate(ctx context.Context, in *SipDevUpdateReq, opts ...grpc.CallOption) (*Response, error)
		// 获取GB28181设备列表
		SipDeviceIndex(ctx context.Context, in *SipDevIndexReq, opts ...grpc.CallOption) (*SipDevIndexResp, error)
		// 获取GB28181设备详情
		SipDeviceRead(ctx context.Context, in *SipDevReadReq, opts ...grpc.CallOption) (*SipDevice, error)
		// 获取国标服务信息
		SipInfoRead(ctx context.Context, in *SipInfoReadReq, opts ...grpc.CallOption) (*SipInfo, error)
	}

	defaultSipManage struct {
		cli zrpc.Client
	}

	directSipManage struct {
		svcCtx *svc.ServiceContext
		svr    sip.SipManageServer
	}
)

func NewSipManage(cli zrpc.Client) SipManage {
	return &defaultSipManage{
		cli: cli,
	}
}

func NewDirectSipManage(svcCtx *svc.ServiceContext, svr sip.SipManageServer) SipManage {
	return &directSipManage{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 新建通道
func (m *defaultSipManage) SipChannelCreate(ctx context.Context, in *SipChnCreateReq, opts ...grpc.CallOption) (*Response, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipChannelCreate(ctx, in, opts...)
}

// 新建通道
func (d *directSipManage) SipChannelCreate(ctx context.Context, in *SipChnCreateReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.SipChannelCreate(ctx, in)
}

// 删除通道
func (m *defaultSipManage) SipChannelDelete(ctx context.Context, in *SipChnDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipChannelDelete(ctx, in, opts...)
}

// 删除通道
func (d *directSipManage) SipChannelDelete(ctx context.Context, in *SipChnDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.SipChannelDelete(ctx, in)
}

// 更新通道
func (m *defaultSipManage) SipChannelUpdate(ctx context.Context, in *SipChnUpdateReq, opts ...grpc.CallOption) (*Response, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipChannelUpdate(ctx, in, opts...)
}

// 更新通道
func (d *directSipManage) SipChannelUpdate(ctx context.Context, in *SipChnUpdateReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.SipChannelUpdate(ctx, in)
}

// 播放通道
func (m *defaultSipManage) SipChannelPlay(ctx context.Context, in *SipChnPlayReq, opts ...grpc.CallOption) (*Response, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipChannelPlay(ctx, in, opts...)
}

// 播放通道
func (d *directSipManage) SipChannelPlay(ctx context.Context, in *SipChnPlayReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.SipChannelPlay(ctx, in)
}

// 暂停通道
func (m *defaultSipManage) SipChannelStop(ctx context.Context, in *SipChnStopReq, opts ...grpc.CallOption) (*Response, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipChannelStop(ctx, in, opts...)
}

// 暂停通道
func (d *directSipManage) SipChannelStop(ctx context.Context, in *SipChnStopReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.SipChannelStop(ctx, in)
}

// 获取通道列表
func (m *defaultSipManage) SipChannelIndex(ctx context.Context, in *SipChnIndexReq, opts ...grpc.CallOption) (*SipChnIndexResp, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipChannelIndex(ctx, in, opts...)
}

// 获取通道列表
func (d *directSipManage) SipChannelIndex(ctx context.Context, in *SipChnIndexReq, opts ...grpc.CallOption) (*SipChnIndexResp, error) {
	return d.svr.SipChannelIndex(ctx, in)
}

// 获取通道详情
func (m *defaultSipManage) SipChannelRead(ctx context.Context, in *SipChnReadReq, opts ...grpc.CallOption) (*SipChannel, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipChannelRead(ctx, in, opts...)
}

// 获取通道详情
func (d *directSipManage) SipChannelRead(ctx context.Context, in *SipChnReadReq, opts ...grpc.CallOption) (*SipChannel, error) {
	return d.svr.SipChannelRead(ctx, in)
}

// 新建GB28181设备
func (m *defaultSipManage) SipDeviceCreate(ctx context.Context, in *SipDevCreateReq, opts ...grpc.CallOption) (*Response, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipDeviceCreate(ctx, in, opts...)
}

// 新建GB28181设备
func (d *directSipManage) SipDeviceCreate(ctx context.Context, in *SipDevCreateReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.SipDeviceCreate(ctx, in)
}

// 删除GB28181设备
func (m *defaultSipManage) SipDeviceDelete(ctx context.Context, in *SipDevDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipDeviceDelete(ctx, in, opts...)
}

// 删除GB28181设备
func (d *directSipManage) SipDeviceDelete(ctx context.Context, in *SipDevDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.SipDeviceDelete(ctx, in)
}

// 更新GB28181设备
func (m *defaultSipManage) SipDeviceUpdate(ctx context.Context, in *SipDevUpdateReq, opts ...grpc.CallOption) (*Response, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipDeviceUpdate(ctx, in, opts...)
}

// 更新GB28181设备
func (d *directSipManage) SipDeviceUpdate(ctx context.Context, in *SipDevUpdateReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.SipDeviceUpdate(ctx, in)
}

// 获取GB28181设备列表
func (m *defaultSipManage) SipDeviceIndex(ctx context.Context, in *SipDevIndexReq, opts ...grpc.CallOption) (*SipDevIndexResp, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipDeviceIndex(ctx, in, opts...)
}

// 获取GB28181设备列表
func (d *directSipManage) SipDeviceIndex(ctx context.Context, in *SipDevIndexReq, opts ...grpc.CallOption) (*SipDevIndexResp, error) {
	return d.svr.SipDeviceIndex(ctx, in)
}

// 获取GB28181设备详情
func (m *defaultSipManage) SipDeviceRead(ctx context.Context, in *SipDevReadReq, opts ...grpc.CallOption) (*SipDevice, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipDeviceRead(ctx, in, opts...)
}

// 获取GB28181设备详情
func (d *directSipManage) SipDeviceRead(ctx context.Context, in *SipDevReadReq, opts ...grpc.CallOption) (*SipDevice, error) {
	return d.svr.SipDeviceRead(ctx, in)
}

// 获取国标服务信息
func (m *defaultSipManage) SipInfoRead(ctx context.Context, in *SipInfoReadReq, opts ...grpc.CallOption) (*SipInfo, error) {
	client := sip.NewSipManageClient(m.cli.Conn())
	return client.SipInfoRead(ctx, in, opts...)
}

// 获取国标服务信息
func (d *directSipManage) SipInfoRead(ctx context.Context, in *SipInfoReadReq, opts ...grpc.CallOption) (*SipInfo, error) {
	return d.svr.SipInfoRead(ctx, in)
}
