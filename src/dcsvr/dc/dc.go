// Code generated by goctl. DO NOT EDIT!
// Source: dc.proto

package dc

import (
	"context"

	"github.com/i-Things/things/src/dcsvr/pb/dc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	GetGroupInfoReq      = dc.GetGroupInfoReq
	GetGroupInfoResp     = dc.GetGroupInfoResp
	GetGroupMemberReq    = dc.GetGroupMemberReq
	GetGroupMemberResp   = dc.GetGroupMemberResp
	GroupInfo            = dc.GroupInfo
	GroupMember          = dc.GroupMember
	ManageGroupInfoReq   = dc.ManageGroupInfoReq
	ManageGroupMemberReq = dc.ManageGroupMemberReq
	PageInfo             = dc.PageInfo
	Response             = dc.Response
	SendActionReq        = dc.SendActionReq
	SendActionResp       = dc.SendActionResp
	SendPropertyReq      = dc.SendPropertyReq
	SendPropertyResp     = dc.SendPropertyResp

	Dc interface {
		// 管理组
		ManageGroupInfo(ctx context.Context, in *ManageGroupInfoReq, opts ...grpc.CallOption) (*GroupInfo, error)
		// 管理组成员
		ManageGroupMember(ctx context.Context, in *ManageGroupMemberReq, opts ...grpc.CallOption) (*GroupMember, error)
		// 获取组信息
		GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error)
		// 获取组成员
		GetGroupMember(ctx context.Context, in *GetGroupMemberReq, opts ...grpc.CallOption) (*GetGroupMemberResp, error)
		// 同步调用设备行为
		SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error)
		// 同步调用设备属性
		SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error)
	}

	defaultDc struct {
		cli zrpc.Client
	}
)

func NewDc(cli zrpc.Client) Dc {
	return &defaultDc{
		cli: cli,
	}
}

// 管理组
func (m *defaultDc) ManageGroupInfo(ctx context.Context, in *ManageGroupInfoReq, opts ...grpc.CallOption) (*GroupInfo, error) {
	client := dc.NewDcClient(m.cli.Conn())
	return client.ManageGroupInfo(ctx, in, opts...)
}

// 管理组成员
func (m *defaultDc) ManageGroupMember(ctx context.Context, in *ManageGroupMemberReq, opts ...grpc.CallOption) (*GroupMember, error) {
	client := dc.NewDcClient(m.cli.Conn())
	return client.ManageGroupMember(ctx, in, opts...)
}

// 获取组信息
func (m *defaultDc) GetGroupInfo(ctx context.Context, in *GetGroupInfoReq, opts ...grpc.CallOption) (*GetGroupInfoResp, error) {
	client := dc.NewDcClient(m.cli.Conn())
	return client.GetGroupInfo(ctx, in, opts...)
}

// 获取组成员
func (m *defaultDc) GetGroupMember(ctx context.Context, in *GetGroupMemberReq, opts ...grpc.CallOption) (*GetGroupMemberResp, error) {
	client := dc.NewDcClient(m.cli.Conn())
	return client.GetGroupMember(ctx, in, opts...)
}

// 同步调用设备行为
func (m *defaultDc) SendAction(ctx context.Context, in *SendActionReq, opts ...grpc.CallOption) (*SendActionResp, error) {
	client := dc.NewDcClient(m.cli.Conn())
	return client.SendAction(ctx, in, opts...)
}

// 同步调用设备属性
func (m *defaultDc) SendProperty(ctx context.Context, in *SendPropertyReq, opts ...grpc.CallOption) (*SendPropertyResp, error) {
	client := dc.NewDcClient(m.cli.Conn())
	return client.SendProperty(ctx, in, opts...)
}
