// Code generated by goctl. DO NOT EDIT!

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	roleMenuFieldNames          = builder.RawFieldNames(&RoleMenu{})
	roleMenuRows                = strings.Join(roleMenuFieldNames, ",")
	roleMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(roleMenuFieldNames, "`id`", "`createdTime`", "`updatedTime`", "`create_at`", "`update_at`", "`deletedTime`"), ",")
	roleMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(roleMenuFieldNames, "`id`", "`createdTime`", "`updatedTime`", "`create_at`", "`update_at`", "`deletedTime`"), "=?,") + "=?"
)

type (
	roleMenuModel interface {
		Insert(ctx context.Context, data *RoleMenu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RoleMenu, error)
		FindOneByRoleIDMenuID(ctx context.Context, roleID int64, menuID int64) (*RoleMenu, error)
		Update(ctx context.Context, data *RoleMenu) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRoleMenuModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RoleMenu struct {
		Id          int64        `db:"id"`          // id编号
		RoleID      int64        `db:"roleID"`      // 角色ID
		MenuID      int64        `db:"menuID"`      // 菜单ID
		CreatedTime time.Time    `db:"createdTime"` // 创建时间
		UpdatedTime time.Time    `db:"updatedTime"` // 更新时间
		DeletedTime sql.NullTime `db:"deletedTime"`
	}
)

func newRoleMenuModel(conn sqlx.SqlConn) *defaultRoleMenuModel {
	return &defaultRoleMenuModel{
		conn:  conn,
		table: "`role_menu`",
	}
}

func (m *defaultRoleMenuModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRoleMenuModel) FindOne(ctx context.Context, id int64) (*RoleMenu, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", roleMenuRows, m.table)
	var resp RoleMenu
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleMenuModel) FindOneByRoleIDMenuID(ctx context.Context, roleID int64, menuID int64) (*RoleMenu, error) {
	var resp RoleMenu
	query := fmt.Sprintf("select %s from %s where `roleID` = ? and `menuID` = ? limit 1", roleMenuRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, roleID, menuID)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRoleMenuModel) Insert(ctx context.Context, data *RoleMenu) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, roleMenuRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RoleID, data.MenuID, data.CreatedTime, data.UpdatedTime, data.DeletedTime)
	return ret, err
}

func (m *defaultRoleMenuModel) Update(ctx context.Context, newData *RoleMenu) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, roleMenuRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.RoleID, newData.MenuID, newData.CreatedTime, newData.UpdatedTime, newData.DeletedTime, newData.Id)
	return err
}

func (m *defaultRoleMenuModel) tableName() string {
	return m.table
}
