// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ruleAlarmLogFieldNames          = builder.RawFieldNames(&RuleAlarmLog{})
	ruleAlarmLogRows                = strings.Join(ruleAlarmLogFieldNames, ",")
	ruleAlarmLogRowsExpectAutoSet   = strings.Join(stringx.Remove(ruleAlarmLogFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), ",")
	ruleAlarmLogRowsWithPlaceHolder = strings.Join(stringx.Remove(ruleAlarmLogFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), "=?,") + "=?"
)

type (
	ruleAlarmLogModel interface {
		Insert(ctx context.Context, data *RuleAlarmLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RuleAlarmLog, error)
		Update(ctx context.Context, data *RuleAlarmLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRuleAlarmLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RuleAlarmLog struct {
		Id          int64     `db:"id"`          // 编号
		AlarmID     int64     `db:"alarmID"`     // 告警记录ID
		Serial      string    `db:"serial"`      // 告警流水
		SceneName   string    `db:"sceneName"`   // 场景名称
		SceneID     int64     `db:"sceneID"`     // 场景ID
		Desc        string    `db:"desc"`        // 告警说明
		CreatedTime time.Time `db:"createdTime"` // 告警时间
	}
)

func newRuleAlarmLogModel(conn sqlx.SqlConn) *defaultRuleAlarmLogModel {
	return &defaultRuleAlarmLogModel{
		conn:  conn,
		table: "`rule_alarm_log`",
	}
}

func (m *defaultRuleAlarmLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRuleAlarmLogModel) FindOne(ctx context.Context, id int64) (*RuleAlarmLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ruleAlarmLogRows, m.table)
	var resp RuleAlarmLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleAlarmLogModel) Insert(ctx context.Context, data *RuleAlarmLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, ruleAlarmLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AlarmID, data.Serial, data.SceneName, data.SceneID, data.Desc)
	return ret, err
}

func (m *defaultRuleAlarmLogModel) Update(ctx context.Context, data *RuleAlarmLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ruleAlarmLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AlarmID, data.Serial, data.SceneName, data.SceneID, data.Desc, data.Id)
	return err
}

func (m *defaultRuleAlarmLogModel) tableName() string {
	return m.table
}
