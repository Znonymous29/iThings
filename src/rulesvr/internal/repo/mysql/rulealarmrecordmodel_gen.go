// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ruleAlarmRecordFieldNames          = builder.RawFieldNames(&RuleAlarmRecord{})
	ruleAlarmRecordRows                = strings.Join(ruleAlarmRecordFieldNames, ",")
	ruleAlarmRecordRowsExpectAutoSet   = strings.Join(stringx.Remove(ruleAlarmRecordFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), ",")
	ruleAlarmRecordRowsWithPlaceHolder = strings.Join(stringx.Remove(ruleAlarmRecordFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), "=?,") + "=?"
)

type (
	ruleAlarmRecordModel interface {
		Insert(ctx context.Context, data *RuleAlarmRecord) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RuleAlarmRecord, error)
		FindOneByTriggerTypeProductIDDeviceName(ctx context.Context, triggerType int64, productID string, deviceName string) (*RuleAlarmRecord, error)
		Update(ctx context.Context, data *RuleAlarmRecord) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRuleAlarmRecordModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RuleAlarmRecord struct {
		Id          int64     `db:"id"`          // 编号
		AlarmID     int64     `db:"alarmID"`     // 告警记录ID
		TriggerType int64     `db:"triggerType"` // 触发类型(设备触发1,其他2)
		ProductID   string    `db:"productID"`   // 触发产品id
		DeviceName  string    `db:"deviceName"`  // 触发设备名称
		Level       int64     `db:"level"`       // 告警配置级别（1提醒 2一般 3严重 4紧急 5超紧急）
		SceneName   string    `db:"sceneName"`   // 场景名称
		SceneID     int64     `db:"sceneID"`     // 场景ID
		DealState   int64     `db:"dealState"`   // 告警记录状态（1无告警 2告警中 3已处理）
		LastAlarm   time.Time `db:"lastAlarm"`   // 最新告警时间
		CreatedTime time.Time `db:"createdTime"` // 告警时间
	}
)

func newRuleAlarmRecordModel(conn sqlx.SqlConn) *defaultRuleAlarmRecordModel {
	return &defaultRuleAlarmRecordModel{
		conn:  conn,
		table: "`rule_alarm_record`",
	}
}

func (m *defaultRuleAlarmRecordModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRuleAlarmRecordModel) FindOne(ctx context.Context, id int64) (*RuleAlarmRecord, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ruleAlarmRecordRows, m.table)
	var resp RuleAlarmRecord
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleAlarmRecordModel) FindOneByTriggerTypeProductIDDeviceName(ctx context.Context, triggerType int64, productID string, deviceName string) (*RuleAlarmRecord, error) {
	var resp RuleAlarmRecord
	query := fmt.Sprintf("select %s from %s where `triggerType` = ? and `productID` = ? and `deviceName` = ? limit 1", ruleAlarmRecordRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, triggerType, productID, deviceName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleAlarmRecordModel) Insert(ctx context.Context, data *RuleAlarmRecord) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, ruleAlarmRecordRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AlarmID, data.TriggerType, data.ProductID, data.DeviceName, data.Level, data.SceneName, data.SceneID, data.DealState, data.LastAlarm)
	return ret, err
}

func (m *defaultRuleAlarmRecordModel) Update(ctx context.Context, newData *RuleAlarmRecord) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ruleAlarmRecordRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.AlarmID, newData.TriggerType, newData.ProductID, newData.DeviceName, newData.Level, newData.SceneName, newData.SceneID, newData.DealState, newData.LastAlarm, newData.Id)
	return err
}

func (m *defaultRuleAlarmRecordModel) tableName() string {
	return m.table
}
