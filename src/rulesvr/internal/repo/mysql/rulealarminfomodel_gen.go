// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ruleAlarmInfoFieldNames          = builder.RawFieldNames(&RuleAlarmInfo{})
	ruleAlarmInfoRows                = strings.Join(ruleAlarmInfoFieldNames, ",")
	ruleAlarmInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(ruleAlarmInfoFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), ",")
	ruleAlarmInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(ruleAlarmInfoFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), "=?,") + "=?"
)

type (
	ruleAlarmInfoModel interface {
		Insert(ctx context.Context, data *RuleAlarmInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RuleAlarmInfo, error)
		FindOneByName(ctx context.Context, name string) (*RuleAlarmInfo, error)
		Update(ctx context.Context, data *RuleAlarmInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRuleAlarmInfoModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RuleAlarmInfo struct {
		Id          int64        `db:"id"`          // 编号
		Name        string       `db:"name"`        // 告警配置名称
		Desc        string       `db:"desc"`        // 告警配置说明
		Level       int64        `db:"level"`       // 告警配置级别（1提醒 2一般 3严重 4紧急 5超紧急）
		Status      int64        `db:"status"`      // 状态  1:启用,2:禁用
		CreatedTime time.Time    `db:"createdTime"` // 创建时间
		UpdatedTime time.Time    `db:"updatedTime"` // 更新时间
		DeletedTime sql.NullTime `db:"deletedTime"`
	}
)

func newRuleAlarmInfoModel(conn sqlx.SqlConn) *defaultRuleAlarmInfoModel {
	return &defaultRuleAlarmInfoModel{
		conn:  conn,
		table: "`rule_alarm_info`",
	}
}

func (m *defaultRuleAlarmInfoModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRuleAlarmInfoModel) FindOne(ctx context.Context, id int64) (*RuleAlarmInfo, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ruleAlarmInfoRows, m.table)
	var resp RuleAlarmInfo
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleAlarmInfoModel) FindOneByName(ctx context.Context, name string) (*RuleAlarmInfo, error) {
	var resp RuleAlarmInfo
	query := fmt.Sprintf("select %s from %s where `name` = ? limit 1", ruleAlarmInfoRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, name)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleAlarmInfoModel) Insert(ctx context.Context, data *RuleAlarmInfo) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, ruleAlarmInfoRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Desc, data.Level, data.Status)
	return ret, err
}

func (m *defaultRuleAlarmInfoModel) Update(ctx context.Context, newData *RuleAlarmInfo) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ruleAlarmInfoRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Name, newData.Desc, newData.Level, newData.Status, newData.Id)
	return err
}

func (m *defaultRuleAlarmInfoModel) tableName() string {
	return m.table
}
