// Code generated by goctl. DO NOT EDIT.

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	ruleAlarmSceneFieldNames          = builder.RawFieldNames(&RuleAlarmScene{})
	ruleAlarmSceneRows                = strings.Join(ruleAlarmSceneFieldNames, ",")
	ruleAlarmSceneRowsExpectAutoSet   = strings.Join(stringx.Remove(ruleAlarmSceneFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), ",")
	ruleAlarmSceneRowsWithPlaceHolder = strings.Join(stringx.Remove(ruleAlarmSceneFieldNames, "`id`", "`createdTime`", "`deletedTime`", "`updatedTime`"), "=?,") + "=?"
)

type (
	ruleAlarmSceneModel interface {
		Insert(ctx context.Context, data *RuleAlarmScene) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*RuleAlarmScene, error)
		FindOneByAlarmIDSceneID(ctx context.Context, alarmID sql.NullInt64, sceneID sql.NullInt64) (*RuleAlarmScene, error)
		Update(ctx context.Context, data *RuleAlarmScene) error
		Delete(ctx context.Context, id int64) error
	}

	defaultRuleAlarmSceneModel struct {
		conn  sqlx.SqlConn
		table string
	}

	RuleAlarmScene struct {
		Id          int64         `db:"id"`          // id编号
		AlarmID     sql.NullInt64 `db:"alarmID"`     // 告警配置ID
		SceneID     sql.NullInt64 `db:"sceneID"`     // 场景ID
		CreatedTime time.Time     `db:"createdTime"` // 创建时间
		UpdatedTime time.Time     `db:"updatedTime"` // 更新时间
		DeletedTime sql.NullTime  `db:"deletedTime"`
	}
)

func newRuleAlarmSceneModel(conn sqlx.SqlConn) *defaultRuleAlarmSceneModel {
	return &defaultRuleAlarmSceneModel{
		conn:  conn,
		table: "`rule_alarm_scene`",
	}
}

func (m *defaultRuleAlarmSceneModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultRuleAlarmSceneModel) FindOne(ctx context.Context, id int64) (*RuleAlarmScene, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", ruleAlarmSceneRows, m.table)
	var resp RuleAlarmScene
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleAlarmSceneModel) FindOneByAlarmIDSceneID(ctx context.Context, alarmID sql.NullInt64, sceneID sql.NullInt64) (*RuleAlarmScene, error) {
	var resp RuleAlarmScene
	query := fmt.Sprintf("select %s from %s where `alarmID` = ? and `sceneID` = ? limit 1", ruleAlarmSceneRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, alarmID, sceneID)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultRuleAlarmSceneModel) Insert(ctx context.Context, data *RuleAlarmScene) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, ruleAlarmSceneRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AlarmID, data.SceneID)
	return ret, err
}

func (m *defaultRuleAlarmSceneModel) Update(ctx context.Context, newData *RuleAlarmScene) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, ruleAlarmSceneRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.AlarmID, newData.SceneID, newData.Id)
	return err
}

func (m *defaultRuleAlarmSceneModel) tableName() string {
	return m.table
}
