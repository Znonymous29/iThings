// Code generated by goctl. DO NOT EDIT!
// Source: rule.proto

package client

import (
	"context"

	"github.com/i-Things/things/src/rulesvr/internal/svc"
	"github.com/i-Things/things/src/rulesvr/pb/rule"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FlowInfo          = rule.FlowInfo
	FlowInfoDeleteReq = rule.FlowInfoDeleteReq
	FlowInfoIndexReq  = rule.FlowInfoIndexReq
	FlowInfoIndexResp = rule.FlowInfoIndexResp
	FlowInfoReadReq   = rule.FlowInfoReadReq
	PageInfo          = rule.PageInfo
	Response          = rule.Response

	Flow interface {
		FlowInfoCreate(ctx context.Context, in *FlowInfo, opts ...grpc.CallOption) (*Response, error)
		FlowInfoUpdate(ctx context.Context, in *FlowInfo, opts ...grpc.CallOption) (*Response, error)
		FlowInfoDelete(ctx context.Context, in *FlowInfoDeleteReq, opts ...grpc.CallOption) (*Response, error)
		FlowInfoIndex(ctx context.Context, in *FlowInfoIndexReq, opts ...grpc.CallOption) (*FlowInfoIndexResp, error)
		FlowInfoRead(ctx context.Context, in *FlowInfoReadReq, opts ...grpc.CallOption) (*FlowInfo, error)
	}

	defaultFlow struct {
		cli zrpc.Client
	}

	directFlow struct {
		svcCtx *svc.ServiceContext
		svr    rule.FlowServer
	}
)

func NewFlow(cli zrpc.Client) Flow {
	return &defaultFlow{
		cli: cli,
	}
}

func NewDirectFlow(svcCtx *svc.ServiceContext, svr rule.FlowServer) Flow {
	return &directFlow{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

func (m *defaultFlow) FlowInfoCreate(ctx context.Context, in *FlowInfo, opts ...grpc.CallOption) (*Response, error) {
	client := rule.NewFlowClient(m.cli.Conn())
	return client.FlowInfoCreate(ctx, in, opts...)
}

func (d *directFlow) FlowInfoCreate(ctx context.Context, in *FlowInfo, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.FlowInfoCreate(ctx, in)
}

func (m *defaultFlow) FlowInfoUpdate(ctx context.Context, in *FlowInfo, opts ...grpc.CallOption) (*Response, error) {
	client := rule.NewFlowClient(m.cli.Conn())
	return client.FlowInfoUpdate(ctx, in, opts...)
}

func (d *directFlow) FlowInfoUpdate(ctx context.Context, in *FlowInfo, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.FlowInfoUpdate(ctx, in)
}

func (m *defaultFlow) FlowInfoDelete(ctx context.Context, in *FlowInfoDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	client := rule.NewFlowClient(m.cli.Conn())
	return client.FlowInfoDelete(ctx, in, opts...)
}

func (d *directFlow) FlowInfoDelete(ctx context.Context, in *FlowInfoDeleteReq, opts ...grpc.CallOption) (*Response, error) {
	return d.svr.FlowInfoDelete(ctx, in)
}

func (m *defaultFlow) FlowInfoIndex(ctx context.Context, in *FlowInfoIndexReq, opts ...grpc.CallOption) (*FlowInfoIndexResp, error) {
	client := rule.NewFlowClient(m.cli.Conn())
	return client.FlowInfoIndex(ctx, in, opts...)
}

func (d *directFlow) FlowInfoIndex(ctx context.Context, in *FlowInfoIndexReq, opts ...grpc.CallOption) (*FlowInfoIndexResp, error) {
	return d.svr.FlowInfoIndex(ctx, in)
}

func (m *defaultFlow) FlowInfoRead(ctx context.Context, in *FlowInfoReadReq, opts ...grpc.CallOption) (*FlowInfo, error) {
	client := rule.NewFlowClient(m.cli.Conn())
	return client.FlowInfoRead(ctx, in, opts...)
}

func (d *directFlow) FlowInfoRead(ctx context.Context, in *FlowInfoReadReq, opts ...grpc.CallOption) (*FlowInfo, error) {
	return d.svr.FlowInfoRead(ctx, in)
}
