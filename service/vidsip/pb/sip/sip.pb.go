// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: proto/sip.proto

package sip

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{0}
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 排序信息
	Orders []*PageInfo_OrderBy `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{1}
}

func (x *PageInfo) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PageInfo) GetOrders() []*PageInfo_OrderBy {
	if x != nil {
		return x.Orders
	}
	return nil
}

type SipChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID    string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	DeviceID     string `protobuf:"bytes,2,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	Memo         string `protobuf:"bytes,3,opt,name=Memo,proto3" json:"Memo,omitempty"`
	Name         string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	Manufacturer string `protobuf:"bytes,5,opt,name=Manufacturer,proto3" json:"Manufacturer,omitempty"`
	Model        string `protobuf:"bytes,6,opt,name=Model,proto3" json:"Model,omitempty"`
	Owner        string `protobuf:"bytes,7,opt,name=Owner,proto3" json:"Owner,omitempty"`
	CivilCode    string `protobuf:"bytes,8,opt,name=CivilCode,proto3" json:"CivilCode,omitempty"`
	Address      string `protobuf:"bytes,9,opt,name=Address,proto3" json:"Address,omitempty"`
	Parental     int32  `protobuf:"varint,10,opt,name=Parental,proto3" json:"Parental,omitempty"`
	SafetyWay    int32  `protobuf:"varint,11,opt,name=SafetyWay,proto3" json:"SafetyWay,omitempty"`
	RegisterWay  int32  `protobuf:"varint,12,opt,name=RegisterWay,proto3" json:"RegisterWay,omitempty"`
	Secrecy      int32  `protobuf:"varint,13,opt,name=Secrecy,proto3" json:"Secrecy,omitempty"`
	Status       string `protobuf:"bytes,14,opt,name=Status,proto3" json:"Status,omitempty"`
	URIStr       string `protobuf:"bytes,15,opt,name=URIStr,proto3" json:"URIStr,omitempty"`
	VF           string `protobuf:"bytes,16,opt,name=VF,proto3" json:"VF,omitempty"` //编码格式
	Height       int32  `protobuf:"varint,17,opt,name=Height,proto3" json:"Height,omitempty"`
	Width        int32  `protobuf:"varint,18,opt,name=Width,proto3" json:"Width,omitempty"`
	FPS          int32  `protobuf:"varint,19,opt,name=FPS,proto3" json:"FPS,omitempty"`
	StreamType   string `protobuf:"bytes,20,opt,name=StreamType,proto3" json:"StreamType,omitempty"`
	URL          string `protobuf:"bytes,21,opt,name=URL,proto3" json:"URL,omitempty"`
	LastLogin    int64  `protobuf:"varint,22,opt,name=LastLogin,proto3" json:"LastLogin,omitempty"`
	IsPlay       bool   `protobuf:"varint,23,opt,name=IsPlay,proto3" json:"IsPlay,omitempty"`
}

func (x *SipChannel) Reset() {
	*x = SipChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipChannel) ProtoMessage() {}

func (x *SipChannel) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipChannel.ProtoReflect.Descriptor instead.
func (*SipChannel) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{2}
}

func (x *SipChannel) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *SipChannel) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *SipChannel) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SipChannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SipChannel) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *SipChannel) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *SipChannel) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SipChannel) GetCivilCode() string {
	if x != nil {
		return x.CivilCode
	}
	return ""
}

func (x *SipChannel) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *SipChannel) GetParental() int32 {
	if x != nil {
		return x.Parental
	}
	return 0
}

func (x *SipChannel) GetSafetyWay() int32 {
	if x != nil {
		return x.SafetyWay
	}
	return 0
}

func (x *SipChannel) GetRegisterWay() int32 {
	if x != nil {
		return x.RegisterWay
	}
	return 0
}

func (x *SipChannel) GetSecrecy() int32 {
	if x != nil {
		return x.Secrecy
	}
	return 0
}

func (x *SipChannel) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SipChannel) GetURIStr() string {
	if x != nil {
		return x.URIStr
	}
	return ""
}

func (x *SipChannel) GetVF() string {
	if x != nil {
		return x.VF
	}
	return ""
}

func (x *SipChannel) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *SipChannel) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *SipChannel) GetFPS() int32 {
	if x != nil {
		return x.FPS
	}
	return 0
}

func (x *SipChannel) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

func (x *SipChannel) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *SipChannel) GetLastLogin() int64 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

func (x *SipChannel) GetIsPlay() bool {
	if x != nil {
		return x.IsPlay
	}
	return false
}

type SipInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Region       string `protobuf:"bytes,2,opt,name=Region,proto3" json:"Region,omitempty"`
	CID          string `protobuf:"bytes,3,opt,name=CID,proto3" json:"CID,omitempty"`
	CNUM         int32  `protobuf:"varint,4,opt,name=CNUM,proto3" json:"CNUM,omitempty"`
	DID          string `protobuf:"bytes,5,opt,name=DID,proto3" json:"DID,omitempty"`
	DNUM         int32  `protobuf:"varint,6,opt,name=DNUM,proto3" json:"DNUM,omitempty"`
	LID          string `protobuf:"bytes,7,opt,name=LID,proto3" json:"LID,omitempty"`
	VidmgrID     string `protobuf:"bytes,8,opt,name=VidmgrID,proto3" json:"VidmgrID,omitempty"`
	IsOpen       bool   `protobuf:"varint,9,opt,name=IsOpen,proto3" json:"IsOpen,omitempty"`
	MediaRtpIP   int64  `protobuf:"varint,10,opt,name=MediaRtpIP,proto3" json:"MediaRtpIP,omitempty"`
	MediaRtpPort int64  `protobuf:"varint,11,opt,name=MediaRtpPort,proto3" json:"MediaRtpPort,omitempty"`
	IP           string `protobuf:"bytes,12,opt,name=IP,proto3" json:"IP,omitempty"`
	Port         int64  `protobuf:"varint,13,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *SipInfo) Reset() {
	*x = SipInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipInfo) ProtoMessage() {}

func (x *SipInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipInfo.ProtoReflect.Descriptor instead.
func (*SipInfo) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{3}
}

func (x *SipInfo) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SipInfo) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SipInfo) GetCID() string {
	if x != nil {
		return x.CID
	}
	return ""
}

func (x *SipInfo) GetCNUM() int32 {
	if x != nil {
		return x.CNUM
	}
	return 0
}

func (x *SipInfo) GetDID() string {
	if x != nil {
		return x.DID
	}
	return ""
}

func (x *SipInfo) GetDNUM() int32 {
	if x != nil {
		return x.DNUM
	}
	return 0
}

func (x *SipInfo) GetLID() string {
	if x != nil {
		return x.LID
	}
	return ""
}

func (x *SipInfo) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

func (x *SipInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *SipInfo) GetMediaRtpIP() int64 {
	if x != nil {
		return x.MediaRtpIP
	}
	return 0
}

func (x *SipInfo) GetMediaRtpPort() int64 {
	if x != nil {
		return x.MediaRtpPort
	}
	return 0
}

func (x *SipInfo) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *SipInfo) GetPort() int64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type SipChnCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID  string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	DeviceID   string `protobuf:"bytes,2,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"` //设备ID
	Memo       string `protobuf:"bytes,3,opt,name=Memo,proto3" json:"Memo,omitempty"`
	StreamType string `protobuf:"bytes,4,opt,name=StreamType,proto3" json:"StreamType,omitempty"`
	Url        string `protobuf:"bytes,5,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *SipChnCreateReq) Reset() {
	*x = SipChnCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipChnCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipChnCreateReq) ProtoMessage() {}

func (x *SipChnCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipChnCreateReq.ProtoReflect.Descriptor instead.
func (*SipChnCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{4}
}

func (x *SipChnCreateReq) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *SipChnCreateReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *SipChnCreateReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SipChnCreateReq) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

func (x *SipChnCreateReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SipChnUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID  string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Memo       string `protobuf:"bytes,2,opt,name=Memo,proto3" json:"Memo,omitempty"`
	StreamType string `protobuf:"bytes,3,opt,name=StreamType,proto3" json:"StreamType,omitempty"`
	Url        string `protobuf:"bytes,4,opt,name=Url,proto3" json:"Url,omitempty"`
}

func (x *SipChnUpdateReq) Reset() {
	*x = SipChnUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipChnUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipChnUpdateReq) ProtoMessage() {}

func (x *SipChnUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipChnUpdateReq.ProtoReflect.Descriptor instead.
func (*SipChnUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{5}
}

func (x *SipChnUpdateReq) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *SipChnUpdateReq) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *SipChnUpdateReq) GetStreamType() string {
	if x != nil {
		return x.StreamType
	}
	return ""
}

func (x *SipChnUpdateReq) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SipChnPlayReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
	Replay    int32  `protobuf:"varint,2,opt,name=Replay,proto3" json:"Replay,omitempty"`
	Start     int64  `protobuf:"varint,3,opt,name=Start,proto3" json:"Start,omitempty"`
	End       int64  `protobuf:"varint,4,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *SipChnPlayReq) Reset() {
	*x = SipChnPlayReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipChnPlayReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipChnPlayReq) ProtoMessage() {}

func (x *SipChnPlayReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipChnPlayReq.ProtoReflect.Descriptor instead.
func (*SipChnPlayReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{6}
}

func (x *SipChnPlayReq) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

func (x *SipChnPlayReq) GetReplay() int32 {
	if x != nil {
		return x.Replay
	}
	return 0
}

func (x *SipChnPlayReq) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *SipChnPlayReq) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type SipChnStopReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
}

func (x *SipChnStopReq) Reset() {
	*x = SipChnStopReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipChnStopReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipChnStopReq) ProtoMessage() {}

func (x *SipChnStopReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipChnStopReq.ProtoReflect.Descriptor instead.
func (*SipChnStopReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{7}
}

func (x *SipChnStopReq) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

type SipChnIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`             //分页信息 只获取一个则不填
	ChannelIDs []string  `protobuf:"bytes,2,rep,name=ChannelIDs,proto3" json:"ChannelIDs,omitempty"` //通道id
}

func (x *SipChnIndexReq) Reset() {
	*x = SipChnIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipChnIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipChnIndexReq) ProtoMessage() {}

func (x *SipChnIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipChnIndexReq.ProtoReflect.Descriptor instead.
func (*SipChnIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{8}
}

func (x *SipChnIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SipChnIndexReq) GetChannelIDs() []string {
	if x != nil {
		return x.ChannelIDs
	}
	return nil
}

type SipChnIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*SipChannel `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //产品信息
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *SipChnIndexResp) Reset() {
	*x = SipChnIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipChnIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipChnIndexResp) ProtoMessage() {}

func (x *SipChnIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipChnIndexResp.ProtoReflect.Descriptor instead.
func (*SipChnIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{9}
}

func (x *SipChnIndexResp) GetList() []*SipChannel {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SipChnIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SipChnDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
}

func (x *SipChnDeleteReq) Reset() {
	*x = SipChnDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipChnDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipChnDeleteReq) ProtoMessage() {}

func (x *SipChnDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipChnDeleteReq.ProtoReflect.Descriptor instead.
func (*SipChnDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{10}
}

func (x *SipChnDeleteReq) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

type SipChnReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelID string `protobuf:"bytes,1,opt,name=ChannelID,proto3" json:"ChannelID,omitempty"`
}

func (x *SipChnReadReq) Reset() {
	*x = SipChnReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipChnReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipChnReadReq) ProtoMessage() {}

func (x *SipChnReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipChnReadReq.ProtoReflect.Descriptor instead.
func (*SipChnReadReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{11}
}

func (x *SipChnReadReq) GetChannelID() string {
	if x != nil {
		return x.ChannelID
	}
	return ""
}

type SipDevCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID  string `protobuf:"bytes,1,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	PWD       string `protobuf:"bytes,2,opt,name=PWD,proto3" json:"PWD,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	VidmgrID  string `protobuf:"bytes,4,opt,name=VidmgrID,proto3" json:"VidmgrID,omitempty"`
	MediaIP   string `protobuf:"bytes,5,opt,name=MediaIP,proto3" json:"MediaIP,omitempty"`
	MediaPort int64  `protobuf:"varint,6,opt,name=MediaPort,proto3" json:"MediaPort,omitempty"`
}

func (x *SipDevCreateReq) Reset() {
	*x = SipDevCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipDevCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipDevCreateReq) ProtoMessage() {}

func (x *SipDevCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipDevCreateReq.ProtoReflect.Descriptor instead.
func (*SipDevCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{12}
}

func (x *SipDevCreateReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *SipDevCreateReq) GetPWD() string {
	if x != nil {
		return x.PWD
	}
	return ""
}

func (x *SipDevCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SipDevCreateReq) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

func (x *SipDevCreateReq) GetMediaIP() string {
	if x != nil {
		return x.MediaIP
	}
	return ""
}

func (x *SipDevCreateReq) GetMediaPort() int64 {
	if x != nil {
		return x.MediaPort
	}
	return 0
}

type SipDevUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID string `protobuf:"bytes,1,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	PWD      string `protobuf:"bytes,2,opt,name=PWD,proto3" json:"PWD,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	VidmgrID string `protobuf:"bytes,4,opt,name=VidmgrID,proto3" json:"VidmgrID,omitempty"`
}

func (x *SipDevUpdateReq) Reset() {
	*x = SipDevUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipDevUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipDevUpdateReq) ProtoMessage() {}

func (x *SipDevUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipDevUpdateReq.ProtoReflect.Descriptor instead.
func (*SipDevUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{13}
}

func (x *SipDevUpdateReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *SipDevUpdateReq) GetPWD() string {
	if x != nil {
		return x.PWD
	}
	return ""
}

func (x *SipDevUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SipDevUpdateReq) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

type SipDevIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`           //分页信息 只获取一个则不填
	DeviceIDs []string  `protobuf:"bytes,2,rep,name=DeviceIDs,proto3" json:"DeviceIDs,omitempty"` //设备id
}

func (x *SipDevIndexReq) Reset() {
	*x = SipDevIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipDevIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipDevIndexReq) ProtoMessage() {}

func (x *SipDevIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipDevIndexReq.ProtoReflect.Descriptor instead.
func (*SipDevIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{14}
}

func (x *SipDevIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SipDevIndexReq) GetDeviceIDs() []string {
	if x != nil {
		return x.DeviceIDs
	}
	return nil
}

type SipDevIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*SipDevice `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //产品信息
	Total int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *SipDevIndexResp) Reset() {
	*x = SipDevIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipDevIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipDevIndexResp) ProtoMessage() {}

func (x *SipDevIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipDevIndexResp.ProtoReflect.Descriptor instead.
func (*SipDevIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{15}
}

func (x *SipDevIndexResp) GetList() []*SipDevice {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SipDevIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SipDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID     string `protobuf:"bytes,1,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Region       string `protobuf:"bytes,3,opt,name=Region,proto3" json:"Region,omitempty"`
	Host         string `protobuf:"bytes,4,opt,name=Host,proto3" json:"Host,omitempty"`
	Port         string `protobuf:"bytes,5,opt,name=Port,proto3" json:"Port,omitempty"`
	TransPort    string `protobuf:"bytes,6,opt,name=TransPort,proto3" json:"TransPort,omitempty"`
	Proto        string `protobuf:"bytes,7,opt,name=Proto,proto3" json:"Proto,omitempty"`
	Rport        string `protobuf:"bytes,8,opt,name=Rport,proto3" json:"Rport,omitempty"`
	RAddr        string `protobuf:"bytes,9,opt,name=RAddr,proto3" json:"RAddr,omitempty"`
	Manufacturer string `protobuf:"bytes,10,opt,name=Manufacturer,proto3" json:"Manufacturer,omitempty"`
	DeviceType   string `protobuf:"bytes,11,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
	Firmware     string `protobuf:"bytes,12,opt,name=Firmware,proto3" json:"Firmware,omitempty"`
	Model        string `protobuf:"bytes,13,opt,name=Model,proto3" json:"Model,omitempty"`
	URIStr       string `protobuf:"bytes,14,opt,name=URIStr,proto3" json:"URIStr,omitempty"`
	LastLogin    int64  `protobuf:"varint,15,opt,name=LastLogin,proto3" json:"LastLogin,omitempty"`
	Regist       bool   `protobuf:"varint,16,opt,name=Regist,proto3" json:"Regist,omitempty"`
	PWD          string `protobuf:"bytes,17,opt,name=PWD,proto3" json:"PWD,omitempty"`
	Source       string `protobuf:"bytes,18,opt,name=Source,proto3" json:"Source,omitempty"`
}

func (x *SipDevice) Reset() {
	*x = SipDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipDevice) ProtoMessage() {}

func (x *SipDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipDevice.ProtoReflect.Descriptor instead.
func (*SipDevice) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{16}
}

func (x *SipDevice) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *SipDevice) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SipDevice) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *SipDevice) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SipDevice) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *SipDevice) GetTransPort() string {
	if x != nil {
		return x.TransPort
	}
	return ""
}

func (x *SipDevice) GetProto() string {
	if x != nil {
		return x.Proto
	}
	return ""
}

func (x *SipDevice) GetRport() string {
	if x != nil {
		return x.Rport
	}
	return ""
}

func (x *SipDevice) GetRAddr() string {
	if x != nil {
		return x.RAddr
	}
	return ""
}

func (x *SipDevice) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *SipDevice) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *SipDevice) GetFirmware() string {
	if x != nil {
		return x.Firmware
	}
	return ""
}

func (x *SipDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *SipDevice) GetURIStr() string {
	if x != nil {
		return x.URIStr
	}
	return ""
}

func (x *SipDevice) GetLastLogin() int64 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

func (x *SipDevice) GetRegist() bool {
	if x != nil {
		return x.Regist
	}
	return false
}

func (x *SipDevice) GetPWD() string {
	if x != nil {
		return x.PWD
	}
	return ""
}

func (x *SipDevice) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type SipDevReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID string `protobuf:"bytes,1,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
}

func (x *SipDevReadReq) Reset() {
	*x = SipDevReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipDevReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipDevReadReq) ProtoMessage() {}

func (x *SipDevReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipDevReadReq.ProtoReflect.Descriptor instead.
func (*SipDevReadReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{17}
}

func (x *SipDevReadReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

type SipDevDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceID string `protobuf:"bytes,1,opt,name=DeviceID,proto3" json:"DeviceID,omitempty"`
}

func (x *SipDevDeleteReq) Reset() {
	*x = SipDevDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipDevDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipDevDeleteReq) ProtoMessage() {}

func (x *SipDevDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipDevDeleteReq.ProtoReflect.Descriptor instead.
func (*SipDevDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{18}
}

func (x *SipDevDeleteReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

type SipInfoReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VidmgrID string `protobuf:"bytes,1,opt,name=VidmgrID,proto3" json:"VidmgrID,omitempty"` //流服务ID
}

func (x *SipInfoReadReq) Reset() {
	*x = SipInfoReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SipInfoReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SipInfoReadReq) ProtoMessage() {}

func (x *SipInfoReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SipInfoReadReq.ProtoReflect.Descriptor instead.
func (*SipInfoReadReq) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{19}
}

func (x *SipInfoReadReq) GetVidmgrID() string {
	if x != nil {
		return x.VidmgrID
	}
	return ""
}

type PageInfo_OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 排序的字段名
	Filed string `protobuf:"bytes,1,opt,name=filed,proto3" json:"filed,omitempty"`
	// 排序方式：0 aes, 1 desc
	Sort int64 `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *PageInfo_OrderBy) Reset() {
	*x = PageInfo_OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_sip_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo_OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo_OrderBy) ProtoMessage() {}

func (x *PageInfo_OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_sip_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo_OrderBy.ProtoReflect.Descriptor instead.
func (*PageInfo_OrderBy) Descriptor() ([]byte, []int) {
	return file_proto_sip_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PageInfo_OrderBy) GetFiled() string {
	if x != nil {
		return x.Filed
	}
	return ""
}

func (x *PageInfo_OrderBy) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

var File_proto_sip_proto protoreflect.FileDescriptor

var file_proto_sip_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x73, 0x69, 0x70, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x96, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x06,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x33, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0xd4, 0x04, 0x0a, 0x0a,
	0x53, 0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x69, 0x76, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x69, 0x76, 0x69, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x57, 0x61, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x57, 0x61, 0x79, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x61, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x61, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x65, 0x63, 0x72, 0x65, 0x63, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x53, 0x65, 0x63, 0x72, 0x65, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x52, 0x49, 0x53, 0x74, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x52, 0x49, 0x53, 0x74, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x56, 0x46,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x56, 0x46, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x46, 0x50, 0x53, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x46, 0x50, 0x53, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52,
	0x4c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09,
	0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73,
	0x50, 0x6c, 0x61, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x50, 0x6c,
	0x61, 0x79, 0x22, 0xab, 0x02, 0x0a, 0x07, 0x53, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x4e, 0x55, 0x4d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x43, 0x4e, 0x55, 0x4d, 0x12, 0x10, 0x0a, 0x03,
	0x44, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x44, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x44, 0x4e, 0x55, 0x4d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x4e,
	0x55, 0x4d, 0x12, 0x10, 0x0a, 0x03, 0x4c, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x4c, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x49, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x74, 0x70, 0x49, 0x50, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x74, 0x70, 0x49, 0x50, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x52, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x50, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x22, 0x91, 0x01, 0x0a, 0x0f, 0x53, 0x69, 0x70, 0x43, 0x68, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65,
	0x6d, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x55, 0x72, 0x6c, 0x22, 0x75, 0x0a, 0x0f, 0x53, 0x69, 0x70, 0x43, 0x68, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x55, 0x72, 0x6c, 0x22, 0x6d, 0x0a, 0x0d, 0x53,
	0x69, 0x70, 0x43, 0x68, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65,
	0x70, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x22, 0x2d, 0x0a, 0x0d, 0x53, 0x69,
	0x70, 0x43, 0x68, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x0e, 0x53, 0x69, 0x70,
	0x43, 0x68, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x69, 0x70, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x73, 0x22, 0x4c,
	0x0a, 0x0f, 0x53, 0x69, 0x70, 0x43, 0x68, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x2f, 0x0a, 0x0f,
	0x53, 0x69, 0x70, 0x43, 0x68, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0x2d, 0x0a,
	0x0d, 0x53, 0x69, 0x70, 0x43, 0x68, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x44, 0x22, 0xa7, 0x01, 0x0a,
	0x0f, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x57, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x57, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x50, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x50, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x6f, 0x0a, 0x0f, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x57, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x50, 0x57, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56,
	0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x56,
	0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x0e, 0x53, 0x69, 0x70, 0x44, 0x65,
	0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x73, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x69,
	0x70, 0x44, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x69,
	0x70, 0x2e, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc9, 0x03, 0x0a, 0x09, 0x53, 0x69, 0x70, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x52, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x41, 0x64, 0x64, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x52, 0x41, 0x64, 0x64, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x52, 0x49, 0x53, 0x74, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x52, 0x49,
	0x53, 0x74, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x57, 0x44,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x57, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x2b, 0x0a, 0x0d, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x22, 0x2d, 0x0a, 0x0f, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x22,
	0x2c, 0x0a, 0x0e, 0x53, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x56, 0x69, 0x64, 0x6d, 0x67, 0x72, 0x49, 0x44, 0x32, 0xe1, 0x05,
	0x0a, 0x09, 0x53, 0x69, 0x70, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x53,
	0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x43, 0x68, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x53, 0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53,
	0x69, 0x70, 0x43, 0x68, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d,
	0x2e, 0x73, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x10, 0x53, 0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x43, 0x68, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x53, 0x69, 0x70, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53,
	0x69, 0x70, 0x43, 0x68, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x73,
	0x69, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x53,
	0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x2e,
	0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x43, 0x68, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x71, 0x1a, 0x0d, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x0f, 0x53, 0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x13, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x43, 0x68, 0x6e,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53,
	0x69, 0x70, 0x43, 0x68, 0x6e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35,
	0x0a, 0x0e, 0x53, 0x69, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x12, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x43, 0x68, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x0f, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53,
	0x69, 0x70, 0x44, 0x65, 0x76, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d,
	0x2e, 0x73, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x0f, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x14, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53,
	0x69, 0x70, 0x44, 0x65, 0x76, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x0d,
	0x2e, 0x73, 0x69, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0e, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x13, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x44, 0x65,
	0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0d, 0x53, 0x69,
	0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x12, 0x2e, 0x73, 0x69,
	0x70, 0x2e, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x0e, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x30, 0x0a, 0x0b, 0x53, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x13,
	0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x73, 0x69, 0x70, 0x2e, 0x53, 0x69, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x08, 0x5a, 0x06, 0x70, 0x62, 0x2f, 0x73, 0x69, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_proto_sip_proto_rawDescOnce sync.Once
	file_proto_sip_proto_rawDescData = file_proto_sip_proto_rawDesc
)

func file_proto_sip_proto_rawDescGZIP() []byte {
	file_proto_sip_proto_rawDescOnce.Do(func() {
		file_proto_sip_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_sip_proto_rawDescData)
	})
	return file_proto_sip_proto_rawDescData
}

var file_proto_sip_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_proto_sip_proto_goTypes = []interface{}{
	(*Response)(nil),         // 0: sip.Response
	(*PageInfo)(nil),         // 1: sip.PageInfo
	(*SipChannel)(nil),       // 2: sip.SipChannel
	(*SipInfo)(nil),          // 3: sip.SipInfo
	(*SipChnCreateReq)(nil),  // 4: sip.SipChnCreateReq
	(*SipChnUpdateReq)(nil),  // 5: sip.SipChnUpdateReq
	(*SipChnPlayReq)(nil),    // 6: sip.SipChnPlayReq
	(*SipChnStopReq)(nil),    // 7: sip.SipChnStopReq
	(*SipChnIndexReq)(nil),   // 8: sip.SipChnIndexReq
	(*SipChnIndexResp)(nil),  // 9: sip.SipChnIndexResp
	(*SipChnDeleteReq)(nil),  // 10: sip.SipChnDeleteReq
	(*SipChnReadReq)(nil),    // 11: sip.SipChnReadReq
	(*SipDevCreateReq)(nil),  // 12: sip.SipDevCreateReq
	(*SipDevUpdateReq)(nil),  // 13: sip.SipDevUpdateReq
	(*SipDevIndexReq)(nil),   // 14: sip.SipDevIndexReq
	(*SipDevIndexResp)(nil),  // 15: sip.SipDevIndexResp
	(*SipDevice)(nil),        // 16: sip.SipDevice
	(*SipDevReadReq)(nil),    // 17: sip.SipDevReadReq
	(*SipDevDeleteReq)(nil),  // 18: sip.SipDevDeleteReq
	(*SipInfoReadReq)(nil),   // 19: sip.SipInfoReadReq
	(*PageInfo_OrderBy)(nil), // 20: sip.PageInfo.OrderBy
}
var file_proto_sip_proto_depIdxs = []int32{
	20, // 0: sip.PageInfo.orders:type_name -> sip.PageInfo.OrderBy
	1,  // 1: sip.SipChnIndexReq.page:type_name -> sip.PageInfo
	2,  // 2: sip.SipChnIndexResp.list:type_name -> sip.SipChannel
	1,  // 3: sip.SipDevIndexReq.page:type_name -> sip.PageInfo
	16, // 4: sip.SipDevIndexResp.list:type_name -> sip.SipDevice
	4,  // 5: sip.SipManage.SipChannelCreate:input_type -> sip.SipChnCreateReq
	10, // 6: sip.SipManage.SipChannelDelete:input_type -> sip.SipChnDeleteReq
	5,  // 7: sip.SipManage.SipChannelUpdate:input_type -> sip.SipChnUpdateReq
	6,  // 8: sip.SipManage.SipChannelPlay:input_type -> sip.SipChnPlayReq
	7,  // 9: sip.SipManage.SipChannelStop:input_type -> sip.SipChnStopReq
	8,  // 10: sip.SipManage.SipChannelIndex:input_type -> sip.SipChnIndexReq
	11, // 11: sip.SipManage.SipChannelRead:input_type -> sip.SipChnReadReq
	12, // 12: sip.SipManage.SipDeviceCreate:input_type -> sip.SipDevCreateReq
	18, // 13: sip.SipManage.SipDeviceDelete:input_type -> sip.SipDevDeleteReq
	13, // 14: sip.SipManage.SipDeviceUpdate:input_type -> sip.SipDevUpdateReq
	14, // 15: sip.SipManage.SipDeviceIndex:input_type -> sip.SipDevIndexReq
	17, // 16: sip.SipManage.SipDeviceRead:input_type -> sip.SipDevReadReq
	19, // 17: sip.SipManage.SipInfoRead:input_type -> sip.SipInfoReadReq
	0,  // 18: sip.SipManage.SipChannelCreate:output_type -> sip.Response
	0,  // 19: sip.SipManage.SipChannelDelete:output_type -> sip.Response
	0,  // 20: sip.SipManage.SipChannelUpdate:output_type -> sip.Response
	0,  // 21: sip.SipManage.SipChannelPlay:output_type -> sip.Response
	0,  // 22: sip.SipManage.SipChannelStop:output_type -> sip.Response
	9,  // 23: sip.SipManage.SipChannelIndex:output_type -> sip.SipChnIndexResp
	2,  // 24: sip.SipManage.SipChannelRead:output_type -> sip.SipChannel
	0,  // 25: sip.SipManage.SipDeviceCreate:output_type -> sip.Response
	0,  // 26: sip.SipManage.SipDeviceDelete:output_type -> sip.Response
	0,  // 27: sip.SipManage.SipDeviceUpdate:output_type -> sip.Response
	15, // 28: sip.SipManage.SipDeviceIndex:output_type -> sip.SipDevIndexResp
	16, // 29: sip.SipManage.SipDeviceRead:output_type -> sip.SipDevice
	3,  // 30: sip.SipManage.SipInfoRead:output_type -> sip.SipInfo
	18, // [18:31] is the sub-list for method output_type
	5,  // [5:18] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_sip_proto_init() }
func file_proto_sip_proto_init() {
	if File_proto_sip_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_sip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipChnCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipChnUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipChnPlayReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipChnStopReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipChnIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipChnIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipChnDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipChnReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipDevCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipDevUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipDevIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipDevIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipDevReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipDevDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SipInfoReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_sip_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo_OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_sip_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_sip_proto_goTypes,
		DependencyIndexes: file_proto_sip_proto_depIdxs,
		MessageInfos:      file_proto_sip_proto_msgTypes,
	}.Build()
	File_proto_sip_proto = out.File
	file_proto_sip_proto_rawDesc = nil
	file_proto_sip_proto_goTypes = nil
	file_proto_sip_proto_depIdxs = nil
}
