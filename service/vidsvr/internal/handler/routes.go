// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	zlmediahooks "github.com/i-Things/things/service/vidsvr/internal/handler/zlmedia/hooks"
	"github.com/i-Things/things/service/vidsvr/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/onFlowReport",
				Handler: zlmediahooks.OnFlowReportHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onHttpAccess",
				Handler: zlmediahooks.OnHttpAccessHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onPlay",
				Handler: zlmediahooks.OnPlayHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onPublish",
				Handler: zlmediahooks.OnPublishHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onRecordMp4",
				Handler: zlmediahooks.OnRecordMp4Handler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onRtspRealm",
				Handler: zlmediahooks.OnRtspRealmHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onRtspAuth",
				Handler: zlmediahooks.OnRtspAuthHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onShellLogin",
				Handler: zlmediahooks.OnShellLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onStreamChanged",
				Handler: zlmediahooks.OnStreamChangedHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onStreamNoneReader",
				Handler: zlmediahooks.OnStreamNoneReaderHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onStreamNotFound",
				Handler: zlmediahooks.OnStreamNotFoundHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onServerStarted",
				Handler: zlmediahooks.OnServerStartedHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onServerKeepalive",
				Handler: zlmediahooks.OnServerKeepaliveHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/onRtpServerTimeout",
				Handler: zlmediahooks.OnRtpServerTimeoutHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api/v1/zlmedia/hooks"),
	)
}
