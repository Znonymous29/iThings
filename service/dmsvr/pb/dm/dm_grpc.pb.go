// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: proto/dm.proto

//import "proto/schemaInfo.proto";

package dm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceManage_RootCheck_FullMethodName                = "/dm.DeviceManage/rootCheck"
	DeviceManage_DeviceInfoCreate_FullMethodName         = "/dm.DeviceManage/deviceInfoCreate"
	DeviceManage_DeviceInfoUpdate_FullMethodName         = "/dm.DeviceManage/deviceInfoUpdate"
	DeviceManage_DeviceInfoDelete_FullMethodName         = "/dm.DeviceManage/deviceInfoDelete"
	DeviceManage_DeviceInfoIndex_FullMethodName          = "/dm.DeviceManage/deviceInfoIndex"
	DeviceManage_DeviceInfoMultiUpdate_FullMethodName    = "/dm.DeviceManage/DeviceInfoMultiUpdate"
	DeviceManage_DeviceInfoRead_FullMethodName           = "/dm.DeviceManage/deviceInfoRead"
	DeviceManage_DeviceGatewayMultiCreate_FullMethodName = "/dm.DeviceManage/deviceGatewayMultiCreate"
	DeviceManage_DeviceGatewayIndex_FullMethodName       = "/dm.DeviceManage/deviceGatewayIndex"
	DeviceManage_DeviceGatewayMultiDelete_FullMethodName = "/dm.DeviceManage/deviceGatewayMultiDelete"
	DeviceManage_DeviceInfoCount_FullMethodName          = "/dm.DeviceManage/deviceInfoCount"
	DeviceManage_DeviceTypeCount_FullMethodName          = "/dm.DeviceManage/deviceTypeCount"
	DeviceManage_DeviceCount_FullMethodName              = "/dm.DeviceManage/deviceCount"
)

// DeviceManageClient is the client API for DeviceManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceManageClient interface {
	// 鉴定是否是root账号(提供给mqtt broker)
	RootCheck(ctx context.Context, in *RootCheckReq, opts ...grpc.CallOption) (*Empty, error)
	// 新增设备
	DeviceInfoCreate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error)
	// 更新设备
	DeviceInfoUpdate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error)
	// 删除设备
	DeviceInfoDelete(ctx context.Context, in *DeviceInfoDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取设备信息列表
	DeviceInfoIndex(ctx context.Context, in *DeviceInfoIndexReq, opts ...grpc.CallOption) (*DeviceInfoIndexResp, error)
	// 批量更新设备状态
	DeviceInfoMultiUpdate(ctx context.Context, in *DeviceInfoMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取设备信息详情
	DeviceInfoRead(ctx context.Context, in *DeviceInfoReadReq, opts ...grpc.CallOption) (*DeviceInfo, error)
	// 绑定网关下子设备设备
	DeviceGatewayMultiCreate(ctx context.Context, in *DeviceGatewayMultiCreateReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取绑定信息的设备信息列表
	DeviceGatewayIndex(ctx context.Context, in *DeviceGatewayIndexReq, opts ...grpc.CallOption) (*DeviceGatewayIndexResp, error)
	// 删除网关下子设备
	DeviceGatewayMultiDelete(ctx context.Context, in *DeviceGatewayMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	// 设备计数
	DeviceInfoCount(ctx context.Context, in *DeviceInfoCountReq, opts ...grpc.CallOption) (*DeviceInfoCount, error)
	// 设备类型
	DeviceTypeCount(ctx context.Context, in *DeviceTypeCountReq, opts ...grpc.CallOption) (*DeviceTypeCountResp, error)
	DeviceCount(ctx context.Context, in *DeviceCountReq, opts ...grpc.CallOption) (*DeviceCountResp, error)
}

type deviceManageClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceManageClient(cc grpc.ClientConnInterface) DeviceManageClient {
	return &deviceManageClient{cc}
}

func (c *deviceManageClient) RootCheck(ctx context.Context, in *RootCheckReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceManage_RootCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoCreate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoUpdate(ctx context.Context, in *DeviceInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoDelete(ctx context.Context, in *DeviceInfoDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoIndex(ctx context.Context, in *DeviceInfoIndexReq, opts ...grpc.CallOption) (*DeviceInfoIndexResp, error) {
	out := new(DeviceInfoIndexResp)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoMultiUpdate(ctx context.Context, in *DeviceInfoMultiUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoMultiUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoRead(ctx context.Context, in *DeviceInfoReadReq, opts ...grpc.CallOption) (*DeviceInfo, error) {
	out := new(DeviceInfo)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceGatewayMultiCreate(ctx context.Context, in *DeviceGatewayMultiCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceGatewayMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceGatewayIndex(ctx context.Context, in *DeviceGatewayIndexReq, opts ...grpc.CallOption) (*DeviceGatewayIndexResp, error) {
	out := new(DeviceGatewayIndexResp)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceGatewayIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceGatewayMultiDelete(ctx context.Context, in *DeviceGatewayMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceGatewayMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceInfoCount(ctx context.Context, in *DeviceInfoCountReq, opts ...grpc.CallOption) (*DeviceInfoCount, error) {
	out := new(DeviceInfoCount)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceInfoCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceTypeCount(ctx context.Context, in *DeviceTypeCountReq, opts ...grpc.CallOption) (*DeviceTypeCountResp, error) {
	out := new(DeviceTypeCountResp)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceTypeCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManageClient) DeviceCount(ctx context.Context, in *DeviceCountReq, opts ...grpc.CallOption) (*DeviceCountResp, error) {
	out := new(DeviceCountResp)
	err := c.cc.Invoke(ctx, DeviceManage_DeviceCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManageServer is the server API for DeviceManage service.
// All implementations must embed UnimplementedDeviceManageServer
// for forward compatibility
type DeviceManageServer interface {
	// 鉴定是否是root账号(提供给mqtt broker)
	RootCheck(context.Context, *RootCheckReq) (*Empty, error)
	// 新增设备
	DeviceInfoCreate(context.Context, *DeviceInfo) (*Empty, error)
	// 更新设备
	DeviceInfoUpdate(context.Context, *DeviceInfo) (*Empty, error)
	// 删除设备
	DeviceInfoDelete(context.Context, *DeviceInfoDeleteReq) (*Empty, error)
	// 获取设备信息列表
	DeviceInfoIndex(context.Context, *DeviceInfoIndexReq) (*DeviceInfoIndexResp, error)
	// 批量更新设备状态
	DeviceInfoMultiUpdate(context.Context, *DeviceInfoMultiUpdateReq) (*Empty, error)
	// 获取设备信息详情
	DeviceInfoRead(context.Context, *DeviceInfoReadReq) (*DeviceInfo, error)
	// 绑定网关下子设备设备
	DeviceGatewayMultiCreate(context.Context, *DeviceGatewayMultiCreateReq) (*Empty, error)
	// 获取绑定信息的设备信息列表
	DeviceGatewayIndex(context.Context, *DeviceGatewayIndexReq) (*DeviceGatewayIndexResp, error)
	// 删除网关下子设备
	DeviceGatewayMultiDelete(context.Context, *DeviceGatewayMultiDeleteReq) (*Empty, error)
	// 设备计数
	DeviceInfoCount(context.Context, *DeviceInfoCountReq) (*DeviceInfoCount, error)
	// 设备类型
	DeviceTypeCount(context.Context, *DeviceTypeCountReq) (*DeviceTypeCountResp, error)
	DeviceCount(context.Context, *DeviceCountReq) (*DeviceCountResp, error)
	mustEmbedUnimplementedDeviceManageServer()
}

// UnimplementedDeviceManageServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceManageServer struct {
}

func (UnimplementedDeviceManageServer) RootCheck(context.Context, *RootCheckReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RootCheck not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoCreate(context.Context, *DeviceInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoCreate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoUpdate(context.Context, *DeviceInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoUpdate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoDelete(context.Context, *DeviceInfoDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoDelete not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoIndex(context.Context, *DeviceInfoIndexReq) (*DeviceInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoIndex not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoMultiUpdate(context.Context, *DeviceInfoMultiUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoMultiUpdate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoRead(context.Context, *DeviceInfoReadReq) (*DeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoRead not implemented")
}
func (UnimplementedDeviceManageServer) DeviceGatewayMultiCreate(context.Context, *DeviceGatewayMultiCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGatewayMultiCreate not implemented")
}
func (UnimplementedDeviceManageServer) DeviceGatewayIndex(context.Context, *DeviceGatewayIndexReq) (*DeviceGatewayIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGatewayIndex not implemented")
}
func (UnimplementedDeviceManageServer) DeviceGatewayMultiDelete(context.Context, *DeviceGatewayMultiDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceGatewayMultiDelete not implemented")
}
func (UnimplementedDeviceManageServer) DeviceInfoCount(context.Context, *DeviceInfoCountReq) (*DeviceInfoCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceInfoCount not implemented")
}
func (UnimplementedDeviceManageServer) DeviceTypeCount(context.Context, *DeviceTypeCountReq) (*DeviceTypeCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceTypeCount not implemented")
}
func (UnimplementedDeviceManageServer) DeviceCount(context.Context, *DeviceCountReq) (*DeviceCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceCount not implemented")
}
func (UnimplementedDeviceManageServer) mustEmbedUnimplementedDeviceManageServer() {}

// UnsafeDeviceManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceManageServer will
// result in compilation errors.
type UnsafeDeviceManageServer interface {
	mustEmbedUnimplementedDeviceManageServer()
}

func RegisterDeviceManageServer(s grpc.ServiceRegistrar, srv DeviceManageServer) {
	s.RegisterService(&DeviceManage_ServiceDesc, srv)
}

func _DeviceManage_RootCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RootCheckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).RootCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_RootCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).RootCheck(ctx, req.(*RootCheckReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoCreate(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoUpdate(ctx, req.(*DeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoDelete(ctx, req.(*DeviceInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoIndex(ctx, req.(*DeviceInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoMultiUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoMultiUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoMultiUpdate(ctx, req.(*DeviceInfoMultiUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoRead(ctx, req.(*DeviceInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceGatewayMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGatewayMultiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceGatewayMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceGatewayMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceGatewayMultiCreate(ctx, req.(*DeviceGatewayMultiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceGatewayIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGatewayIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceGatewayIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceGatewayIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceGatewayIndex(ctx, req.(*DeviceGatewayIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceGatewayMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceGatewayMultiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceGatewayMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceGatewayMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceGatewayMultiDelete(ctx, req.(*DeviceGatewayMultiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceInfoCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceInfoCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceInfoCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceInfoCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceInfoCount(ctx, req.(*DeviceInfoCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceTypeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceTypeCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceTypeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceTypeCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceTypeCount(ctx, req.(*DeviceTypeCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManage_DeviceCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManageServer).DeviceCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManage_DeviceCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManageServer).DeviceCount(ctx, req.(*DeviceCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceManage_ServiceDesc is the grpc.ServiceDesc for DeviceManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceManage",
	HandlerType: (*DeviceManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rootCheck",
			Handler:    _DeviceManage_RootCheck_Handler,
		},
		{
			MethodName: "deviceInfoCreate",
			Handler:    _DeviceManage_DeviceInfoCreate_Handler,
		},
		{
			MethodName: "deviceInfoUpdate",
			Handler:    _DeviceManage_DeviceInfoUpdate_Handler,
		},
		{
			MethodName: "deviceInfoDelete",
			Handler:    _DeviceManage_DeviceInfoDelete_Handler,
		},
		{
			MethodName: "deviceInfoIndex",
			Handler:    _DeviceManage_DeviceInfoIndex_Handler,
		},
		{
			MethodName: "DeviceInfoMultiUpdate",
			Handler:    _DeviceManage_DeviceInfoMultiUpdate_Handler,
		},
		{
			MethodName: "deviceInfoRead",
			Handler:    _DeviceManage_DeviceInfoRead_Handler,
		},
		{
			MethodName: "deviceGatewayMultiCreate",
			Handler:    _DeviceManage_DeviceGatewayMultiCreate_Handler,
		},
		{
			MethodName: "deviceGatewayIndex",
			Handler:    _DeviceManage_DeviceGatewayIndex_Handler,
		},
		{
			MethodName: "deviceGatewayMultiDelete",
			Handler:    _DeviceManage_DeviceGatewayMultiDelete_Handler,
		},
		{
			MethodName: "deviceInfoCount",
			Handler:    _DeviceManage_DeviceInfoCount_Handler,
		},
		{
			MethodName: "deviceTypeCount",
			Handler:    _DeviceManage_DeviceTypeCount_Handler,
		},
		{
			MethodName: "deviceCount",
			Handler:    _DeviceManage_DeviceCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	ProductManage_ProductInfoCreate_FullMethodName        = "/dm.ProductManage/productInfoCreate"
	ProductManage_ProductInfoUpdate_FullMethodName        = "/dm.ProductManage/productInfoUpdate"
	ProductManage_ProductInfoDelete_FullMethodName        = "/dm.ProductManage/productInfoDelete"
	ProductManage_ProductInfoIndex_FullMethodName         = "/dm.ProductManage/productInfoIndex"
	ProductManage_ProductInfoRead_FullMethodName          = "/dm.ProductManage/productInfoRead"
	ProductManage_ProductSchemaUpdate_FullMethodName      = "/dm.ProductManage/productSchemaUpdate"
	ProductManage_ProductSchemaCreate_FullMethodName      = "/dm.ProductManage/productSchemaCreate"
	ProductManage_ProductSchemaMultiCreate_FullMethodName = "/dm.ProductManage/productSchemaMultiCreate"
	ProductManage_ProductSchemaDelete_FullMethodName      = "/dm.ProductManage/productSchemaDelete"
	ProductManage_ProductSchemaIndex_FullMethodName       = "/dm.ProductManage/productSchemaIndex"
	ProductManage_ProductSchemaTslImport_FullMethodName   = "/dm.ProductManage/productSchemaTslImport"
	ProductManage_ProductSchemaTslRead_FullMethodName     = "/dm.ProductManage/productSchemaTslRead"
	ProductManage_ProductCustomRead_FullMethodName        = "/dm.ProductManage/productCustomRead"
	ProductManage_ProductCustomUpdate_FullMethodName      = "/dm.ProductManage/productCustomUpdate"
	ProductManage_ProductCategoryCreate_FullMethodName    = "/dm.ProductManage/productCategoryCreate"
	ProductManage_ProductCategoryUpdate_FullMethodName    = "/dm.ProductManage/productCategoryUpdate"
	ProductManage_ProductCategoryDelete_FullMethodName    = "/dm.ProductManage/productCategoryDelete"
	ProductManage_ProductCategoryIndex_FullMethodName     = "/dm.ProductManage/productCategoryIndex"
	ProductManage_ProductCategoryRead_FullMethodName      = "/dm.ProductManage/productCategoryRead"
)

// ProductManageClient is the client API for ProductManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductManageClient interface {
	// 新增产品
	ProductInfoCreate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Empty, error)
	// 更新产品
	ProductInfoUpdate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Empty, error)
	// 删除产品
	ProductInfoDelete(ctx context.Context, in *ProductInfoDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取产品信息列表
	ProductInfoIndex(ctx context.Context, in *ProductInfoIndexReq, opts ...grpc.CallOption) (*ProductInfoIndexResp, error)
	// 获取产品信息详情
	ProductInfoRead(ctx context.Context, in *ProductInfoReadReq, opts ...grpc.CallOption) (*ProductInfo, error)
	// 更新产品物模型
	ProductSchemaUpdate(ctx context.Context, in *ProductSchemaUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	// 新增产品
	ProductSchemaCreate(ctx context.Context, in *ProductSchemaCreateReq, opts ...grpc.CallOption) (*Empty, error)
	// 批量新增物模型,只新增没有的,已有的不处理
	ProductSchemaMultiCreate(ctx context.Context, in *ProductSchemaMultiCreateReq, opts ...grpc.CallOption) (*Empty, error)
	// 删除产品
	ProductSchemaDelete(ctx context.Context, in *ProductSchemaDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取产品信息列表
	ProductSchemaIndex(ctx context.Context, in *ProductSchemaIndexReq, opts ...grpc.CallOption) (*ProductSchemaIndexResp, error)
	// 删除产品
	ProductSchemaTslImport(ctx context.Context, in *ProductSchemaTslImportReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取产品信息列表
	ProductSchemaTslRead(ctx context.Context, in *ProductSchemaTslReadReq, opts ...grpc.CallOption) (*ProductSchemaTslReadResp, error)
	// 脚本管理
	ProductCustomRead(ctx context.Context, in *ProductCustomReadReq, opts ...grpc.CallOption) (*ProductCustom, error)
	ProductCustomUpdate(ctx context.Context, in *ProductCustom, opts ...grpc.CallOption) (*Empty, error)
	// 新增产品
	ProductCategoryCreate(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*WithID, error)
	// 更新产品
	ProductCategoryUpdate(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*Empty, error)
	// 删除产品
	ProductCategoryDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	// 获取产品信息列表
	ProductCategoryIndex(ctx context.Context, in *ProductCategoryIndexReq, opts ...grpc.CallOption) (*ProductCategoryIndexResp, error)
	// 获取产品信息详情
	ProductCategoryRead(ctx context.Context, in *ProductCategoryReadReq, opts ...grpc.CallOption) (*ProductCategory, error)
}

type productManageClient struct {
	cc grpc.ClientConnInterface
}

func NewProductManageClient(cc grpc.ClientConnInterface) ProductManageClient {
	return &productManageClient{cc}
}

func (c *productManageClient) ProductInfoCreate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoUpdate(ctx context.Context, in *ProductInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoDelete(ctx context.Context, in *ProductInfoDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoIndex(ctx context.Context, in *ProductInfoIndexReq, opts ...grpc.CallOption) (*ProductInfoIndexResp, error) {
	out := new(ProductInfoIndexResp)
	err := c.cc.Invoke(ctx, ProductManage_ProductInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductInfoRead(ctx context.Context, in *ProductInfoReadReq, opts ...grpc.CallOption) (*ProductInfo, error) {
	out := new(ProductInfo)
	err := c.cc.Invoke(ctx, ProductManage_ProductInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaUpdate(ctx context.Context, in *ProductSchemaUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaCreate(ctx context.Context, in *ProductSchemaCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaMultiCreate(ctx context.Context, in *ProductSchemaMultiCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaDelete(ctx context.Context, in *ProductSchemaDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaIndex(ctx context.Context, in *ProductSchemaIndexReq, opts ...grpc.CallOption) (*ProductSchemaIndexResp, error) {
	out := new(ProductSchemaIndexResp)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaTslImport(ctx context.Context, in *ProductSchemaTslImportReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaTslImport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductSchemaTslRead(ctx context.Context, in *ProductSchemaTslReadReq, opts ...grpc.CallOption) (*ProductSchemaTslReadResp, error) {
	out := new(ProductSchemaTslReadResp)
	err := c.cc.Invoke(ctx, ProductManage_ProductSchemaTslRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCustomRead(ctx context.Context, in *ProductCustomReadReq, opts ...grpc.CallOption) (*ProductCustom, error) {
	out := new(ProductCustom)
	err := c.cc.Invoke(ctx, ProductManage_ProductCustomRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCustomUpdate(ctx context.Context, in *ProductCustom, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductCustomUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategoryCreate(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, ProductManage_ProductCategoryCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategoryUpdate(ctx context.Context, in *ProductCategory, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductCategoryUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategoryDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProductManage_ProductCategoryDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategoryIndex(ctx context.Context, in *ProductCategoryIndexReq, opts ...grpc.CallOption) (*ProductCategoryIndexResp, error) {
	out := new(ProductCategoryIndexResp)
	err := c.cc.Invoke(ctx, ProductManage_ProductCategoryIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManageClient) ProductCategoryRead(ctx context.Context, in *ProductCategoryReadReq, opts ...grpc.CallOption) (*ProductCategory, error) {
	out := new(ProductCategory)
	err := c.cc.Invoke(ctx, ProductManage_ProductCategoryRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductManageServer is the server API for ProductManage service.
// All implementations must embed UnimplementedProductManageServer
// for forward compatibility
type ProductManageServer interface {
	// 新增产品
	ProductInfoCreate(context.Context, *ProductInfo) (*Empty, error)
	// 更新产品
	ProductInfoUpdate(context.Context, *ProductInfo) (*Empty, error)
	// 删除产品
	ProductInfoDelete(context.Context, *ProductInfoDeleteReq) (*Empty, error)
	// 获取产品信息列表
	ProductInfoIndex(context.Context, *ProductInfoIndexReq) (*ProductInfoIndexResp, error)
	// 获取产品信息详情
	ProductInfoRead(context.Context, *ProductInfoReadReq) (*ProductInfo, error)
	// 更新产品物模型
	ProductSchemaUpdate(context.Context, *ProductSchemaUpdateReq) (*Empty, error)
	// 新增产品
	ProductSchemaCreate(context.Context, *ProductSchemaCreateReq) (*Empty, error)
	// 批量新增物模型,只新增没有的,已有的不处理
	ProductSchemaMultiCreate(context.Context, *ProductSchemaMultiCreateReq) (*Empty, error)
	// 删除产品
	ProductSchemaDelete(context.Context, *ProductSchemaDeleteReq) (*Empty, error)
	// 获取产品信息列表
	ProductSchemaIndex(context.Context, *ProductSchemaIndexReq) (*ProductSchemaIndexResp, error)
	// 删除产品
	ProductSchemaTslImport(context.Context, *ProductSchemaTslImportReq) (*Empty, error)
	// 获取产品信息列表
	ProductSchemaTslRead(context.Context, *ProductSchemaTslReadReq) (*ProductSchemaTslReadResp, error)
	// 脚本管理
	ProductCustomRead(context.Context, *ProductCustomReadReq) (*ProductCustom, error)
	ProductCustomUpdate(context.Context, *ProductCustom) (*Empty, error)
	// 新增产品
	ProductCategoryCreate(context.Context, *ProductCategory) (*WithID, error)
	// 更新产品
	ProductCategoryUpdate(context.Context, *ProductCategory) (*Empty, error)
	// 删除产品
	ProductCategoryDelete(context.Context, *WithID) (*Empty, error)
	// 获取产品信息列表
	ProductCategoryIndex(context.Context, *ProductCategoryIndexReq) (*ProductCategoryIndexResp, error)
	// 获取产品信息详情
	ProductCategoryRead(context.Context, *ProductCategoryReadReq) (*ProductCategory, error)
	mustEmbedUnimplementedProductManageServer()
}

// UnimplementedProductManageServer must be embedded to have forward compatible implementations.
type UnimplementedProductManageServer struct {
}

func (UnimplementedProductManageServer) ProductInfoCreate(context.Context, *ProductInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoCreate not implemented")
}
func (UnimplementedProductManageServer) ProductInfoUpdate(context.Context, *ProductInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductInfoDelete(context.Context, *ProductInfoDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoDelete not implemented")
}
func (UnimplementedProductManageServer) ProductInfoIndex(context.Context, *ProductInfoIndexReq) (*ProductInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoIndex not implemented")
}
func (UnimplementedProductManageServer) ProductInfoRead(context.Context, *ProductInfoReadReq) (*ProductInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductInfoRead not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaUpdate(context.Context, *ProductSchemaUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaCreate(context.Context, *ProductSchemaCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaCreate not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaMultiCreate(context.Context, *ProductSchemaMultiCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaMultiCreate not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaDelete(context.Context, *ProductSchemaDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaDelete not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaIndex(context.Context, *ProductSchemaIndexReq) (*ProductSchemaIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaIndex not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaTslImport(context.Context, *ProductSchemaTslImportReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaTslImport not implemented")
}
func (UnimplementedProductManageServer) ProductSchemaTslRead(context.Context, *ProductSchemaTslReadReq) (*ProductSchemaTslReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductSchemaTslRead not implemented")
}
func (UnimplementedProductManageServer) ProductCustomRead(context.Context, *ProductCustomReadReq) (*ProductCustom, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCustomRead not implemented")
}
func (UnimplementedProductManageServer) ProductCustomUpdate(context.Context, *ProductCustom) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCustomUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductCategoryCreate(context.Context, *ProductCategory) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryCreate not implemented")
}
func (UnimplementedProductManageServer) ProductCategoryUpdate(context.Context, *ProductCategory) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryUpdate not implemented")
}
func (UnimplementedProductManageServer) ProductCategoryDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryDelete not implemented")
}
func (UnimplementedProductManageServer) ProductCategoryIndex(context.Context, *ProductCategoryIndexReq) (*ProductCategoryIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryIndex not implemented")
}
func (UnimplementedProductManageServer) ProductCategoryRead(context.Context, *ProductCategoryReadReq) (*ProductCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProductCategoryRead not implemented")
}
func (UnimplementedProductManageServer) mustEmbedUnimplementedProductManageServer() {}

// UnsafeProductManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductManageServer will
// result in compilation errors.
type UnsafeProductManageServer interface {
	mustEmbedUnimplementedProductManageServer()
}

func RegisterProductManageServer(s grpc.ServiceRegistrar, srv ProductManageServer) {
	s.RegisterService(&ProductManage_ServiceDesc, srv)
}

func _ProductManage_ProductInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoCreate(ctx, req.(*ProductInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoUpdate(ctx, req.(*ProductInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoDelete(ctx, req.(*ProductInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoIndex(ctx, req.(*ProductInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductInfoRead(ctx, req.(*ProductInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaUpdate(ctx, req.(*ProductSchemaUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaCreate(ctx, req.(*ProductSchemaCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaMultiCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaMultiCreate(ctx, req.(*ProductSchemaMultiCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaDelete(ctx, req.(*ProductSchemaDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaIndex(ctx, req.(*ProductSchemaIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaTslImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaTslImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaTslImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaTslImport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaTslImport(ctx, req.(*ProductSchemaTslImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductSchemaTslRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductSchemaTslReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductSchemaTslRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductSchemaTslRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductSchemaTslRead(ctx, req.(*ProductSchemaTslReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCustomRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCustomReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCustomRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductCustomRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCustomRead(ctx, req.(*ProductCustomReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCustomUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCustom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCustomUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductCustomUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCustomUpdate(ctx, req.(*ProductCustom))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategoryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategoryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductCategoryCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategoryCreate(ctx, req.(*ProductCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategoryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategoryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductCategoryUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategoryUpdate(ctx, req.(*ProductCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategoryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategoryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductCategoryDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategoryDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategoryIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategoryIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductCategoryIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategoryIndex(ctx, req.(*ProductCategoryIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManage_ProductCategoryRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductCategoryReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManageServer).ProductCategoryRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductManage_ProductCategoryRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManageServer).ProductCategoryRead(ctx, req.(*ProductCategoryReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductManage_ServiceDesc is the grpc.ServiceDesc for ProductManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.ProductManage",
	HandlerType: (*ProductManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "productInfoCreate",
			Handler:    _ProductManage_ProductInfoCreate_Handler,
		},
		{
			MethodName: "productInfoUpdate",
			Handler:    _ProductManage_ProductInfoUpdate_Handler,
		},
		{
			MethodName: "productInfoDelete",
			Handler:    _ProductManage_ProductInfoDelete_Handler,
		},
		{
			MethodName: "productInfoIndex",
			Handler:    _ProductManage_ProductInfoIndex_Handler,
		},
		{
			MethodName: "productInfoRead",
			Handler:    _ProductManage_ProductInfoRead_Handler,
		},
		{
			MethodName: "productSchemaUpdate",
			Handler:    _ProductManage_ProductSchemaUpdate_Handler,
		},
		{
			MethodName: "productSchemaCreate",
			Handler:    _ProductManage_ProductSchemaCreate_Handler,
		},
		{
			MethodName: "productSchemaMultiCreate",
			Handler:    _ProductManage_ProductSchemaMultiCreate_Handler,
		},
		{
			MethodName: "productSchemaDelete",
			Handler:    _ProductManage_ProductSchemaDelete_Handler,
		},
		{
			MethodName: "productSchemaIndex",
			Handler:    _ProductManage_ProductSchemaIndex_Handler,
		},
		{
			MethodName: "productSchemaTslImport",
			Handler:    _ProductManage_ProductSchemaTslImport_Handler,
		},
		{
			MethodName: "productSchemaTslRead",
			Handler:    _ProductManage_ProductSchemaTslRead_Handler,
		},
		{
			MethodName: "productCustomRead",
			Handler:    _ProductManage_ProductCustomRead_Handler,
		},
		{
			MethodName: "productCustomUpdate",
			Handler:    _ProductManage_ProductCustomUpdate_Handler,
		},
		{
			MethodName: "productCategoryCreate",
			Handler:    _ProductManage_ProductCategoryCreate_Handler,
		},
		{
			MethodName: "productCategoryUpdate",
			Handler:    _ProductManage_ProductCategoryUpdate_Handler,
		},
		{
			MethodName: "productCategoryDelete",
			Handler:    _ProductManage_ProductCategoryDelete_Handler,
		},
		{
			MethodName: "productCategoryIndex",
			Handler:    _ProductManage_ProductCategoryIndex_Handler,
		},
		{
			MethodName: "productCategoryRead",
			Handler:    _ProductManage_ProductCategoryRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	SchemaManage_CommonSchemaUpdate_FullMethodName = "/dm.SchemaManage/commonSchemaUpdate"
	SchemaManage_CommonSchemaCreate_FullMethodName = "/dm.SchemaManage/commonSchemaCreate"
	SchemaManage_CommonSchemaDelete_FullMethodName = "/dm.SchemaManage/commonSchemaDelete"
	SchemaManage_CommonSchemaIndex_FullMethodName  = "/dm.SchemaManage/commonSchemaIndex"
)

// SchemaManageClient is the client API for SchemaManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchemaManageClient interface {
	// 更新产品物模型
	CommonSchemaUpdate(ctx context.Context, in *CommonSchemaUpdateReq, opts ...grpc.CallOption) (*Empty, error)
	// 新增产品
	CommonSchemaCreate(ctx context.Context, in *CommonSchemaCreateReq, opts ...grpc.CallOption) (*Empty, error)
	// 删除产品
	CommonSchemaDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	// 获取产品信息列表
	CommonSchemaIndex(ctx context.Context, in *CommonSchemaIndexReq, opts ...grpc.CallOption) (*CommonSchemaIndexResp, error)
}

type schemaManageClient struct {
	cc grpc.ClientConnInterface
}

func NewSchemaManageClient(cc grpc.ClientConnInterface) SchemaManageClient {
	return &schemaManageClient{cc}
}

func (c *schemaManageClient) CommonSchemaUpdate(ctx context.Context, in *CommonSchemaUpdateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SchemaManage_CommonSchemaUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaManageClient) CommonSchemaCreate(ctx context.Context, in *CommonSchemaCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SchemaManage_CommonSchemaCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaManageClient) CommonSchemaDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, SchemaManage_CommonSchemaDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schemaManageClient) CommonSchemaIndex(ctx context.Context, in *CommonSchemaIndexReq, opts ...grpc.CallOption) (*CommonSchemaIndexResp, error) {
	out := new(CommonSchemaIndexResp)
	err := c.cc.Invoke(ctx, SchemaManage_CommonSchemaIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaManageServer is the server API for SchemaManage service.
// All implementations must embed UnimplementedSchemaManageServer
// for forward compatibility
type SchemaManageServer interface {
	// 更新产品物模型
	CommonSchemaUpdate(context.Context, *CommonSchemaUpdateReq) (*Empty, error)
	// 新增产品
	CommonSchemaCreate(context.Context, *CommonSchemaCreateReq) (*Empty, error)
	// 删除产品
	CommonSchemaDelete(context.Context, *WithID) (*Empty, error)
	// 获取产品信息列表
	CommonSchemaIndex(context.Context, *CommonSchemaIndexReq) (*CommonSchemaIndexResp, error)
	mustEmbedUnimplementedSchemaManageServer()
}

// UnimplementedSchemaManageServer must be embedded to have forward compatible implementations.
type UnimplementedSchemaManageServer struct {
}

func (UnimplementedSchemaManageServer) CommonSchemaUpdate(context.Context, *CommonSchemaUpdateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonSchemaUpdate not implemented")
}
func (UnimplementedSchemaManageServer) CommonSchemaCreate(context.Context, *CommonSchemaCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonSchemaCreate not implemented")
}
func (UnimplementedSchemaManageServer) CommonSchemaDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonSchemaDelete not implemented")
}
func (UnimplementedSchemaManageServer) CommonSchemaIndex(context.Context, *CommonSchemaIndexReq) (*CommonSchemaIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonSchemaIndex not implemented")
}
func (UnimplementedSchemaManageServer) mustEmbedUnimplementedSchemaManageServer() {}

// UnsafeSchemaManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchemaManageServer will
// result in compilation errors.
type UnsafeSchemaManageServer interface {
	mustEmbedUnimplementedSchemaManageServer()
}

func RegisterSchemaManageServer(s grpc.ServiceRegistrar, srv SchemaManageServer) {
	s.RegisterService(&SchemaManage_ServiceDesc, srv)
}

func _SchemaManage_CommonSchemaUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonSchemaUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManageServer).CommonSchemaUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaManage_CommonSchemaUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManageServer).CommonSchemaUpdate(ctx, req.(*CommonSchemaUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaManage_CommonSchemaCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonSchemaCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManageServer).CommonSchemaCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaManage_CommonSchemaCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManageServer).CommonSchemaCreate(ctx, req.(*CommonSchemaCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaManage_CommonSchemaDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManageServer).CommonSchemaDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaManage_CommonSchemaDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManageServer).CommonSchemaDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchemaManage_CommonSchemaIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonSchemaIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaManageServer).CommonSchemaIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SchemaManage_CommonSchemaIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaManageServer).CommonSchemaIndex(ctx, req.(*CommonSchemaIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SchemaManage_ServiceDesc is the grpc.ServiceDesc for SchemaManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchemaManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.SchemaManage",
	HandlerType: (*SchemaManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "commonSchemaUpdate",
			Handler:    _SchemaManage_CommonSchemaUpdate_Handler,
		},
		{
			MethodName: "commonSchemaCreate",
			Handler:    _SchemaManage_CommonSchemaCreate_Handler,
		},
		{
			MethodName: "commonSchemaDelete",
			Handler:    _SchemaManage_CommonSchemaDelete_Handler,
		},
		{
			MethodName: "commonSchemaIndex",
			Handler:    _SchemaManage_CommonSchemaIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	ProtocolManage_ProtocolInfoIndex_FullMethodName  = "/dm.ProtocolManage/protocolInfoIndex"
	ProtocolManage_ProtocolInfoRead_FullMethodName   = "/dm.ProtocolManage/protocolInfoRead"
	ProtocolManage_ProtocolInfoCreate_FullMethodName = "/dm.ProtocolManage/protocolInfoCreate"
	ProtocolManage_ProtocolInfoUpdate_FullMethodName = "/dm.ProtocolManage/protocolInfoUpdate"
	ProtocolManage_ProtocolInfoDelete_FullMethodName = "/dm.ProtocolManage/protocolInfoDelete"
)

// ProtocolManageClient is the client API for ProtocolManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtocolManageClient interface {
	// 协议列表
	ProtocolInfoIndex(ctx context.Context, in *ProtocolInfoIndexReq, opts ...grpc.CallOption) (*ProtocolInfoIndexResp, error)
	// 协议详情
	ProtocolInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*ProtocolInfo, error)
	// 协议创建
	ProtocolInfoCreate(ctx context.Context, in *ProtocolInfo, opts ...grpc.CallOption) (*WithID, error)
	// 协议更新
	ProtocolInfoUpdate(ctx context.Context, in *ProtocolInfo, opts ...grpc.CallOption) (*Empty, error)
	// 协议删除
	ProtocolInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
}

type protocolManageClient struct {
	cc grpc.ClientConnInterface
}

func NewProtocolManageClient(cc grpc.ClientConnInterface) ProtocolManageClient {
	return &protocolManageClient{cc}
}

func (c *protocolManageClient) ProtocolInfoIndex(ctx context.Context, in *ProtocolInfoIndexReq, opts ...grpc.CallOption) (*ProtocolInfoIndexResp, error) {
	out := new(ProtocolInfoIndexResp)
	err := c.cc.Invoke(ctx, ProtocolManage_ProtocolInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolInfoRead(ctx context.Context, in *WithIDCode, opts ...grpc.CallOption) (*ProtocolInfo, error) {
	out := new(ProtocolInfo)
	err := c.cc.Invoke(ctx, ProtocolManage_ProtocolInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolInfoCreate(ctx context.Context, in *ProtocolInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, ProtocolManage_ProtocolInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolInfoUpdate(ctx context.Context, in *ProtocolInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProtocolManage_ProtocolInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protocolManageClient) ProtocolInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, ProtocolManage_ProtocolInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtocolManageServer is the server API for ProtocolManage service.
// All implementations must embed UnimplementedProtocolManageServer
// for forward compatibility
type ProtocolManageServer interface {
	// 协议列表
	ProtocolInfoIndex(context.Context, *ProtocolInfoIndexReq) (*ProtocolInfoIndexResp, error)
	// 协议详情
	ProtocolInfoRead(context.Context, *WithIDCode) (*ProtocolInfo, error)
	// 协议创建
	ProtocolInfoCreate(context.Context, *ProtocolInfo) (*WithID, error)
	// 协议更新
	ProtocolInfoUpdate(context.Context, *ProtocolInfo) (*Empty, error)
	// 协议删除
	ProtocolInfoDelete(context.Context, *WithID) (*Empty, error)
	mustEmbedUnimplementedProtocolManageServer()
}

// UnimplementedProtocolManageServer must be embedded to have forward compatible implementations.
type UnimplementedProtocolManageServer struct {
}

func (UnimplementedProtocolManageServer) ProtocolInfoIndex(context.Context, *ProtocolInfoIndexReq) (*ProtocolInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolInfoIndex not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolInfoRead(context.Context, *WithIDCode) (*ProtocolInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolInfoRead not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolInfoCreate(context.Context, *ProtocolInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolInfoCreate not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolInfoUpdate(context.Context, *ProtocolInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolInfoUpdate not implemented")
}
func (UnimplementedProtocolManageServer) ProtocolInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProtocolInfoDelete not implemented")
}
func (UnimplementedProtocolManageServer) mustEmbedUnimplementedProtocolManageServer() {}

// UnsafeProtocolManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtocolManageServer will
// result in compilation errors.
type UnsafeProtocolManageServer interface {
	mustEmbedUnimplementedProtocolManageServer()
}

func RegisterProtocolManageServer(s grpc.ServiceRegistrar, srv ProtocolManageServer) {
	s.RegisterService(&ProtocolManage_ServiceDesc, srv)
}

func _ProtocolManage_ProtocolInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtocolManage_ProtocolInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolInfoIndex(ctx, req.(*ProtocolInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithIDCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtocolManage_ProtocolInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolInfoRead(ctx, req.(*WithIDCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtocolManage_ProtocolInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolInfoCreate(ctx, req.(*ProtocolInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProtocolInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtocolManage_ProtocolInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolInfoUpdate(ctx, req.(*ProtocolInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtocolManage_ProtocolInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtocolManageServer).ProtocolInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProtocolManage_ProtocolInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtocolManageServer).ProtocolInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtocolManage_ServiceDesc is the grpc.ServiceDesc for ProtocolManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtocolManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.ProtocolManage",
	HandlerType: (*ProtocolManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "protocolInfoIndex",
			Handler:    _ProtocolManage_ProtocolInfoIndex_Handler,
		},
		{
			MethodName: "protocolInfoRead",
			Handler:    _ProtocolManage_ProtocolInfoRead_Handler,
		},
		{
			MethodName: "protocolInfoCreate",
			Handler:    _ProtocolManage_ProtocolInfoCreate_Handler,
		},
		{
			MethodName: "protocolInfoUpdate",
			Handler:    _ProtocolManage_ProtocolInfoUpdate_Handler,
		},
		{
			MethodName: "protocolInfoDelete",
			Handler:    _ProtocolManage_ProtocolInfoDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	DeviceGroup_GroupInfoCreate_FullMethodName        = "/dm.DeviceGroup/groupInfoCreate"
	DeviceGroup_GroupInfoIndex_FullMethodName         = "/dm.DeviceGroup/groupInfoIndex"
	DeviceGroup_GroupInfoRead_FullMethodName          = "/dm.DeviceGroup/groupInfoRead"
	DeviceGroup_GroupInfoUpdate_FullMethodName        = "/dm.DeviceGroup/groupInfoUpdate"
	DeviceGroup_GroupInfoDelete_FullMethodName        = "/dm.DeviceGroup/groupInfoDelete"
	DeviceGroup_GroupDeviceMultiCreate_FullMethodName = "/dm.DeviceGroup/groupDeviceMultiCreate"
	DeviceGroup_GroupDeviceMultiUpdate_FullMethodName = "/dm.DeviceGroup/groupDeviceMultiUpdate"
	DeviceGroup_GroupDeviceIndex_FullMethodName       = "/dm.DeviceGroup/groupDeviceIndex"
	DeviceGroup_GroupDeviceMultiDelete_FullMethodName = "/dm.DeviceGroup/groupDeviceMultiDelete"
)

// DeviceGroupClient is the client API for DeviceGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceGroupClient interface {
	// 创建分组
	GroupInfoCreate(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*WithID, error)
	// 获取分组信息列表
	GroupInfoIndex(ctx context.Context, in *GroupInfoIndexReq, opts ...grpc.CallOption) (*GroupInfoIndexResp, error)
	// 获取分组信息详情
	GroupInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*GroupInfo, error)
	// 更新分组
	GroupInfoUpdate(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Empty, error)
	// 删除分组
	GroupInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	// 创建分组设备
	GroupDeviceMultiCreate(ctx context.Context, in *GroupDeviceMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	// 更新分组设备
	GroupDeviceMultiUpdate(ctx context.Context, in *GroupDeviceMultiSaveReq, opts ...grpc.CallOption) (*Empty, error)
	// 获取分组设备信息列表
	GroupDeviceIndex(ctx context.Context, in *GroupDeviceIndexReq, opts ...grpc.CallOption) (*GroupDeviceIndexResp, error)
	// 删除分组设备
	GroupDeviceMultiDelete(ctx context.Context, in *GroupDeviceMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error)
}

type deviceGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceGroupClient(cc grpc.ClientConnInterface) DeviceGroupClient {
	return &deviceGroupClient{cc}
}

func (c *deviceGroupClient) GroupInfoCreate(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoIndex(ctx context.Context, in *GroupInfoIndexReq, opts ...grpc.CallOption) (*GroupInfoIndexResp, error) {
	out := new(GroupInfoIndexResp)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*GroupInfo, error) {
	out := new(GroupInfo)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoUpdate(ctx context.Context, in *GroupInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceMultiCreate(ctx context.Context, in *GroupDeviceMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupDeviceMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceMultiUpdate(ctx context.Context, in *GroupDeviceMultiSaveReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupDeviceMultiUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceIndex(ctx context.Context, in *GroupDeviceIndexReq, opts ...grpc.CallOption) (*GroupDeviceIndexResp, error) {
	out := new(GroupDeviceIndexResp)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupDeviceIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceGroupClient) GroupDeviceMultiDelete(ctx context.Context, in *GroupDeviceMultiDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceGroup_GroupDeviceMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceGroupServer is the server API for DeviceGroup service.
// All implementations must embed UnimplementedDeviceGroupServer
// for forward compatibility
type DeviceGroupServer interface {
	// 创建分组
	GroupInfoCreate(context.Context, *GroupInfo) (*WithID, error)
	// 获取分组信息列表
	GroupInfoIndex(context.Context, *GroupInfoIndexReq) (*GroupInfoIndexResp, error)
	// 获取分组信息详情
	GroupInfoRead(context.Context, *WithID) (*GroupInfo, error)
	// 更新分组
	GroupInfoUpdate(context.Context, *GroupInfo) (*Empty, error)
	// 删除分组
	GroupInfoDelete(context.Context, *WithID) (*Empty, error)
	// 创建分组设备
	GroupDeviceMultiCreate(context.Context, *GroupDeviceMultiSaveReq) (*Empty, error)
	// 更新分组设备
	GroupDeviceMultiUpdate(context.Context, *GroupDeviceMultiSaveReq) (*Empty, error)
	// 获取分组设备信息列表
	GroupDeviceIndex(context.Context, *GroupDeviceIndexReq) (*GroupDeviceIndexResp, error)
	// 删除分组设备
	GroupDeviceMultiDelete(context.Context, *GroupDeviceMultiDeleteReq) (*Empty, error)
	mustEmbedUnimplementedDeviceGroupServer()
}

// UnimplementedDeviceGroupServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceGroupServer struct {
}

func (UnimplementedDeviceGroupServer) GroupInfoCreate(context.Context, *GroupInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoCreate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoIndex(context.Context, *GroupInfoIndexReq) (*GroupInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoIndex not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoRead(context.Context, *WithID) (*GroupInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoRead not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoUpdate(context.Context, *GroupInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoUpdate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupInfoDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupInfoDelete not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceMultiCreate(context.Context, *GroupDeviceMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceMultiCreate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceMultiUpdate(context.Context, *GroupDeviceMultiSaveReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceMultiUpdate not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceIndex(context.Context, *GroupDeviceIndexReq) (*GroupDeviceIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceIndex not implemented")
}
func (UnimplementedDeviceGroupServer) GroupDeviceMultiDelete(context.Context, *GroupDeviceMultiDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupDeviceMultiDelete not implemented")
}
func (UnimplementedDeviceGroupServer) mustEmbedUnimplementedDeviceGroupServer() {}

// UnsafeDeviceGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceGroupServer will
// result in compilation errors.
type UnsafeDeviceGroupServer interface {
	mustEmbedUnimplementedDeviceGroupServer()
}

func RegisterDeviceGroupServer(s grpc.ServiceRegistrar, srv DeviceGroupServer) {
	s.RegisterService(&DeviceGroup_ServiceDesc, srv)
}

func _DeviceGroup_GroupInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoCreate(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoIndex(ctx, req.(*GroupInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoRead(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoUpdate(ctx, req.(*GroupInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupInfoDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupDeviceMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceMultiCreate(ctx, req.(*GroupDeviceMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceMultiUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceMultiSaveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceMultiUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupDeviceMultiUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceMultiUpdate(ctx, req.(*GroupDeviceMultiSaveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupDeviceIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceIndex(ctx, req.(*GroupDeviceIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceGroup_GroupDeviceMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupDeviceMultiDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceGroupServer).GroupDeviceMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceGroup_GroupDeviceMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceGroupServer).GroupDeviceMultiDelete(ctx, req.(*GroupDeviceMultiDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceGroup_ServiceDesc is the grpc.ServiceDesc for DeviceGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceGroup",
	HandlerType: (*DeviceGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "groupInfoCreate",
			Handler:    _DeviceGroup_GroupInfoCreate_Handler,
		},
		{
			MethodName: "groupInfoIndex",
			Handler:    _DeviceGroup_GroupInfoIndex_Handler,
		},
		{
			MethodName: "groupInfoRead",
			Handler:    _DeviceGroup_GroupInfoRead_Handler,
		},
		{
			MethodName: "groupInfoUpdate",
			Handler:    _DeviceGroup_GroupInfoUpdate_Handler,
		},
		{
			MethodName: "groupInfoDelete",
			Handler:    _DeviceGroup_GroupInfoDelete_Handler,
		},
		{
			MethodName: "groupDeviceMultiCreate",
			Handler:    _DeviceGroup_GroupDeviceMultiCreate_Handler,
		},
		{
			MethodName: "groupDeviceMultiUpdate",
			Handler:    _DeviceGroup_GroupDeviceMultiUpdate_Handler,
		},
		{
			MethodName: "groupDeviceIndex",
			Handler:    _DeviceGroup_GroupDeviceIndex_Handler,
		},
		{
			MethodName: "groupDeviceMultiDelete",
			Handler:    _DeviceGroup_GroupDeviceMultiDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	RemoteConfig_RemoteConfigCreate_FullMethodName   = "/dm.RemoteConfig/RemoteConfigCreate"
	RemoteConfig_RemoteConfigIndex_FullMethodName    = "/dm.RemoteConfig/RemoteConfigIndex"
	RemoteConfig_RemoteConfigPushAll_FullMethodName  = "/dm.RemoteConfig/RemoteConfigPushAll"
	RemoteConfig_RemoteConfigLastRead_FullMethodName = "/dm.RemoteConfig/RemoteConfigLastRead"
)

// RemoteConfigClient is the client API for RemoteConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteConfigClient interface {
	RemoteConfigCreate(ctx context.Context, in *RemoteConfigCreateReq, opts ...grpc.CallOption) (*Empty, error)
	RemoteConfigIndex(ctx context.Context, in *RemoteConfigIndexReq, opts ...grpc.CallOption) (*RemoteConfigIndexResp, error)
	RemoteConfigPushAll(ctx context.Context, in *RemoteConfigPushAllReq, opts ...grpc.CallOption) (*Empty, error)
	RemoteConfigLastRead(ctx context.Context, in *RemoteConfigLastReadReq, opts ...grpc.CallOption) (*RemoteConfigLastReadResp, error)
}

type remoteConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteConfigClient(cc grpc.ClientConnInterface) RemoteConfigClient {
	return &remoteConfigClient{cc}
}

func (c *remoteConfigClient) RemoteConfigCreate(ctx context.Context, in *RemoteConfigCreateReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RemoteConfig_RemoteConfigCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) RemoteConfigIndex(ctx context.Context, in *RemoteConfigIndexReq, opts ...grpc.CallOption) (*RemoteConfigIndexResp, error) {
	out := new(RemoteConfigIndexResp)
	err := c.cc.Invoke(ctx, RemoteConfig_RemoteConfigIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) RemoteConfigPushAll(ctx context.Context, in *RemoteConfigPushAllReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, RemoteConfig_RemoteConfigPushAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteConfigClient) RemoteConfigLastRead(ctx context.Context, in *RemoteConfigLastReadReq, opts ...grpc.CallOption) (*RemoteConfigLastReadResp, error) {
	out := new(RemoteConfigLastReadResp)
	err := c.cc.Invoke(ctx, RemoteConfig_RemoteConfigLastRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteConfigServer is the server API for RemoteConfig service.
// All implementations must embed UnimplementedRemoteConfigServer
// for forward compatibility
type RemoteConfigServer interface {
	RemoteConfigCreate(context.Context, *RemoteConfigCreateReq) (*Empty, error)
	RemoteConfigIndex(context.Context, *RemoteConfigIndexReq) (*RemoteConfigIndexResp, error)
	RemoteConfigPushAll(context.Context, *RemoteConfigPushAllReq) (*Empty, error)
	RemoteConfigLastRead(context.Context, *RemoteConfigLastReadReq) (*RemoteConfigLastReadResp, error)
	mustEmbedUnimplementedRemoteConfigServer()
}

// UnimplementedRemoteConfigServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteConfigServer struct {
}

func (UnimplementedRemoteConfigServer) RemoteConfigCreate(context.Context, *RemoteConfigCreateReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigCreate not implemented")
}
func (UnimplementedRemoteConfigServer) RemoteConfigIndex(context.Context, *RemoteConfigIndexReq) (*RemoteConfigIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigIndex not implemented")
}
func (UnimplementedRemoteConfigServer) RemoteConfigPushAll(context.Context, *RemoteConfigPushAllReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigPushAll not implemented")
}
func (UnimplementedRemoteConfigServer) RemoteConfigLastRead(context.Context, *RemoteConfigLastReadReq) (*RemoteConfigLastReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteConfigLastRead not implemented")
}
func (UnimplementedRemoteConfigServer) mustEmbedUnimplementedRemoteConfigServer() {}

// UnsafeRemoteConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteConfigServer will
// result in compilation errors.
type UnsafeRemoteConfigServer interface {
	mustEmbedUnimplementedRemoteConfigServer()
}

func RegisterRemoteConfigServer(s grpc.ServiceRegistrar, srv RemoteConfigServer) {
	s.RegisterService(&RemoteConfig_ServiceDesc, srv)
}

func _RemoteConfig_RemoteConfigCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_RemoteConfigCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigCreate(ctx, req.(*RemoteConfigCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_RemoteConfigIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_RemoteConfigIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigIndex(ctx, req.(*RemoteConfigIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_RemoteConfigPushAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigPushAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigPushAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_RemoteConfigPushAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigPushAll(ctx, req.(*RemoteConfigPushAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteConfig_RemoteConfigLastRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteConfigLastReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteConfigServer).RemoteConfigLastRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteConfig_RemoteConfigLastRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteConfigServer).RemoteConfigLastRead(ctx, req.(*RemoteConfigLastReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteConfig_ServiceDesc is the grpc.ServiceDesc for RemoteConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.RemoteConfig",
	HandlerType: (*RemoteConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RemoteConfigCreate",
			Handler:    _RemoteConfig_RemoteConfigCreate_Handler,
		},
		{
			MethodName: "RemoteConfigIndex",
			Handler:    _RemoteConfig_RemoteConfigIndex_Handler,
		},
		{
			MethodName: "RemoteConfigPushAll",
			Handler:    _RemoteConfig_RemoteConfigPushAll_Handler,
		},
		{
			MethodName: "RemoteConfigLastRead",
			Handler:    _RemoteConfig_RemoteConfigLastRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	DeviceMsg_SdkLogIndex_FullMethodName         = "/dm.DeviceMsg/sdkLogIndex"
	DeviceMsg_HubLogIndex_FullMethodName         = "/dm.DeviceMsg/hubLogIndex"
	DeviceMsg_PropertyLatestIndex_FullMethodName = "/dm.DeviceMsg/propertyLatestIndex"
	DeviceMsg_PropertyLogIndex_FullMethodName    = "/dm.DeviceMsg/propertyLogIndex"
	DeviceMsg_EventLogIndex_FullMethodName       = "/dm.DeviceMsg/eventLogIndex"
	DeviceMsg_ShadowIndex_FullMethodName         = "/dm.DeviceMsg/shadowIndex"
	DeviceMsg_OtaPromptIndex_FullMethodName      = "/dm.DeviceMsg/otaPromptIndex"
)

// DeviceMsgClient is the client API for DeviceMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceMsgClient interface {
	// 获取设备sdk调试日志
	SdkLogIndex(ctx context.Context, in *SdkLogIndexReq, opts ...grpc.CallOption) (*SdkLogIndexResp, error)
	// 获取设备调试信息记录登入登出,操作
	HubLogIndex(ctx context.Context, in *HubLogIndexReq, opts ...grpc.CallOption) (*HubLogIndexResp, error)
	// 获取设备数据信息
	PropertyLatestIndex(ctx context.Context, in *PropertyLatestIndexReq, opts ...grpc.CallOption) (*PropertyIndexResp, error)
	// 获取设备数据信息
	PropertyLogIndex(ctx context.Context, in *PropertyLogIndexReq, opts ...grpc.CallOption) (*PropertyIndexResp, error)
	// 获取设备数据信息
	EventLogIndex(ctx context.Context, in *EventLogIndexReq, opts ...grpc.CallOption) (*EventIndexResp, error)
	// 获取设备影子列表
	ShadowIndex(ctx context.Context, in *PropertyLatestIndexReq, opts ...grpc.CallOption) (*ShadowIndexResp, error)
	// 主动触发单个设备ota升级推送
	OtaPromptIndex(ctx context.Context, in *OtaPromptIndexReq, opts ...grpc.CallOption) (*OtaPromptIndexResp, error)
}

type deviceMsgClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceMsgClient(cc grpc.ClientConnInterface) DeviceMsgClient {
	return &deviceMsgClient{cc}
}

func (c *deviceMsgClient) SdkLogIndex(ctx context.Context, in *SdkLogIndexReq, opts ...grpc.CallOption) (*SdkLogIndexResp, error) {
	out := new(SdkLogIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_SdkLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) HubLogIndex(ctx context.Context, in *HubLogIndexReq, opts ...grpc.CallOption) (*HubLogIndexResp, error) {
	out := new(HubLogIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_HubLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) PropertyLatestIndex(ctx context.Context, in *PropertyLatestIndexReq, opts ...grpc.CallOption) (*PropertyIndexResp, error) {
	out := new(PropertyIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_PropertyLatestIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) PropertyLogIndex(ctx context.Context, in *PropertyLogIndexReq, opts ...grpc.CallOption) (*PropertyIndexResp, error) {
	out := new(PropertyIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_PropertyLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) EventLogIndex(ctx context.Context, in *EventLogIndexReq, opts ...grpc.CallOption) (*EventIndexResp, error) {
	out := new(EventIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_EventLogIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) ShadowIndex(ctx context.Context, in *PropertyLatestIndexReq, opts ...grpc.CallOption) (*ShadowIndexResp, error) {
	out := new(ShadowIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_ShadowIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceMsgClient) OtaPromptIndex(ctx context.Context, in *OtaPromptIndexReq, opts ...grpc.CallOption) (*OtaPromptIndexResp, error) {
	out := new(OtaPromptIndexResp)
	err := c.cc.Invoke(ctx, DeviceMsg_OtaPromptIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceMsgServer is the server API for DeviceMsg service.
// All implementations must embed UnimplementedDeviceMsgServer
// for forward compatibility
type DeviceMsgServer interface {
	// 获取设备sdk调试日志
	SdkLogIndex(context.Context, *SdkLogIndexReq) (*SdkLogIndexResp, error)
	// 获取设备调试信息记录登入登出,操作
	HubLogIndex(context.Context, *HubLogIndexReq) (*HubLogIndexResp, error)
	// 获取设备数据信息
	PropertyLatestIndex(context.Context, *PropertyLatestIndexReq) (*PropertyIndexResp, error)
	// 获取设备数据信息
	PropertyLogIndex(context.Context, *PropertyLogIndexReq) (*PropertyIndexResp, error)
	// 获取设备数据信息
	EventLogIndex(context.Context, *EventLogIndexReq) (*EventIndexResp, error)
	// 获取设备影子列表
	ShadowIndex(context.Context, *PropertyLatestIndexReq) (*ShadowIndexResp, error)
	// 主动触发单个设备ota升级推送
	OtaPromptIndex(context.Context, *OtaPromptIndexReq) (*OtaPromptIndexResp, error)
	mustEmbedUnimplementedDeviceMsgServer()
}

// UnimplementedDeviceMsgServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceMsgServer struct {
}

func (UnimplementedDeviceMsgServer) SdkLogIndex(context.Context, *SdkLogIndexReq) (*SdkLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SdkLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) HubLogIndex(context.Context, *HubLogIndexReq) (*HubLogIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HubLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) PropertyLatestIndex(context.Context, *PropertyLatestIndexReq) (*PropertyIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyLatestIndex not implemented")
}
func (UnimplementedDeviceMsgServer) PropertyLogIndex(context.Context, *PropertyLogIndexReq) (*PropertyIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) EventLogIndex(context.Context, *EventLogIndexReq) (*EventIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventLogIndex not implemented")
}
func (UnimplementedDeviceMsgServer) ShadowIndex(context.Context, *PropertyLatestIndexReq) (*ShadowIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShadowIndex not implemented")
}
func (UnimplementedDeviceMsgServer) OtaPromptIndex(context.Context, *OtaPromptIndexReq) (*OtaPromptIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaPromptIndex not implemented")
}
func (UnimplementedDeviceMsgServer) mustEmbedUnimplementedDeviceMsgServer() {}

// UnsafeDeviceMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceMsgServer will
// result in compilation errors.
type UnsafeDeviceMsgServer interface {
	mustEmbedUnimplementedDeviceMsgServer()
}

func RegisterDeviceMsgServer(s grpc.ServiceRegistrar, srv DeviceMsgServer) {
	s.RegisterService(&DeviceMsg_ServiceDesc, srv)
}

func _DeviceMsg_SdkLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SdkLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).SdkLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_SdkLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).SdkLogIndex(ctx, req.(*SdkLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_HubLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HubLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).HubLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_HubLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).HubLogIndex(ctx, req.(*HubLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_PropertyLatestIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyLatestIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).PropertyLatestIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_PropertyLatestIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).PropertyLatestIndex(ctx, req.(*PropertyLatestIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_PropertyLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).PropertyLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_PropertyLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).PropertyLogIndex(ctx, req.(*PropertyLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_EventLogIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventLogIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).EventLogIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_EventLogIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).EventLogIndex(ctx, req.(*EventLogIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_ShadowIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyLatestIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).ShadowIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_ShadowIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).ShadowIndex(ctx, req.(*PropertyLatestIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceMsg_OtaPromptIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaPromptIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceMsgServer).OtaPromptIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceMsg_OtaPromptIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceMsgServer).OtaPromptIndex(ctx, req.(*OtaPromptIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceMsg_ServiceDesc is the grpc.ServiceDesc for DeviceMsg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceMsg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceMsg",
	HandlerType: (*DeviceMsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sdkLogIndex",
			Handler:    _DeviceMsg_SdkLogIndex_Handler,
		},
		{
			MethodName: "hubLogIndex",
			Handler:    _DeviceMsg_HubLogIndex_Handler,
		},
		{
			MethodName: "propertyLatestIndex",
			Handler:    _DeviceMsg_PropertyLatestIndex_Handler,
		},
		{
			MethodName: "propertyLogIndex",
			Handler:    _DeviceMsg_PropertyLogIndex_Handler,
		},
		{
			MethodName: "eventLogIndex",
			Handler:    _DeviceMsg_EventLogIndex_Handler,
		},
		{
			MethodName: "shadowIndex",
			Handler:    _DeviceMsg_ShadowIndex_Handler,
		},
		{
			MethodName: "otaPromptIndex",
			Handler:    _DeviceMsg_OtaPromptIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	DeviceInteract_ActionSend_FullMethodName               = "/dm.DeviceInteract/actionSend"
	DeviceInteract_ActionRead_FullMethodName               = "/dm.DeviceInteract/actionRead"
	DeviceInteract_ActionResp_FullMethodName               = "/dm.DeviceInteract/actionResp"
	DeviceInteract_PropertyGetReportSend_FullMethodName    = "/dm.DeviceInteract/propertyGetReportSend"
	DeviceInteract_PropertyControlSend_FullMethodName      = "/dm.DeviceInteract/propertyControlSend"
	DeviceInteract_PropertyControlMultiSend_FullMethodName = "/dm.DeviceInteract/propertyControlMultiSend"
	DeviceInteract_PropertyControlRead_FullMethodName      = "/dm.DeviceInteract/propertyControlRead"
	DeviceInteract_SendMsg_FullMethodName                  = "/dm.DeviceInteract/sendMsg"
)

// DeviceInteractClient is the client API for DeviceInteract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceInteractClient interface {
	// 调用设备行为
	ActionSend(ctx context.Context, in *ActionSendReq, opts ...grpc.CallOption) (*ActionSendResp, error)
	// 获取异步调用设备行为的结果
	ActionRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*ActionSendResp, error)
	// 回复调用设备行为
	ActionResp(ctx context.Context, in *ActionRespReq, opts ...grpc.CallOption) (*Empty, error)
	// 请求设备获取设备最新属性
	PropertyGetReportSend(ctx context.Context, in *PropertyGetReportSendReq, opts ...grpc.CallOption) (*PropertyGetReportSendResp, error)
	// 调用设备属性
	PropertyControlSend(ctx context.Context, in *PropertyControlSendReq, opts ...grpc.CallOption) (*PropertyControlSendResp, error)
	// 批量调用设备属性
	PropertyControlMultiSend(ctx context.Context, in *PropertyControlMultiSendReq, opts ...grpc.CallOption) (*PropertyControlMultiSendResp, error)
	// 获取异步调用设备属性的结果
	PropertyControlRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*PropertyControlSendResp, error)
	// 发送消息给设备 -- 调试使用
	SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error)
}

type deviceInteractClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceInteractClient(cc grpc.ClientConnInterface) DeviceInteractClient {
	return &deviceInteractClient{cc}
}

func (c *deviceInteractClient) ActionSend(ctx context.Context, in *ActionSendReq, opts ...grpc.CallOption) (*ActionSendResp, error) {
	out := new(ActionSendResp)
	err := c.cc.Invoke(ctx, DeviceInteract_ActionSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) ActionRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*ActionSendResp, error) {
	out := new(ActionSendResp)
	err := c.cc.Invoke(ctx, DeviceInteract_ActionRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) ActionResp(ctx context.Context, in *ActionRespReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, DeviceInteract_ActionResp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) PropertyGetReportSend(ctx context.Context, in *PropertyGetReportSendReq, opts ...grpc.CallOption) (*PropertyGetReportSendResp, error) {
	out := new(PropertyGetReportSendResp)
	err := c.cc.Invoke(ctx, DeviceInteract_PropertyGetReportSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) PropertyControlSend(ctx context.Context, in *PropertyControlSendReq, opts ...grpc.CallOption) (*PropertyControlSendResp, error) {
	out := new(PropertyControlSendResp)
	err := c.cc.Invoke(ctx, DeviceInteract_PropertyControlSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) PropertyControlMultiSend(ctx context.Context, in *PropertyControlMultiSendReq, opts ...grpc.CallOption) (*PropertyControlMultiSendResp, error) {
	out := new(PropertyControlMultiSendResp)
	err := c.cc.Invoke(ctx, DeviceInteract_PropertyControlMultiSend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) PropertyControlRead(ctx context.Context, in *RespReadReq, opts ...grpc.CallOption) (*PropertyControlSendResp, error) {
	out := new(PropertyControlSendResp)
	err := c.cc.Invoke(ctx, DeviceInteract_PropertyControlRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceInteractClient) SendMsg(ctx context.Context, in *SendMsgReq, opts ...grpc.CallOption) (*SendMsgResp, error) {
	out := new(SendMsgResp)
	err := c.cc.Invoke(ctx, DeviceInteract_SendMsg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceInteractServer is the server API for DeviceInteract service.
// All implementations must embed UnimplementedDeviceInteractServer
// for forward compatibility
type DeviceInteractServer interface {
	// 调用设备行为
	ActionSend(context.Context, *ActionSendReq) (*ActionSendResp, error)
	// 获取异步调用设备行为的结果
	ActionRead(context.Context, *RespReadReq) (*ActionSendResp, error)
	// 回复调用设备行为
	ActionResp(context.Context, *ActionRespReq) (*Empty, error)
	// 请求设备获取设备最新属性
	PropertyGetReportSend(context.Context, *PropertyGetReportSendReq) (*PropertyGetReportSendResp, error)
	// 调用设备属性
	PropertyControlSend(context.Context, *PropertyControlSendReq) (*PropertyControlSendResp, error)
	// 批量调用设备属性
	PropertyControlMultiSend(context.Context, *PropertyControlMultiSendReq) (*PropertyControlMultiSendResp, error)
	// 获取异步调用设备属性的结果
	PropertyControlRead(context.Context, *RespReadReq) (*PropertyControlSendResp, error)
	// 发送消息给设备 -- 调试使用
	SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error)
	mustEmbedUnimplementedDeviceInteractServer()
}

// UnimplementedDeviceInteractServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceInteractServer struct {
}

func (UnimplementedDeviceInteractServer) ActionSend(context.Context, *ActionSendReq) (*ActionSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionSend not implemented")
}
func (UnimplementedDeviceInteractServer) ActionRead(context.Context, *RespReadReq) (*ActionSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionRead not implemented")
}
func (UnimplementedDeviceInteractServer) ActionResp(context.Context, *ActionRespReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionResp not implemented")
}
func (UnimplementedDeviceInteractServer) PropertyGetReportSend(context.Context, *PropertyGetReportSendReq) (*PropertyGetReportSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyGetReportSend not implemented")
}
func (UnimplementedDeviceInteractServer) PropertyControlSend(context.Context, *PropertyControlSendReq) (*PropertyControlSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyControlSend not implemented")
}
func (UnimplementedDeviceInteractServer) PropertyControlMultiSend(context.Context, *PropertyControlMultiSendReq) (*PropertyControlMultiSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyControlMultiSend not implemented")
}
func (UnimplementedDeviceInteractServer) PropertyControlRead(context.Context, *RespReadReq) (*PropertyControlSendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropertyControlRead not implemented")
}
func (UnimplementedDeviceInteractServer) SendMsg(context.Context, *SendMsgReq) (*SendMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedDeviceInteractServer) mustEmbedUnimplementedDeviceInteractServer() {}

// UnsafeDeviceInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceInteractServer will
// result in compilation errors.
type UnsafeDeviceInteractServer interface {
	mustEmbedUnimplementedDeviceInteractServer()
}

func RegisterDeviceInteractServer(s grpc.ServiceRegistrar, srv DeviceInteractServer) {
	s.RegisterService(&DeviceInteract_ServiceDesc, srv)
}

func _DeviceInteract_ActionSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).ActionSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_ActionSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).ActionSend(ctx, req.(*ActionSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_ActionRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).ActionRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_ActionRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).ActionRead(ctx, req.(*RespReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_ActionResp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRespReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).ActionResp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_ActionResp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).ActionResp(ctx, req.(*ActionRespReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_PropertyGetReportSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyGetReportSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).PropertyGetReportSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_PropertyGetReportSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).PropertyGetReportSend(ctx, req.(*PropertyGetReportSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_PropertyControlSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyControlSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).PropertyControlSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_PropertyControlSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).PropertyControlSend(ctx, req.(*PropertyControlSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_PropertyControlMultiSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyControlMultiSendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).PropertyControlMultiSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_PropertyControlMultiSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).PropertyControlMultiSend(ctx, req.(*PropertyControlMultiSendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_PropertyControlRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RespReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).PropertyControlRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_PropertyControlRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).PropertyControlRead(ctx, req.(*RespReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceInteract_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInteractServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceInteract_SendMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInteractServer).SendMsg(ctx, req.(*SendMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceInteract_ServiceDesc is the grpc.ServiceDesc for DeviceInteract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceInteract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.DeviceInteract",
	HandlerType: (*DeviceInteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "actionSend",
			Handler:    _DeviceInteract_ActionSend_Handler,
		},
		{
			MethodName: "actionRead",
			Handler:    _DeviceInteract_ActionRead_Handler,
		},
		{
			MethodName: "actionResp",
			Handler:    _DeviceInteract_ActionResp_Handler,
		},
		{
			MethodName: "propertyGetReportSend",
			Handler:    _DeviceInteract_PropertyGetReportSend_Handler,
		},
		{
			MethodName: "propertyControlSend",
			Handler:    _DeviceInteract_PropertyControlSend_Handler,
		},
		{
			MethodName: "propertyControlMultiSend",
			Handler:    _DeviceInteract_PropertyControlMultiSend_Handler,
		},
		{
			MethodName: "propertyControlRead",
			Handler:    _DeviceInteract_PropertyControlRead_Handler,
		},
		{
			MethodName: "sendMsg",
			Handler:    _DeviceInteract_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	FirmwareManage_FirmwareInfoCreate_FullMethodName    = "/dm.FirmwareManage/FirmwareInfoCreate"
	FirmwareManage_FirmwareInfoUpdate_FullMethodName    = "/dm.FirmwareManage/FirmwareInfoUpdate"
	FirmwareManage_FirmwareInfoDelete_FullMethodName    = "/dm.FirmwareManage/FirmwareInfoDelete"
	FirmwareManage_FirmwareInfoIndex_FullMethodName     = "/dm.FirmwareManage/FirmwareInfoIndex"
	FirmwareManage_FirmwareInfoRead_FullMethodName      = "/dm.FirmwareManage/FirmwareInfoRead"
	FirmwareManage_OtaFirmwareFileUpdate_FullMethodName = "/dm.FirmwareManage/OtaFirmwareFileUpdate"
	FirmwareManage_OtaFirmwareFileIndex_FullMethodName  = "/dm.FirmwareManage/OtaFirmwareFileIndex"
	FirmwareManage_OtaFirmwareDeviceInfo_FullMethodName = "/dm.FirmwareManage/OtaFirmwareDeviceInfo"
)

// FirmwareManageClient is the client API for FirmwareManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FirmwareManageClient interface {
	// 新增固件升级包
	FirmwareInfoCreate(ctx context.Context, in *Firmware, opts ...grpc.CallOption) (*FirmwareResp, error)
	FirmwareInfoUpdate(ctx context.Context, in *FirmwareInfo, opts ...grpc.CallOption) (*OtaCommonResp, error)
	FirmwareInfoDelete(ctx context.Context, in *FirmwareInfoDeleteReq, opts ...grpc.CallOption) (*FirmwareInfoDeleteResp, error)
	FirmwareInfoIndex(ctx context.Context, in *FirmwareInfoIndexReq, opts ...grpc.CallOption) (*FirmwareInfoIndexResp, error)
	FirmwareInfoRead(ctx context.Context, in *FirmwareInfoReadReq, opts ...grpc.CallOption) (*FirmwareInfoReadResp, error)
	// 附件信息更新
	OtaFirmwareFileUpdate(ctx context.Context, in *OtaFirmwareFileReq, opts ...grpc.CallOption) (*OtaFirmwareFileResp, error)
	// 附件列表搜索
	OtaFirmwareFileIndex(ctx context.Context, in *OtaFirmwareFileIndexReq, opts ...grpc.CallOption) (*OtaFirmwareFileIndexResp, error)
	// 获取固件包对应设备版本列表
	OtaFirmwareDeviceInfo(ctx context.Context, in *OtaFirmwareDeviceInfoReq, opts ...grpc.CallOption) (*OtaFirmwareDeviceInfoResp, error)
}

type firmwareManageClient struct {
	cc grpc.ClientConnInterface
}

func NewFirmwareManageClient(cc grpc.ClientConnInterface) FirmwareManageClient {
	return &firmwareManageClient{cc}
}

func (c *firmwareManageClient) FirmwareInfoCreate(ctx context.Context, in *Firmware, opts ...grpc.CallOption) (*FirmwareResp, error) {
	out := new(FirmwareResp)
	err := c.cc.Invoke(ctx, FirmwareManage_FirmwareInfoCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) FirmwareInfoUpdate(ctx context.Context, in *FirmwareInfo, opts ...grpc.CallOption) (*OtaCommonResp, error) {
	out := new(OtaCommonResp)
	err := c.cc.Invoke(ctx, FirmwareManage_FirmwareInfoUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) FirmwareInfoDelete(ctx context.Context, in *FirmwareInfoDeleteReq, opts ...grpc.CallOption) (*FirmwareInfoDeleteResp, error) {
	out := new(FirmwareInfoDeleteResp)
	err := c.cc.Invoke(ctx, FirmwareManage_FirmwareInfoDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) FirmwareInfoIndex(ctx context.Context, in *FirmwareInfoIndexReq, opts ...grpc.CallOption) (*FirmwareInfoIndexResp, error) {
	out := new(FirmwareInfoIndexResp)
	err := c.cc.Invoke(ctx, FirmwareManage_FirmwareInfoIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) FirmwareInfoRead(ctx context.Context, in *FirmwareInfoReadReq, opts ...grpc.CallOption) (*FirmwareInfoReadResp, error) {
	out := new(FirmwareInfoReadResp)
	err := c.cc.Invoke(ctx, FirmwareManage_FirmwareInfoRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) OtaFirmwareFileUpdate(ctx context.Context, in *OtaFirmwareFileReq, opts ...grpc.CallOption) (*OtaFirmwareFileResp, error) {
	out := new(OtaFirmwareFileResp)
	err := c.cc.Invoke(ctx, FirmwareManage_OtaFirmwareFileUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) OtaFirmwareFileIndex(ctx context.Context, in *OtaFirmwareFileIndexReq, opts ...grpc.CallOption) (*OtaFirmwareFileIndexResp, error) {
	out := new(OtaFirmwareFileIndexResp)
	err := c.cc.Invoke(ctx, FirmwareManage_OtaFirmwareFileIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *firmwareManageClient) OtaFirmwareDeviceInfo(ctx context.Context, in *OtaFirmwareDeviceInfoReq, opts ...grpc.CallOption) (*OtaFirmwareDeviceInfoResp, error) {
	out := new(OtaFirmwareDeviceInfoResp)
	err := c.cc.Invoke(ctx, FirmwareManage_OtaFirmwareDeviceInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FirmwareManageServer is the server API for FirmwareManage service.
// All implementations must embed UnimplementedFirmwareManageServer
// for forward compatibility
type FirmwareManageServer interface {
	// 新增固件升级包
	FirmwareInfoCreate(context.Context, *Firmware) (*FirmwareResp, error)
	FirmwareInfoUpdate(context.Context, *FirmwareInfo) (*OtaCommonResp, error)
	FirmwareInfoDelete(context.Context, *FirmwareInfoDeleteReq) (*FirmwareInfoDeleteResp, error)
	FirmwareInfoIndex(context.Context, *FirmwareInfoIndexReq) (*FirmwareInfoIndexResp, error)
	FirmwareInfoRead(context.Context, *FirmwareInfoReadReq) (*FirmwareInfoReadResp, error)
	// 附件信息更新
	OtaFirmwareFileUpdate(context.Context, *OtaFirmwareFileReq) (*OtaFirmwareFileResp, error)
	// 附件列表搜索
	OtaFirmwareFileIndex(context.Context, *OtaFirmwareFileIndexReq) (*OtaFirmwareFileIndexResp, error)
	// 获取固件包对应设备版本列表
	OtaFirmwareDeviceInfo(context.Context, *OtaFirmwareDeviceInfoReq) (*OtaFirmwareDeviceInfoResp, error)
	mustEmbedUnimplementedFirmwareManageServer()
}

// UnimplementedFirmwareManageServer must be embedded to have forward compatible implementations.
type UnimplementedFirmwareManageServer struct {
}

func (UnimplementedFirmwareManageServer) FirmwareInfoCreate(context.Context, *Firmware) (*FirmwareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareInfoCreate not implemented")
}
func (UnimplementedFirmwareManageServer) FirmwareInfoUpdate(context.Context, *FirmwareInfo) (*OtaCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareInfoUpdate not implemented")
}
func (UnimplementedFirmwareManageServer) FirmwareInfoDelete(context.Context, *FirmwareInfoDeleteReq) (*FirmwareInfoDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareInfoDelete not implemented")
}
func (UnimplementedFirmwareManageServer) FirmwareInfoIndex(context.Context, *FirmwareInfoIndexReq) (*FirmwareInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareInfoIndex not implemented")
}
func (UnimplementedFirmwareManageServer) FirmwareInfoRead(context.Context, *FirmwareInfoReadReq) (*FirmwareInfoReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirmwareInfoRead not implemented")
}
func (UnimplementedFirmwareManageServer) OtaFirmwareFileUpdate(context.Context, *OtaFirmwareFileReq) (*OtaFirmwareFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareFileUpdate not implemented")
}
func (UnimplementedFirmwareManageServer) OtaFirmwareFileIndex(context.Context, *OtaFirmwareFileIndexReq) (*OtaFirmwareFileIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareFileIndex not implemented")
}
func (UnimplementedFirmwareManageServer) OtaFirmwareDeviceInfo(context.Context, *OtaFirmwareDeviceInfoReq) (*OtaFirmwareDeviceInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareDeviceInfo not implemented")
}
func (UnimplementedFirmwareManageServer) mustEmbedUnimplementedFirmwareManageServer() {}

// UnsafeFirmwareManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FirmwareManageServer will
// result in compilation errors.
type UnsafeFirmwareManageServer interface {
	mustEmbedUnimplementedFirmwareManageServer()
}

func RegisterFirmwareManageServer(s grpc.ServiceRegistrar, srv FirmwareManageServer) {
	s.RegisterService(&FirmwareManage_ServiceDesc, srv)
}

func _FirmwareManage_FirmwareInfoCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Firmware)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).FirmwareInfoCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_FirmwareInfoCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).FirmwareInfoCreate(ctx, req.(*Firmware))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_FirmwareInfoUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).FirmwareInfoUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_FirmwareInfoUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).FirmwareInfoUpdate(ctx, req.(*FirmwareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_FirmwareInfoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareInfoDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).FirmwareInfoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_FirmwareInfoDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).FirmwareInfoDelete(ctx, req.(*FirmwareInfoDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_FirmwareInfoIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareInfoIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).FirmwareInfoIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_FirmwareInfoIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).FirmwareInfoIndex(ctx, req.(*FirmwareInfoIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_FirmwareInfoRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirmwareInfoReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).FirmwareInfoRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_FirmwareInfoRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).FirmwareInfoRead(ctx, req.(*FirmwareInfoReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_OtaFirmwareFileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).OtaFirmwareFileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_OtaFirmwareFileUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).OtaFirmwareFileUpdate(ctx, req.(*OtaFirmwareFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_OtaFirmwareFileIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareFileIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).OtaFirmwareFileIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_OtaFirmwareFileIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).OtaFirmwareFileIndex(ctx, req.(*OtaFirmwareFileIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FirmwareManage_OtaFirmwareDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareDeviceInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FirmwareManageServer).OtaFirmwareDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FirmwareManage_OtaFirmwareDeviceInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FirmwareManageServer).OtaFirmwareDeviceInfo(ctx, req.(*OtaFirmwareDeviceInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FirmwareManage_ServiceDesc is the grpc.ServiceDesc for FirmwareManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FirmwareManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.FirmwareManage",
	HandlerType: (*FirmwareManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FirmwareInfoCreate",
			Handler:    _FirmwareManage_FirmwareInfoCreate_Handler,
		},
		{
			MethodName: "FirmwareInfoUpdate",
			Handler:    _FirmwareManage_FirmwareInfoUpdate_Handler,
		},
		{
			MethodName: "FirmwareInfoDelete",
			Handler:    _FirmwareManage_FirmwareInfoDelete_Handler,
		},
		{
			MethodName: "FirmwareInfoIndex",
			Handler:    _FirmwareManage_FirmwareInfoIndex_Handler,
		},
		{
			MethodName: "FirmwareInfoRead",
			Handler:    _FirmwareManage_FirmwareInfoRead_Handler,
		},
		{
			MethodName: "OtaFirmwareFileUpdate",
			Handler:    _FirmwareManage_OtaFirmwareFileUpdate_Handler,
		},
		{
			MethodName: "OtaFirmwareFileIndex",
			Handler:    _FirmwareManage_OtaFirmwareFileIndex_Handler,
		},
		{
			MethodName: "OtaFirmwareDeviceInfo",
			Handler:    _FirmwareManage_OtaFirmwareDeviceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	OtaTaskManage_OtaTaskCreate_FullMethodName            = "/dm.OtaTaskManage/OtaTaskCreate"
	OtaTaskManage_OtaTaskUpdate_FullMethodName            = "/dm.OtaTaskManage/OtaTaskUpdate"
	OtaTaskManage_OtaTaskCancle_FullMethodName            = "/dm.OtaTaskManage/OtaTaskCancle"
	OtaTaskManage_OtaTaskIndex_FullMethodName             = "/dm.OtaTaskManage/OtaTaskIndex"
	OtaTaskManage_OtaTaskRead_FullMethodName              = "/dm.OtaTaskManage/OtaTaskRead"
	OtaTaskManage_OtaTaskDeviceIndex_FullMethodName       = "/dm.OtaTaskManage/OtaTaskDeviceIndex"
	OtaTaskManage_OtaTaskDeviceRead_FullMethodName        = "/dm.OtaTaskManage/OtaTaskDeviceRead"
	OtaTaskManage_OtaTaskDeviceEnableBatch_FullMethodName = "/dm.OtaTaskManage/OtaTaskDeviceEnableBatch"
	OtaTaskManage_OtaTaskDeviceProcess_FullMethodName     = "/dm.OtaTaskManage/OtaTaskDeviceProcess"
	OtaTaskManage_OtaTaskDeviceCancle_FullMethodName      = "/dm.OtaTaskManage/OtaTaskDeviceCancle"
)

// OtaTaskManageClient is the client API for OtaTaskManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtaTaskManageClient interface {
	// 创建批量升级任务
	OtaTaskCreate(ctx context.Context, in *OtaTaskCreateReq, opts ...grpc.CallOption) (*OtaTaskCreatResp, error)
	OtaTaskUpdate(ctx context.Context, in *OtaTaskInfo, opts ...grpc.CallOption) (*OtaCommonResp, error)
	// 批量取消升级任务
	OtaTaskCancle(ctx context.Context, in *OtaTaskCancleReq, opts ...grpc.CallOption) (*OtaCommonResp, error)
	OtaTaskIndex(ctx context.Context, in *OtaTaskIndexReq, opts ...grpc.CallOption) (*OtaTaskIndexResp, error)
	// 升级任务详情
	OtaTaskRead(ctx context.Context, in *OtaTaskReadReq, opts ...grpc.CallOption) (*OtaTaskReadResp, error)
	// 升级批次详情列表
	OtaTaskDeviceIndex(ctx context.Context, in *OtaTaskDeviceIndexReq, opts ...grpc.CallOption) (*OtaTaskDeviceIndexResp, error)
	// 设备升级状态详情
	OtaTaskDeviceRead(ctx context.Context, in *OtaTaskDeviceReadReq, opts ...grpc.CallOption) (*OtaTaskDeviceInfo, error)
	// 获取当前可执行批次信息
	OtaTaskDeviceEnableBatch(ctx context.Context, in *OtaTaskBatchReq, opts ...grpc.CallOption) (*OtaTaskBatchResp, error)
	// 升级进度上报
	OtaTaskDeviceProcess(ctx context.Context, in *OtaTaskDeviceProcessReq, opts ...grpc.CallOption) (*OtaCommonResp, error)
	// 取消单个设备的升级
	OtaTaskDeviceCancle(ctx context.Context, in *OtaTaskDeviceCancleReq, opts ...grpc.CallOption) (*OtaCommonResp, error)
}

type otaTaskManageClient struct {
	cc grpc.ClientConnInterface
}

func NewOtaTaskManageClient(cc grpc.ClientConnInterface) OtaTaskManageClient {
	return &otaTaskManageClient{cc}
}

func (c *otaTaskManageClient) OtaTaskCreate(ctx context.Context, in *OtaTaskCreateReq, opts ...grpc.CallOption) (*OtaTaskCreatResp, error) {
	out := new(OtaTaskCreatResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskUpdate(ctx context.Context, in *OtaTaskInfo, opts ...grpc.CallOption) (*OtaCommonResp, error) {
	out := new(OtaCommonResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskCancle(ctx context.Context, in *OtaTaskCancleReq, opts ...grpc.CallOption) (*OtaCommonResp, error) {
	out := new(OtaCommonResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskCancle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskIndex(ctx context.Context, in *OtaTaskIndexReq, opts ...grpc.CallOption) (*OtaTaskIndexResp, error) {
	out := new(OtaTaskIndexResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskRead(ctx context.Context, in *OtaTaskReadReq, opts ...grpc.CallOption) (*OtaTaskReadResp, error) {
	out := new(OtaTaskReadResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskDeviceIndex(ctx context.Context, in *OtaTaskDeviceIndexReq, opts ...grpc.CallOption) (*OtaTaskDeviceIndexResp, error) {
	out := new(OtaTaskDeviceIndexResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskDeviceIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskDeviceRead(ctx context.Context, in *OtaTaskDeviceReadReq, opts ...grpc.CallOption) (*OtaTaskDeviceInfo, error) {
	out := new(OtaTaskDeviceInfo)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskDeviceRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskDeviceEnableBatch(ctx context.Context, in *OtaTaskBatchReq, opts ...grpc.CallOption) (*OtaTaskBatchResp, error) {
	out := new(OtaTaskBatchResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskDeviceEnableBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskDeviceProcess(ctx context.Context, in *OtaTaskDeviceProcessReq, opts ...grpc.CallOption) (*OtaCommonResp, error) {
	out := new(OtaCommonResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskDeviceProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otaTaskManageClient) OtaTaskDeviceCancle(ctx context.Context, in *OtaTaskDeviceCancleReq, opts ...grpc.CallOption) (*OtaCommonResp, error) {
	out := new(OtaCommonResp)
	err := c.cc.Invoke(ctx, OtaTaskManage_OtaTaskDeviceCancle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtaTaskManageServer is the server API for OtaTaskManage service.
// All implementations must embed UnimplementedOtaTaskManageServer
// for forward compatibility
type OtaTaskManageServer interface {
	// 创建批量升级任务
	OtaTaskCreate(context.Context, *OtaTaskCreateReq) (*OtaTaskCreatResp, error)
	OtaTaskUpdate(context.Context, *OtaTaskInfo) (*OtaCommonResp, error)
	// 批量取消升级任务
	OtaTaskCancle(context.Context, *OtaTaskCancleReq) (*OtaCommonResp, error)
	OtaTaskIndex(context.Context, *OtaTaskIndexReq) (*OtaTaskIndexResp, error)
	// 升级任务详情
	OtaTaskRead(context.Context, *OtaTaskReadReq) (*OtaTaskReadResp, error)
	// 升级批次详情列表
	OtaTaskDeviceIndex(context.Context, *OtaTaskDeviceIndexReq) (*OtaTaskDeviceIndexResp, error)
	// 设备升级状态详情
	OtaTaskDeviceRead(context.Context, *OtaTaskDeviceReadReq) (*OtaTaskDeviceInfo, error)
	// 获取当前可执行批次信息
	OtaTaskDeviceEnableBatch(context.Context, *OtaTaskBatchReq) (*OtaTaskBatchResp, error)
	// 升级进度上报
	OtaTaskDeviceProcess(context.Context, *OtaTaskDeviceProcessReq) (*OtaCommonResp, error)
	// 取消单个设备的升级
	OtaTaskDeviceCancle(context.Context, *OtaTaskDeviceCancleReq) (*OtaCommonResp, error)
	mustEmbedUnimplementedOtaTaskManageServer()
}

// UnimplementedOtaTaskManageServer must be embedded to have forward compatible implementations.
type UnimplementedOtaTaskManageServer struct {
}

func (UnimplementedOtaTaskManageServer) OtaTaskCreate(context.Context, *OtaTaskCreateReq) (*OtaTaskCreatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskCreate not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskUpdate(context.Context, *OtaTaskInfo) (*OtaCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskUpdate not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskCancle(context.Context, *OtaTaskCancleReq) (*OtaCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskCancle not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskIndex(context.Context, *OtaTaskIndexReq) (*OtaTaskIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskIndex not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskRead(context.Context, *OtaTaskReadReq) (*OtaTaskReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskRead not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskDeviceIndex(context.Context, *OtaTaskDeviceIndexReq) (*OtaTaskDeviceIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskDeviceIndex not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskDeviceRead(context.Context, *OtaTaskDeviceReadReq) (*OtaTaskDeviceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskDeviceRead not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskDeviceEnableBatch(context.Context, *OtaTaskBatchReq) (*OtaTaskBatchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskDeviceEnableBatch not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskDeviceProcess(context.Context, *OtaTaskDeviceProcessReq) (*OtaCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskDeviceProcess not implemented")
}
func (UnimplementedOtaTaskManageServer) OtaTaskDeviceCancle(context.Context, *OtaTaskDeviceCancleReq) (*OtaCommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskDeviceCancle not implemented")
}
func (UnimplementedOtaTaskManageServer) mustEmbedUnimplementedOtaTaskManageServer() {}

// UnsafeOtaTaskManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtaTaskManageServer will
// result in compilation errors.
type UnsafeOtaTaskManageServer interface {
	mustEmbedUnimplementedOtaTaskManageServer()
}

func RegisterOtaTaskManageServer(s grpc.ServiceRegistrar, srv OtaTaskManageServer) {
	s.RegisterService(&OtaTaskManage_ServiceDesc, srv)
}

func _OtaTaskManage_OtaTaskCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskCreate(ctx, req.(*OtaTaskCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskUpdate(ctx, req.(*OtaTaskInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskCancle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskCancleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskCancle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskCancle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskCancle(ctx, req.(*OtaTaskCancleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskIndex(ctx, req.(*OtaTaskIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskRead(ctx, req.(*OtaTaskReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskDeviceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskDeviceIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskDeviceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskDeviceIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskDeviceIndex(ctx, req.(*OtaTaskDeviceIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskDeviceRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskDeviceReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskDeviceRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskDeviceRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskDeviceRead(ctx, req.(*OtaTaskDeviceReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskDeviceEnableBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskBatchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskDeviceEnableBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskDeviceEnableBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskDeviceEnableBatch(ctx, req.(*OtaTaskBatchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskDeviceProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskDeviceProcessReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskDeviceProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskDeviceProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskDeviceProcess(ctx, req.(*OtaTaskDeviceProcessReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtaTaskManage_OtaTaskDeviceCancle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaTaskDeviceCancleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtaTaskManageServer).OtaTaskDeviceCancle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OtaTaskManage_OtaTaskDeviceCancle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtaTaskManageServer).OtaTaskDeviceCancle(ctx, req.(*OtaTaskDeviceCancleReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OtaTaskManage_ServiceDesc is the grpc.ServiceDesc for OtaTaskManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OtaTaskManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.OtaTaskManage",
	HandlerType: (*OtaTaskManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OtaTaskCreate",
			Handler:    _OtaTaskManage_OtaTaskCreate_Handler,
		},
		{
			MethodName: "OtaTaskUpdate",
			Handler:    _OtaTaskManage_OtaTaskUpdate_Handler,
		},
		{
			MethodName: "OtaTaskCancle",
			Handler:    _OtaTaskManage_OtaTaskCancle_Handler,
		},
		{
			MethodName: "OtaTaskIndex",
			Handler:    _OtaTaskManage_OtaTaskIndex_Handler,
		},
		{
			MethodName: "OtaTaskRead",
			Handler:    _OtaTaskManage_OtaTaskRead_Handler,
		},
		{
			MethodName: "OtaTaskDeviceIndex",
			Handler:    _OtaTaskManage_OtaTaskDeviceIndex_Handler,
		},
		{
			MethodName: "OtaTaskDeviceRead",
			Handler:    _OtaTaskManage_OtaTaskDeviceRead_Handler,
		},
		{
			MethodName: "OtaTaskDeviceEnableBatch",
			Handler:    _OtaTaskManage_OtaTaskDeviceEnableBatch_Handler,
		},
		{
			MethodName: "OtaTaskDeviceProcess",
			Handler:    _OtaTaskManage_OtaTaskDeviceProcess_Handler,
		},
		{
			MethodName: "OtaTaskDeviceCancle",
			Handler:    _OtaTaskManage_OtaTaskDeviceCancle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	UserDevice_UserDeviceCollectMultiCreate_FullMethodName = "/dm.userDevice/userDeviceCollectMultiCreate"
	UserDevice_UserDeviceCollectMultiDelete_FullMethodName = "/dm.userDevice/userDeviceCollectMultiDelete"
	UserDevice_UserDeviceCollectIndex_FullMethodName       = "/dm.userDevice/userDeviceCollectIndex"
	UserDevice_UserDeviceShareCreate_FullMethodName        = "/dm.userDevice/userDeviceShareCreate"
	UserDevice_UserDeviceShareUpdate_FullMethodName        = "/dm.userDevice/userDeviceShareUpdate"
	UserDevice_UserDeviceShareDelete_FullMethodName        = "/dm.userDevice/userDeviceShareDelete"
	UserDevice_UserDeviceShareIndex_FullMethodName         = "/dm.userDevice/userDeviceShareIndex"
	UserDevice_UserDeviceShareRead_FullMethodName          = "/dm.userDevice/userDeviceShareRead"
)

// UserDeviceClient is the client API for UserDevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDeviceClient interface {
	// 用户收藏的设备
	UserDeviceCollectMultiCreate(ctx context.Context, in *UserDeviceCollectSave, opts ...grpc.CallOption) (*Empty, error)
	UserDeviceCollectMultiDelete(ctx context.Context, in *UserDeviceCollectSave, opts ...grpc.CallOption) (*Empty, error)
	UserDeviceCollectIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserDeviceCollectSave, error)
	// 分享设备
	UserDeviceShareCreate(ctx context.Context, in *UserDeviceShareInfo, opts ...grpc.CallOption) (*WithID, error)
	// 更新权限
	UserDeviceShareUpdate(ctx context.Context, in *UserDeviceShareInfo, opts ...grpc.CallOption) (*Empty, error)
	// 取消分享设备
	UserDeviceShareDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	// 获取设备分享列表(只有设备的所有者才能获取)
	UserDeviceShareIndex(ctx context.Context, in *UserDeviceShareIndexReq, opts ...grpc.CallOption) (*UserDeviceShareIndexResp, error)
	// 获取设备分享的详情
	UserDeviceShareRead(ctx context.Context, in *UserDeviceShareReadReq, opts ...grpc.CallOption) (*UserDeviceShareInfo, error)
}

type userDeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDeviceClient(cc grpc.ClientConnInterface) UserDeviceClient {
	return &userDeviceClient{cc}
}

func (c *userDeviceClient) UserDeviceCollectMultiCreate(ctx context.Context, in *UserDeviceCollectSave, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserDevice_UserDeviceCollectMultiCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceCollectMultiDelete(ctx context.Context, in *UserDeviceCollectSave, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserDevice_UserDeviceCollectMultiDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceCollectIndex(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UserDeviceCollectSave, error) {
	out := new(UserDeviceCollectSave)
	err := c.cc.Invoke(ctx, UserDevice_UserDeviceCollectIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareCreate(ctx context.Context, in *UserDeviceShareInfo, opts ...grpc.CallOption) (*WithID, error) {
	out := new(WithID)
	err := c.cc.Invoke(ctx, UserDevice_UserDeviceShareCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareUpdate(ctx context.Context, in *UserDeviceShareInfo, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserDevice_UserDeviceShareUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, UserDevice_UserDeviceShareDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareIndex(ctx context.Context, in *UserDeviceShareIndexReq, opts ...grpc.CallOption) (*UserDeviceShareIndexResp, error) {
	out := new(UserDeviceShareIndexResp)
	err := c.cc.Invoke(ctx, UserDevice_UserDeviceShareIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeviceClient) UserDeviceShareRead(ctx context.Context, in *UserDeviceShareReadReq, opts ...grpc.CallOption) (*UserDeviceShareInfo, error) {
	out := new(UserDeviceShareInfo)
	err := c.cc.Invoke(ctx, UserDevice_UserDeviceShareRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDeviceServer is the server API for UserDevice service.
// All implementations must embed UnimplementedUserDeviceServer
// for forward compatibility
type UserDeviceServer interface {
	// 用户收藏的设备
	UserDeviceCollectMultiCreate(context.Context, *UserDeviceCollectSave) (*Empty, error)
	UserDeviceCollectMultiDelete(context.Context, *UserDeviceCollectSave) (*Empty, error)
	UserDeviceCollectIndex(context.Context, *Empty) (*UserDeviceCollectSave, error)
	// 分享设备
	UserDeviceShareCreate(context.Context, *UserDeviceShareInfo) (*WithID, error)
	// 更新权限
	UserDeviceShareUpdate(context.Context, *UserDeviceShareInfo) (*Empty, error)
	// 取消分享设备
	UserDeviceShareDelete(context.Context, *WithID) (*Empty, error)
	// 获取设备分享列表(只有设备的所有者才能获取)
	UserDeviceShareIndex(context.Context, *UserDeviceShareIndexReq) (*UserDeviceShareIndexResp, error)
	// 获取设备分享的详情
	UserDeviceShareRead(context.Context, *UserDeviceShareReadReq) (*UserDeviceShareInfo, error)
	mustEmbedUnimplementedUserDeviceServer()
}

// UnimplementedUserDeviceServer must be embedded to have forward compatible implementations.
type UnimplementedUserDeviceServer struct {
}

func (UnimplementedUserDeviceServer) UserDeviceCollectMultiCreate(context.Context, *UserDeviceCollectSave) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceCollectMultiCreate not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceCollectMultiDelete(context.Context, *UserDeviceCollectSave) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceCollectMultiDelete not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceCollectIndex(context.Context, *Empty) (*UserDeviceCollectSave, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceCollectIndex not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareCreate(context.Context, *UserDeviceShareInfo) (*WithID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareCreate not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareUpdate(context.Context, *UserDeviceShareInfo) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareUpdate not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareDelete(context.Context, *WithID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareDelete not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareIndex(context.Context, *UserDeviceShareIndexReq) (*UserDeviceShareIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareIndex not implemented")
}
func (UnimplementedUserDeviceServer) UserDeviceShareRead(context.Context, *UserDeviceShareReadReq) (*UserDeviceShareInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeviceShareRead not implemented")
}
func (UnimplementedUserDeviceServer) mustEmbedUnimplementedUserDeviceServer() {}

// UnsafeUserDeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDeviceServer will
// result in compilation errors.
type UnsafeUserDeviceServer interface {
	mustEmbedUnimplementedUserDeviceServer()
}

func RegisterUserDeviceServer(s grpc.ServiceRegistrar, srv UserDeviceServer) {
	s.RegisterService(&UserDevice_ServiceDesc, srv)
}

func _UserDevice_UserDeviceCollectMultiCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceCollectSave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceCollectMultiCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDevice_UserDeviceCollectMultiCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceCollectMultiCreate(ctx, req.(*UserDeviceCollectSave))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceCollectMultiDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceCollectSave)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceCollectMultiDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDevice_UserDeviceCollectMultiDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceCollectMultiDelete(ctx, req.(*UserDeviceCollectSave))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceCollectIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceCollectIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDevice_UserDeviceCollectIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceCollectIndex(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDevice_UserDeviceShareCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareCreate(ctx, req.(*UserDeviceShareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDevice_UserDeviceShareUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareUpdate(ctx, req.(*UserDeviceShareInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDevice_UserDeviceShareDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareDelete(ctx, req.(*WithID))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDevice_UserDeviceShareIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareIndex(ctx, req.(*UserDeviceShareIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDevice_UserDeviceShareRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeviceShareReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeviceServer).UserDeviceShareRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDevice_UserDeviceShareRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeviceServer).UserDeviceShareRead(ctx, req.(*UserDeviceShareReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDevice_ServiceDesc is the grpc.ServiceDesc for UserDevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.userDevice",
	HandlerType: (*UserDeviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userDeviceCollectMultiCreate",
			Handler:    _UserDevice_UserDeviceCollectMultiCreate_Handler,
		},
		{
			MethodName: "userDeviceCollectMultiDelete",
			Handler:    _UserDevice_UserDeviceCollectMultiDelete_Handler,
		},
		{
			MethodName: "userDeviceCollectIndex",
			Handler:    _UserDevice_UserDeviceCollectIndex_Handler,
		},
		{
			MethodName: "userDeviceShareCreate",
			Handler:    _UserDevice_UserDeviceShareCreate_Handler,
		},
		{
			MethodName: "userDeviceShareUpdate",
			Handler:    _UserDevice_UserDeviceShareUpdate_Handler,
		},
		{
			MethodName: "userDeviceShareDelete",
			Handler:    _UserDevice_UserDeviceShareDelete_Handler,
		},
		{
			MethodName: "userDeviceShareIndex",
			Handler:    _UserDevice_UserDeviceShareIndex_Handler,
		},
		{
			MethodName: "userDeviceShareRead",
			Handler:    _UserDevice_UserDeviceShareRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	OTAFirmwareManage_OtaFirmwareCreate_FullMethodName = "/dm.OTAFirmwareManage/otaFirmwareCreate"
	OTAFirmwareManage_OtaFirmwareUpdate_FullMethodName = "/dm.OTAFirmwareManage/otaFirmwareUpdate"
	OTAFirmwareManage_OtaFirmwareDelete_FullMethodName = "/dm.OTAFirmwareManage/otaFirmwareDelete"
	OTAFirmwareManage_OtaFirmwareIndex_FullMethodName  = "/dm.OTAFirmwareManage/otaFirmwareIndex"
	OTAFirmwareManage_OtaFirmwareRead_FullMethodName   = "/dm.OTAFirmwareManage/otaFirmwareRead"
)

// OTAFirmwareManageClient is the client API for OTAFirmwareManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OTAFirmwareManageClient interface {
	// 添加升级包
	OtaFirmwareCreate(ctx context.Context, in *OtaFirmwareCreateReq, opts ...grpc.CallOption) (*OtaFirmwareResp, error)
	// 修改升级包
	OtaFirmwareUpdate(ctx context.Context, in *OtaFirmwareUpdateReq, opts ...grpc.CallOption) (*OtaFirmwareResp, error)
	// 删除升级包
	OtaFirmwareDelete(ctx context.Context, in *OtaFirmwareDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	// 升级包列表
	OtaFirmwareIndex(ctx context.Context, in *OtaFirmwareIndexReq, opts ...grpc.CallOption) (*OtaFirmwareIndexResp, error)
	// 查询升级包
	OtaFirmwareRead(ctx context.Context, in *OtaFirmwareReadReq, opts ...grpc.CallOption) (*OtaFirmwareReadResp, error)
}

type oTAFirmwareManageClient struct {
	cc grpc.ClientConnInterface
}

func NewOTAFirmwareManageClient(cc grpc.ClientConnInterface) OTAFirmwareManageClient {
	return &oTAFirmwareManageClient{cc}
}

func (c *oTAFirmwareManageClient) OtaFirmwareCreate(ctx context.Context, in *OtaFirmwareCreateReq, opts ...grpc.CallOption) (*OtaFirmwareResp, error) {
	out := new(OtaFirmwareResp)
	err := c.cc.Invoke(ctx, OTAFirmwareManage_OtaFirmwareCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAFirmwareManageClient) OtaFirmwareUpdate(ctx context.Context, in *OtaFirmwareUpdateReq, opts ...grpc.CallOption) (*OtaFirmwareResp, error) {
	out := new(OtaFirmwareResp)
	err := c.cc.Invoke(ctx, OTAFirmwareManage_OtaFirmwareUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAFirmwareManageClient) OtaFirmwareDelete(ctx context.Context, in *OtaFirmwareDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OTAFirmwareManage_OtaFirmwareDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAFirmwareManageClient) OtaFirmwareIndex(ctx context.Context, in *OtaFirmwareIndexReq, opts ...grpc.CallOption) (*OtaFirmwareIndexResp, error) {
	out := new(OtaFirmwareIndexResp)
	err := c.cc.Invoke(ctx, OTAFirmwareManage_OtaFirmwareIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAFirmwareManageClient) OtaFirmwareRead(ctx context.Context, in *OtaFirmwareReadReq, opts ...grpc.CallOption) (*OtaFirmwareReadResp, error) {
	out := new(OtaFirmwareReadResp)
	err := c.cc.Invoke(ctx, OTAFirmwareManage_OtaFirmwareRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OTAFirmwareManageServer is the server API for OTAFirmwareManage service.
// All implementations must embed UnimplementedOTAFirmwareManageServer
// for forward compatibility
type OTAFirmwareManageServer interface {
	// 添加升级包
	OtaFirmwareCreate(context.Context, *OtaFirmwareCreateReq) (*OtaFirmwareResp, error)
	// 修改升级包
	OtaFirmwareUpdate(context.Context, *OtaFirmwareUpdateReq) (*OtaFirmwareResp, error)
	// 删除升级包
	OtaFirmwareDelete(context.Context, *OtaFirmwareDeleteReq) (*Empty, error)
	// 升级包列表
	OtaFirmwareIndex(context.Context, *OtaFirmwareIndexReq) (*OtaFirmwareIndexResp, error)
	// 查询升级包
	OtaFirmwareRead(context.Context, *OtaFirmwareReadReq) (*OtaFirmwareReadResp, error)
	mustEmbedUnimplementedOTAFirmwareManageServer()
}

// UnimplementedOTAFirmwareManageServer must be embedded to have forward compatible implementations.
type UnimplementedOTAFirmwareManageServer struct {
}

func (UnimplementedOTAFirmwareManageServer) OtaFirmwareCreate(context.Context, *OtaFirmwareCreateReq) (*OtaFirmwareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareCreate not implemented")
}
func (UnimplementedOTAFirmwareManageServer) OtaFirmwareUpdate(context.Context, *OtaFirmwareUpdateReq) (*OtaFirmwareResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareUpdate not implemented")
}
func (UnimplementedOTAFirmwareManageServer) OtaFirmwareDelete(context.Context, *OtaFirmwareDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareDelete not implemented")
}
func (UnimplementedOTAFirmwareManageServer) OtaFirmwareIndex(context.Context, *OtaFirmwareIndexReq) (*OtaFirmwareIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareIndex not implemented")
}
func (UnimplementedOTAFirmwareManageServer) OtaFirmwareRead(context.Context, *OtaFirmwareReadReq) (*OtaFirmwareReadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaFirmwareRead not implemented")
}
func (UnimplementedOTAFirmwareManageServer) mustEmbedUnimplementedOTAFirmwareManageServer() {}

// UnsafeOTAFirmwareManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OTAFirmwareManageServer will
// result in compilation errors.
type UnsafeOTAFirmwareManageServer interface {
	mustEmbedUnimplementedOTAFirmwareManageServer()
}

func RegisterOTAFirmwareManageServer(s grpc.ServiceRegistrar, srv OTAFirmwareManageServer) {
	s.RegisterService(&OTAFirmwareManage_ServiceDesc, srv)
}

func _OTAFirmwareManage_OtaFirmwareCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAFirmwareManageServer).OtaFirmwareCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAFirmwareManage_OtaFirmwareCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAFirmwareManageServer).OtaFirmwareCreate(ctx, req.(*OtaFirmwareCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAFirmwareManage_OtaFirmwareUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAFirmwareManageServer).OtaFirmwareUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAFirmwareManage_OtaFirmwareUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAFirmwareManageServer).OtaFirmwareUpdate(ctx, req.(*OtaFirmwareUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAFirmwareManage_OtaFirmwareDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAFirmwareManageServer).OtaFirmwareDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAFirmwareManage_OtaFirmwareDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAFirmwareManageServer).OtaFirmwareDelete(ctx, req.(*OtaFirmwareDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAFirmwareManage_OtaFirmwareIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAFirmwareManageServer).OtaFirmwareIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAFirmwareManage_OtaFirmwareIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAFirmwareManageServer).OtaFirmwareIndex(ctx, req.(*OtaFirmwareIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAFirmwareManage_OtaFirmwareRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareReadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAFirmwareManageServer).OtaFirmwareRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAFirmwareManage_OtaFirmwareRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAFirmwareManageServer).OtaFirmwareRead(ctx, req.(*OtaFirmwareReadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OTAFirmwareManage_ServiceDesc is the grpc.ServiceDesc for OTAFirmwareManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OTAFirmwareManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.OTAFirmwareManage",
	HandlerType: (*OTAFirmwareManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "otaFirmwareCreate",
			Handler:    _OTAFirmwareManage_OtaFirmwareCreate_Handler,
		},
		{
			MethodName: "otaFirmwareUpdate",
			Handler:    _OTAFirmwareManage_OtaFirmwareUpdate_Handler,
		},
		{
			MethodName: "otaFirmwareDelete",
			Handler:    _OTAFirmwareManage_OtaFirmwareDelete_Handler,
		},
		{
			MethodName: "otaFirmwareIndex",
			Handler:    _OTAFirmwareManage_OtaFirmwareIndex_Handler,
		},
		{
			MethodName: "otaFirmwareRead",
			Handler:    _OTAFirmwareManage_OtaFirmwareRead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	OTAJobManage_OtaVerifyJobCreate_FullMethodName         = "/dm.OTAJobManage/otaVerifyJobCreate"
	OTAJobManage_OtaStaticUpgradeJobCreate_FullMethodName  = "/dm.OTAJobManage/otaStaticUpgradeJobCreate"
	OTAJobManage_OtaDynamicUpgradeJobCreate_FullMethodName = "/dm.OTAJobManage/otaDynamicUpgradeJobCreate"
	OTAJobManage_OtaJobByFirmwareIndex_FullMethodName      = "/dm.OTAJobManage/otaJobByFirmwareIndex"
	OTAJobManage_OtaJobByDeviceIndex_FullMethodName        = "/dm.OTAJobManage/otaJobByDeviceIndex"
	OTAJobManage_OtaJobRead_FullMethodName                 = "/dm.OTAJobManage/otaJobRead"
	OTAJobManage_CancelOTAStrategyByJob_FullMethodName     = "/dm.OTAJobManage/cancelOTAStrategyByJob"
)

// OTAJobManageClient is the client API for OTAJobManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OTAJobManageClient interface {
	// 验证升级包
	OtaVerifyJobCreate(ctx context.Context, in *OtaFirmwareVerifyReq, opts ...grpc.CallOption) (*UpgradeJobResp, error)
	// 创建静态升级批次
	OtaStaticUpgradeJobCreate(ctx context.Context, in *StaticUpgradeJobReq, opts ...grpc.CallOption) (*UpgradeJobResp, error)
	// 创建动态升级批次
	OtaDynamicUpgradeJobCreate(ctx context.Context, in *DynamicUpgradeJobReq, opts ...grpc.CallOption) (*UpgradeJobResp, error)
	// 获取升级包下的升级任务批次列表
	OtaJobByFirmwareIndex(ctx context.Context, in *OtaJobByFirmwareIndexReq, opts ...grpc.CallOption) (*OtaJobInfoIndexResp, error)
	// 获取设备所在的升级包升级批次列表
	OtaJobByDeviceIndex(ctx context.Context, in *OtaJobByDeviceIndexReq, opts ...grpc.CallOption) (*OtaJobInfoIndexResp, error)
	// 查询指定升级批次的详情
	OtaJobRead(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*OtaJobInfo, error)
	// 取消动态升级策略
	CancelOTAStrategyByJob(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Empty, error)
}

type oTAJobManageClient struct {
	cc grpc.ClientConnInterface
}

func NewOTAJobManageClient(cc grpc.ClientConnInterface) OTAJobManageClient {
	return &oTAJobManageClient{cc}
}

func (c *oTAJobManageClient) OtaVerifyJobCreate(ctx context.Context, in *OtaFirmwareVerifyReq, opts ...grpc.CallOption) (*UpgradeJobResp, error) {
	out := new(UpgradeJobResp)
	err := c.cc.Invoke(ctx, OTAJobManage_OtaVerifyJobCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAJobManageClient) OtaStaticUpgradeJobCreate(ctx context.Context, in *StaticUpgradeJobReq, opts ...grpc.CallOption) (*UpgradeJobResp, error) {
	out := new(UpgradeJobResp)
	err := c.cc.Invoke(ctx, OTAJobManage_OtaStaticUpgradeJobCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAJobManageClient) OtaDynamicUpgradeJobCreate(ctx context.Context, in *DynamicUpgradeJobReq, opts ...grpc.CallOption) (*UpgradeJobResp, error) {
	out := new(UpgradeJobResp)
	err := c.cc.Invoke(ctx, OTAJobManage_OtaDynamicUpgradeJobCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAJobManageClient) OtaJobByFirmwareIndex(ctx context.Context, in *OtaJobByFirmwareIndexReq, opts ...grpc.CallOption) (*OtaJobInfoIndexResp, error) {
	out := new(OtaJobInfoIndexResp)
	err := c.cc.Invoke(ctx, OTAJobManage_OtaJobByFirmwareIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAJobManageClient) OtaJobByDeviceIndex(ctx context.Context, in *OtaJobByDeviceIndexReq, opts ...grpc.CallOption) (*OtaJobInfoIndexResp, error) {
	out := new(OtaJobInfoIndexResp)
	err := c.cc.Invoke(ctx, OTAJobManage_OtaJobByDeviceIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAJobManageClient) OtaJobRead(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*OtaJobInfo, error) {
	out := new(OtaJobInfo)
	err := c.cc.Invoke(ctx, OTAJobManage_OtaJobRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAJobManageClient) CancelOTAStrategyByJob(ctx context.Context, in *JobReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OTAJobManage_CancelOTAStrategyByJob_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OTAJobManageServer is the server API for OTAJobManage service.
// All implementations must embed UnimplementedOTAJobManageServer
// for forward compatibility
type OTAJobManageServer interface {
	// 验证升级包
	OtaVerifyJobCreate(context.Context, *OtaFirmwareVerifyReq) (*UpgradeJobResp, error)
	// 创建静态升级批次
	OtaStaticUpgradeJobCreate(context.Context, *StaticUpgradeJobReq) (*UpgradeJobResp, error)
	// 创建动态升级批次
	OtaDynamicUpgradeJobCreate(context.Context, *DynamicUpgradeJobReq) (*UpgradeJobResp, error)
	// 获取升级包下的升级任务批次列表
	OtaJobByFirmwareIndex(context.Context, *OtaJobByFirmwareIndexReq) (*OtaJobInfoIndexResp, error)
	// 获取设备所在的升级包升级批次列表
	OtaJobByDeviceIndex(context.Context, *OtaJobByDeviceIndexReq) (*OtaJobInfoIndexResp, error)
	// 查询指定升级批次的详情
	OtaJobRead(context.Context, *JobReq) (*OtaJobInfo, error)
	// 取消动态升级策略
	CancelOTAStrategyByJob(context.Context, *JobReq) (*Empty, error)
	mustEmbedUnimplementedOTAJobManageServer()
}

// UnimplementedOTAJobManageServer must be embedded to have forward compatible implementations.
type UnimplementedOTAJobManageServer struct {
}

func (UnimplementedOTAJobManageServer) OtaVerifyJobCreate(context.Context, *OtaFirmwareVerifyReq) (*UpgradeJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaVerifyJobCreate not implemented")
}
func (UnimplementedOTAJobManageServer) OtaStaticUpgradeJobCreate(context.Context, *StaticUpgradeJobReq) (*UpgradeJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaStaticUpgradeJobCreate not implemented")
}
func (UnimplementedOTAJobManageServer) OtaDynamicUpgradeJobCreate(context.Context, *DynamicUpgradeJobReq) (*UpgradeJobResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaDynamicUpgradeJobCreate not implemented")
}
func (UnimplementedOTAJobManageServer) OtaJobByFirmwareIndex(context.Context, *OtaJobByFirmwareIndexReq) (*OtaJobInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaJobByFirmwareIndex not implemented")
}
func (UnimplementedOTAJobManageServer) OtaJobByDeviceIndex(context.Context, *OtaJobByDeviceIndexReq) (*OtaJobInfoIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaJobByDeviceIndex not implemented")
}
func (UnimplementedOTAJobManageServer) OtaJobRead(context.Context, *JobReq) (*OtaJobInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaJobRead not implemented")
}
func (UnimplementedOTAJobManageServer) CancelOTAStrategyByJob(context.Context, *JobReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOTAStrategyByJob not implemented")
}
func (UnimplementedOTAJobManageServer) mustEmbedUnimplementedOTAJobManageServer() {}

// UnsafeOTAJobManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OTAJobManageServer will
// result in compilation errors.
type UnsafeOTAJobManageServer interface {
	mustEmbedUnimplementedOTAJobManageServer()
}

func RegisterOTAJobManageServer(s grpc.ServiceRegistrar, srv OTAJobManageServer) {
	s.RegisterService(&OTAJobManage_ServiceDesc, srv)
}

func _OTAJobManage_OtaVerifyJobCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaFirmwareVerifyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAJobManageServer).OtaVerifyJobCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAJobManage_OtaVerifyJobCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAJobManageServer).OtaVerifyJobCreate(ctx, req.(*OtaFirmwareVerifyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAJobManage_OtaStaticUpgradeJobCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaticUpgradeJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAJobManageServer).OtaStaticUpgradeJobCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAJobManage_OtaStaticUpgradeJobCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAJobManageServer).OtaStaticUpgradeJobCreate(ctx, req.(*StaticUpgradeJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAJobManage_OtaDynamicUpgradeJobCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DynamicUpgradeJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAJobManageServer).OtaDynamicUpgradeJobCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAJobManage_OtaDynamicUpgradeJobCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAJobManageServer).OtaDynamicUpgradeJobCreate(ctx, req.(*DynamicUpgradeJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAJobManage_OtaJobByFirmwareIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaJobByFirmwareIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAJobManageServer).OtaJobByFirmwareIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAJobManage_OtaJobByFirmwareIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAJobManageServer).OtaJobByFirmwareIndex(ctx, req.(*OtaJobByFirmwareIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAJobManage_OtaJobByDeviceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtaJobByDeviceIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAJobManageServer).OtaJobByDeviceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAJobManage_OtaJobByDeviceIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAJobManageServer).OtaJobByDeviceIndex(ctx, req.(*OtaJobByDeviceIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAJobManage_OtaJobRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAJobManageServer).OtaJobRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAJobManage_OtaJobRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAJobManageServer).OtaJobRead(ctx, req.(*JobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAJobManage_CancelOTAStrategyByJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAJobManageServer).CancelOTAStrategyByJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAJobManage_CancelOTAStrategyByJob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAJobManageServer).CancelOTAStrategyByJob(ctx, req.(*JobReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OTAJobManage_ServiceDesc is the grpc.ServiceDesc for OTAJobManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OTAJobManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.OTAJobManage",
	HandlerType: (*OTAJobManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "otaVerifyJobCreate",
			Handler:    _OTAJobManage_OtaVerifyJobCreate_Handler,
		},
		{
			MethodName: "otaStaticUpgradeJobCreate",
			Handler:    _OTAJobManage_OtaStaticUpgradeJobCreate_Handler,
		},
		{
			MethodName: "otaDynamicUpgradeJobCreate",
			Handler:    _OTAJobManage_OtaDynamicUpgradeJobCreate_Handler,
		},
		{
			MethodName: "otaJobByFirmwareIndex",
			Handler:    _OTAJobManage_OtaJobByFirmwareIndex_Handler,
		},
		{
			MethodName: "otaJobByDeviceIndex",
			Handler:    _OTAJobManage_OtaJobByDeviceIndex_Handler,
		},
		{
			MethodName: "otaJobRead",
			Handler:    _OTAJobManage_OtaJobRead_Handler,
		},
		{
			MethodName: "cancelOTAStrategyByJob",
			Handler:    _OTAJobManage_CancelOTAStrategyByJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	OTAUpgradeTaskManage_OtaTaskByJobIndex_FullMethodName              = "/dm.OTAUpgradeTaskManage/otaTaskByJobIndex"
	OTAUpgradeTaskManage_OtaTaskByJobCancel_FullMethodName             = "/dm.OTAUpgradeTaskManage/otaTaskByJobCancel"
	OTAUpgradeTaskManage_OtaTaskByDeviceCancel_FullMethodName          = "/dm.OTAUpgradeTaskManage/otaTaskByDeviceCancel"
	OTAUpgradeTaskManage_OtaTaskConfirm_FullMethodName                 = "/dm.OTAUpgradeTaskManage/otaTaskConfirm"
	OTAUpgradeTaskManage_OtaUnfinishedTaskByDeviceIndex_FullMethodName = "/dm.OTAUpgradeTaskManage/otaUnfinishedTaskByDeviceIndex"
	OTAUpgradeTaskManage_OtaTaskReUpgrade_FullMethodName               = "/dm.OTAUpgradeTaskManage/otaTaskReUpgrade"
)

// OTAUpgradeTaskManageClient is the client API for OTAUpgradeTaskManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OTAUpgradeTaskManageClient interface {
	// 查询指定升级批次下的设备升级作业列表
	OtaTaskByJobIndex(ctx context.Context, in *OTATaskByJobIndexReq, opts ...grpc.CallOption) (*OtaTaskByJobIndexResp, error)
	// 取消指定批次下的设备升级作业
	OtaTaskByJobCancel(ctx context.Context, in *OTATaskByJobCancelReq, opts ...grpc.CallOption) (*Empty, error)
	// 取消指定OTA升级包下状态为待确认、待推送、已推送、升级中状态的设备升级作业
	OtaTaskByDeviceCancel(ctx context.Context, in *OTATaskByDeviceCancelReq, opts ...grpc.CallOption) (*Empty, error)
	// 批量确认，处于待确认状态的设备升级作业
	OtaTaskConfirm(ctx context.Context, in *OTATaskConfirmReq, opts ...grpc.CallOption) (*Empty, error)
	// 查询指定设备下，未完成状态的设备升级作业
	OtaUnfinishedTaskByDeviceIndex(ctx context.Context, in *OTAUnfinishedTaskByDeviceIndexReq, opts ...grpc.CallOption) (*OTAUnfinishedTaskByDeviceIndexResp, error)
	// 重新升级指定批次下升级失败或升级取消的设备升级作业
	OtaTaskReUpgrade(ctx context.Context, in *OTATaskReUpgradeReq, opts ...grpc.CallOption) (*Empty, error)
}

type oTAUpgradeTaskManageClient struct {
	cc grpc.ClientConnInterface
}

func NewOTAUpgradeTaskManageClient(cc grpc.ClientConnInterface) OTAUpgradeTaskManageClient {
	return &oTAUpgradeTaskManageClient{cc}
}

func (c *oTAUpgradeTaskManageClient) OtaTaskByJobIndex(ctx context.Context, in *OTATaskByJobIndexReq, opts ...grpc.CallOption) (*OtaTaskByJobIndexResp, error) {
	out := new(OtaTaskByJobIndexResp)
	err := c.cc.Invoke(ctx, OTAUpgradeTaskManage_OtaTaskByJobIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAUpgradeTaskManageClient) OtaTaskByJobCancel(ctx context.Context, in *OTATaskByJobCancelReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OTAUpgradeTaskManage_OtaTaskByJobCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAUpgradeTaskManageClient) OtaTaskByDeviceCancel(ctx context.Context, in *OTATaskByDeviceCancelReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OTAUpgradeTaskManage_OtaTaskByDeviceCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAUpgradeTaskManageClient) OtaTaskConfirm(ctx context.Context, in *OTATaskConfirmReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OTAUpgradeTaskManage_OtaTaskConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAUpgradeTaskManageClient) OtaUnfinishedTaskByDeviceIndex(ctx context.Context, in *OTAUnfinishedTaskByDeviceIndexReq, opts ...grpc.CallOption) (*OTAUnfinishedTaskByDeviceIndexResp, error) {
	out := new(OTAUnfinishedTaskByDeviceIndexResp)
	err := c.cc.Invoke(ctx, OTAUpgradeTaskManage_OtaUnfinishedTaskByDeviceIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAUpgradeTaskManageClient) OtaTaskReUpgrade(ctx context.Context, in *OTATaskReUpgradeReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OTAUpgradeTaskManage_OtaTaskReUpgrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OTAUpgradeTaskManageServer is the server API for OTAUpgradeTaskManage service.
// All implementations must embed UnimplementedOTAUpgradeTaskManageServer
// for forward compatibility
type OTAUpgradeTaskManageServer interface {
	// 查询指定升级批次下的设备升级作业列表
	OtaTaskByJobIndex(context.Context, *OTATaskByJobIndexReq) (*OtaTaskByJobIndexResp, error)
	// 取消指定批次下的设备升级作业
	OtaTaskByJobCancel(context.Context, *OTATaskByJobCancelReq) (*Empty, error)
	// 取消指定OTA升级包下状态为待确认、待推送、已推送、升级中状态的设备升级作业
	OtaTaskByDeviceCancel(context.Context, *OTATaskByDeviceCancelReq) (*Empty, error)
	// 批量确认，处于待确认状态的设备升级作业
	OtaTaskConfirm(context.Context, *OTATaskConfirmReq) (*Empty, error)
	// 查询指定设备下，未完成状态的设备升级作业
	OtaUnfinishedTaskByDeviceIndex(context.Context, *OTAUnfinishedTaskByDeviceIndexReq) (*OTAUnfinishedTaskByDeviceIndexResp, error)
	// 重新升级指定批次下升级失败或升级取消的设备升级作业
	OtaTaskReUpgrade(context.Context, *OTATaskReUpgradeReq) (*Empty, error)
	mustEmbedUnimplementedOTAUpgradeTaskManageServer()
}

// UnimplementedOTAUpgradeTaskManageServer must be embedded to have forward compatible implementations.
type UnimplementedOTAUpgradeTaskManageServer struct {
}

func (UnimplementedOTAUpgradeTaskManageServer) OtaTaskByJobIndex(context.Context, *OTATaskByJobIndexReq) (*OtaTaskByJobIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskByJobIndex not implemented")
}
func (UnimplementedOTAUpgradeTaskManageServer) OtaTaskByJobCancel(context.Context, *OTATaskByJobCancelReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskByJobCancel not implemented")
}
func (UnimplementedOTAUpgradeTaskManageServer) OtaTaskByDeviceCancel(context.Context, *OTATaskByDeviceCancelReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskByDeviceCancel not implemented")
}
func (UnimplementedOTAUpgradeTaskManageServer) OtaTaskConfirm(context.Context, *OTATaskConfirmReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskConfirm not implemented")
}
func (UnimplementedOTAUpgradeTaskManageServer) OtaUnfinishedTaskByDeviceIndex(context.Context, *OTAUnfinishedTaskByDeviceIndexReq) (*OTAUnfinishedTaskByDeviceIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaUnfinishedTaskByDeviceIndex not implemented")
}
func (UnimplementedOTAUpgradeTaskManageServer) OtaTaskReUpgrade(context.Context, *OTATaskReUpgradeReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaTaskReUpgrade not implemented")
}
func (UnimplementedOTAUpgradeTaskManageServer) mustEmbedUnimplementedOTAUpgradeTaskManageServer() {}

// UnsafeOTAUpgradeTaskManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OTAUpgradeTaskManageServer will
// result in compilation errors.
type UnsafeOTAUpgradeTaskManageServer interface {
	mustEmbedUnimplementedOTAUpgradeTaskManageServer()
}

func RegisterOTAUpgradeTaskManageServer(s grpc.ServiceRegistrar, srv OTAUpgradeTaskManageServer) {
	s.RegisterService(&OTAUpgradeTaskManage_ServiceDesc, srv)
}

func _OTAUpgradeTaskManage_OtaTaskByJobIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTATaskByJobIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAUpgradeTaskManageServer).OtaTaskByJobIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAUpgradeTaskManage_OtaTaskByJobIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAUpgradeTaskManageServer).OtaTaskByJobIndex(ctx, req.(*OTATaskByJobIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAUpgradeTaskManage_OtaTaskByJobCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTATaskByJobCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAUpgradeTaskManageServer).OtaTaskByJobCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAUpgradeTaskManage_OtaTaskByJobCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAUpgradeTaskManageServer).OtaTaskByJobCancel(ctx, req.(*OTATaskByJobCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAUpgradeTaskManage_OtaTaskByDeviceCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTATaskByDeviceCancelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAUpgradeTaskManageServer).OtaTaskByDeviceCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAUpgradeTaskManage_OtaTaskByDeviceCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAUpgradeTaskManageServer).OtaTaskByDeviceCancel(ctx, req.(*OTATaskByDeviceCancelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAUpgradeTaskManage_OtaTaskConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTATaskConfirmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAUpgradeTaskManageServer).OtaTaskConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAUpgradeTaskManage_OtaTaskConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAUpgradeTaskManageServer).OtaTaskConfirm(ctx, req.(*OTATaskConfirmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAUpgradeTaskManage_OtaUnfinishedTaskByDeviceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTAUnfinishedTaskByDeviceIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAUpgradeTaskManageServer).OtaUnfinishedTaskByDeviceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAUpgradeTaskManage_OtaUnfinishedTaskByDeviceIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAUpgradeTaskManageServer).OtaUnfinishedTaskByDeviceIndex(ctx, req.(*OTAUnfinishedTaskByDeviceIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAUpgradeTaskManage_OtaTaskReUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTATaskReUpgradeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAUpgradeTaskManageServer).OtaTaskReUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAUpgradeTaskManage_OtaTaskReUpgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAUpgradeTaskManageServer).OtaTaskReUpgrade(ctx, req.(*OTATaskReUpgradeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OTAUpgradeTaskManage_ServiceDesc is the grpc.ServiceDesc for OTAUpgradeTaskManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OTAUpgradeTaskManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.OTAUpgradeTaskManage",
	HandlerType: (*OTAUpgradeTaskManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "otaTaskByJobIndex",
			Handler:    _OTAUpgradeTaskManage_OtaTaskByJobIndex_Handler,
		},
		{
			MethodName: "otaTaskByJobCancel",
			Handler:    _OTAUpgradeTaskManage_OtaTaskByJobCancel_Handler,
		},
		{
			MethodName: "otaTaskByDeviceCancel",
			Handler:    _OTAUpgradeTaskManage_OtaTaskByDeviceCancel_Handler,
		},
		{
			MethodName: "otaTaskConfirm",
			Handler:    _OTAUpgradeTaskManage_OtaTaskConfirm_Handler,
		},
		{
			MethodName: "otaUnfinishedTaskByDeviceIndex",
			Handler:    _OTAUpgradeTaskManage_OtaUnfinishedTaskByDeviceIndex_Handler,
		},
		{
			MethodName: "otaTaskReUpgrade",
			Handler:    _OTAUpgradeTaskManage_OtaTaskReUpgrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}

const (
	OTAModuleManage_OtaModuleCreate_FullMethodName                = "/dm.OTAModuleManage/otaModuleCreate"
	OTAModuleManage_OtaModuleUpdate_FullMethodName                = "/dm.OTAModuleManage/otaModuleUpdate"
	OTAModuleManage_OtaModuleDelete_FullMethodName                = "/dm.OTAModuleManage/otaModuleDelete"
	OTAModuleManage_OtaModuleByProductIndex_FullMethodName        = "/dm.OTAModuleManage/otaModuleByProductIndex"
	OTAModuleManage_OtaModuleVersionsByDeviceIndex_FullMethodName = "/dm.OTAModuleManage/otaModuleVersionsByDeviceIndex"
)

// OTAModuleManageClient is the client API for OTAModuleManage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OTAModuleManageClient interface {
	// 创建产品的OTA模块
	OtaModuleCreate(ctx context.Context, in *OTAModuleReq, opts ...grpc.CallOption) (*Empty, error)
	// 修改OTA模块别名、描述
	OtaModuleUpdate(ctx context.Context, in *OTAModuleReq, opts ...grpc.CallOption) (*Empty, error)
	// 删除自定义OTA模块
	OtaModuleDelete(ctx context.Context, in *OTAModuleDeleteReq, opts ...grpc.CallOption) (*Empty, error)
	// 查询产品下的OTA模块列表
	OtaModuleByProductIndex(ctx context.Context, in *OTAModuleIndexReq, opts ...grpc.CallOption) (*OTAModuleIndexResp, error)
	// 查询设备上报过的OTA模块版本列表
	OtaModuleVersionsByDeviceIndex(ctx context.Context, in *OTAModuleIndexReq, opts ...grpc.CallOption) (*OTAModuleVersionsIndexResp, error)
}

type oTAModuleManageClient struct {
	cc grpc.ClientConnInterface
}

func NewOTAModuleManageClient(cc grpc.ClientConnInterface) OTAModuleManageClient {
	return &oTAModuleManageClient{cc}
}

func (c *oTAModuleManageClient) OtaModuleCreate(ctx context.Context, in *OTAModuleReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OTAModuleManage_OtaModuleCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAModuleManageClient) OtaModuleUpdate(ctx context.Context, in *OTAModuleReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OTAModuleManage_OtaModuleUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAModuleManageClient) OtaModuleDelete(ctx context.Context, in *OTAModuleDeleteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, OTAModuleManage_OtaModuleDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAModuleManageClient) OtaModuleByProductIndex(ctx context.Context, in *OTAModuleIndexReq, opts ...grpc.CallOption) (*OTAModuleIndexResp, error) {
	out := new(OTAModuleIndexResp)
	err := c.cc.Invoke(ctx, OTAModuleManage_OtaModuleByProductIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oTAModuleManageClient) OtaModuleVersionsByDeviceIndex(ctx context.Context, in *OTAModuleIndexReq, opts ...grpc.CallOption) (*OTAModuleVersionsIndexResp, error) {
	out := new(OTAModuleVersionsIndexResp)
	err := c.cc.Invoke(ctx, OTAModuleManage_OtaModuleVersionsByDeviceIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OTAModuleManageServer is the server API for OTAModuleManage service.
// All implementations must embed UnimplementedOTAModuleManageServer
// for forward compatibility
type OTAModuleManageServer interface {
	// 创建产品的OTA模块
	OtaModuleCreate(context.Context, *OTAModuleReq) (*Empty, error)
	// 修改OTA模块别名、描述
	OtaModuleUpdate(context.Context, *OTAModuleReq) (*Empty, error)
	// 删除自定义OTA模块
	OtaModuleDelete(context.Context, *OTAModuleDeleteReq) (*Empty, error)
	// 查询产品下的OTA模块列表
	OtaModuleByProductIndex(context.Context, *OTAModuleIndexReq) (*OTAModuleIndexResp, error)
	// 查询设备上报过的OTA模块版本列表
	OtaModuleVersionsByDeviceIndex(context.Context, *OTAModuleIndexReq) (*OTAModuleVersionsIndexResp, error)
	mustEmbedUnimplementedOTAModuleManageServer()
}

// UnimplementedOTAModuleManageServer must be embedded to have forward compatible implementations.
type UnimplementedOTAModuleManageServer struct {
}

func (UnimplementedOTAModuleManageServer) OtaModuleCreate(context.Context, *OTAModuleReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaModuleCreate not implemented")
}
func (UnimplementedOTAModuleManageServer) OtaModuleUpdate(context.Context, *OTAModuleReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaModuleUpdate not implemented")
}
func (UnimplementedOTAModuleManageServer) OtaModuleDelete(context.Context, *OTAModuleDeleteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaModuleDelete not implemented")
}
func (UnimplementedOTAModuleManageServer) OtaModuleByProductIndex(context.Context, *OTAModuleIndexReq) (*OTAModuleIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaModuleByProductIndex not implemented")
}
func (UnimplementedOTAModuleManageServer) OtaModuleVersionsByDeviceIndex(context.Context, *OTAModuleIndexReq) (*OTAModuleVersionsIndexResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtaModuleVersionsByDeviceIndex not implemented")
}
func (UnimplementedOTAModuleManageServer) mustEmbedUnimplementedOTAModuleManageServer() {}

// UnsafeOTAModuleManageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OTAModuleManageServer will
// result in compilation errors.
type UnsafeOTAModuleManageServer interface {
	mustEmbedUnimplementedOTAModuleManageServer()
}

func RegisterOTAModuleManageServer(s grpc.ServiceRegistrar, srv OTAModuleManageServer) {
	s.RegisterService(&OTAModuleManage_ServiceDesc, srv)
}

func _OTAModuleManage_OtaModuleCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTAModuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAModuleManageServer).OtaModuleCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAModuleManage_OtaModuleCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAModuleManageServer).OtaModuleCreate(ctx, req.(*OTAModuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAModuleManage_OtaModuleUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTAModuleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAModuleManageServer).OtaModuleUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAModuleManage_OtaModuleUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAModuleManageServer).OtaModuleUpdate(ctx, req.(*OTAModuleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAModuleManage_OtaModuleDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTAModuleDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAModuleManageServer).OtaModuleDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAModuleManage_OtaModuleDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAModuleManageServer).OtaModuleDelete(ctx, req.(*OTAModuleDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAModuleManage_OtaModuleByProductIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTAModuleIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAModuleManageServer).OtaModuleByProductIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAModuleManage_OtaModuleByProductIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAModuleManageServer).OtaModuleByProductIndex(ctx, req.(*OTAModuleIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OTAModuleManage_OtaModuleVersionsByDeviceIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OTAModuleIndexReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OTAModuleManageServer).OtaModuleVersionsByDeviceIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OTAModuleManage_OtaModuleVersionsByDeviceIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OTAModuleManageServer).OtaModuleVersionsByDeviceIndex(ctx, req.(*OTAModuleIndexReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OTAModuleManage_ServiceDesc is the grpc.ServiceDesc for OTAModuleManage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OTAModuleManage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dm.OTAModuleManage",
	HandlerType: (*OTAModuleManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "otaModuleCreate",
			Handler:    _OTAModuleManage_OtaModuleCreate_Handler,
		},
		{
			MethodName: "otaModuleUpdate",
			Handler:    _OTAModuleManage_OtaModuleUpdate_Handler,
		},
		{
			MethodName: "otaModuleDelete",
			Handler:    _OTAModuleManage_OtaModuleDelete_Handler,
		},
		{
			MethodName: "otaModuleByProductIndex",
			Handler:    _OTAModuleManage_OtaModuleByProductIndex_Handler,
		},
		{
			MethodName: "otaModuleVersionsByDeviceIndex",
			Handler:    _OTAModuleManage_OtaModuleVersionsByDeviceIndex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dm.proto",
}
