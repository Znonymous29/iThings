// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.4
// source: proto/dm.proto

//import "proto/schemaInfo.proto";

package dm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{0}
}

type TimeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *TimeRange) Reset() {
	*x = TimeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeRange) ProtoMessage() {}

func (x *TimeRange) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeRange.ProtoReflect.Descriptor instead.
func (*TimeRange) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{1}
}

func (x *TimeRange) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *TimeRange) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	// 排序信息
	Orders []*PageInfo_OrderBy `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{2}
}

func (x *PageInfo) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *PageInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PageInfo) GetOrders() []*PageInfo_OrderBy {
	if x != nil {
		return x.Orders
	}
	return nil
}

type SendOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutToFail  int64 `protobuf:"varint,1,opt,name=timeoutToFail,proto3" json:"timeoutToFail,omitempty"`   //超时失败时间
	RequestTimeout int64 `protobuf:"varint,2,opt,name=requestTimeout,proto3" json:"requestTimeout,omitempty"` //请求超时,超时后会进行重试
	RetryInterval  int64 `protobuf:"varint,3,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`   //重试间隔
}

func (x *SendOption) Reset() {
	*x = SendOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendOption) ProtoMessage() {}

func (x *SendOption) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendOption.ProtoReflect.Descriptor instead.
func (*SendOption) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{3}
}

func (x *SendOption) GetTimeoutToFail() int64 {
	if x != nil {
		return x.TimeoutToFail
	}
	return 0
}

func (x *SendOption) GetRequestTimeout() int64 {
	if x != nil {
		return x.RequestTimeout
	}
	return 0
}

func (x *SendOption) GetRetryInterval() int64 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

type WithIDCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *WithIDCode) Reset() {
	*x = WithIDCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithIDCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithIDCode) ProtoMessage() {}

func (x *WithIDCode) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithIDCode.ProtoReflect.Descriptor instead.
func (*WithIDCode) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{4}
}

func (x *WithIDCode) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WithIDCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type WithID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *WithID) Reset() {
	*x = WithID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithID) ProtoMessage() {}

func (x *WithID) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithID.ProtoReflect.Descriptor instead.
func (*WithID) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{5}
}

func (x *WithID) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ProductInitReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// repeated string initType =1;//thing:物模型
	ProductIDs []string `protobuf:"bytes,2,rep,name=productIDs,proto3" json:"productIDs,omitempty"` //产品id,不填初始化所有产品
}

func (x *ProductInitReq) Reset() {
	*x = ProductInitReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInitReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInitReq) ProtoMessage() {}

func (x *ProductInitReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInitReq.ProtoReflect.Descriptor instead.
func (*ProductInitReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{6}
}

func (x *ProductInitReq) GetProductIDs() []string {
	if x != nil {
		return x.ProductIDs
	}
	return nil
}

type UserDeviceShareReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Device *DeviceCore `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"` //设备信息
}

func (x *UserDeviceShareReadReq) Reset() {
	*x = UserDeviceShareReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareReadReq) ProtoMessage() {}

func (x *UserDeviceShareReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareReadReq.ProtoReflect.Descriptor instead.
func (*UserDeviceShareReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{7}
}

func (x *UserDeviceShareReadReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserDeviceShareReadReq) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

type UserDeviceShareIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page   *PageInfo   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Device *DeviceCore `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"` //设备信息
}

func (x *UserDeviceShareIndexReq) Reset() {
	*x = UserDeviceShareIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareIndexReq) ProtoMessage() {}

func (x *UserDeviceShareIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareIndexReq.ProtoReflect.Descriptor instead.
func (*UserDeviceShareIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{8}
}

func (x *UserDeviceShareIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *UserDeviceShareIndexReq) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

type UserDeviceShareIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*UserDeviceShareInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *UserDeviceShareIndexResp) Reset() {
	*x = UserDeviceShareIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareIndexResp) ProtoMessage() {}

func (x *UserDeviceShareIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareIndexResp.ProtoReflect.Descriptor instead.
func (*UserDeviceShareIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{9}
}

func (x *UserDeviceShareIndexResp) GetList() []*UserDeviceShareInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *UserDeviceShareIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UserDeviceShareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Device     *DeviceCore `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`         //设备信息
	UserID     int64       `protobuf:"varint,3,opt,name=userID,proto3" json:"userID,omitempty"`        //分享的对象
	SchemaPerm []string    `protobuf:"bytes,4,rep,name=schemaPerm,proto3" json:"schemaPerm,omitempty"` //物模型权限,只需要填写需要授权并授权的物模型id
	AccessPerm []string    `protobuf:"bytes,5,rep,name=accessPerm,proto3" json:"accessPerm,omitempty"` //操作权限 hubLog:设备消息记录,ota:ota升级权限,deviceTiming:设备定时
}

func (x *UserDeviceShareInfo) Reset() {
	*x = UserDeviceShareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceShareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceShareInfo) ProtoMessage() {}

func (x *UserDeviceShareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceShareInfo.ProtoReflect.Descriptor instead.
func (*UserDeviceShareInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{10}
}

func (x *UserDeviceShareInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserDeviceShareInfo) GetDevice() *DeviceCore {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *UserDeviceShareInfo) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *UserDeviceShareInfo) GetSchemaPerm() []string {
	if x != nil {
		return x.SchemaPerm
	}
	return nil
}

func (x *UserDeviceShareInfo) GetAccessPerm() []string {
	if x != nil {
		return x.AccessPerm
	}
	return nil
}

type UserDeviceCollectSave struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DeviceCore `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *UserDeviceCollectSave) Reset() {
	*x = UserDeviceCollectSave{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeviceCollectSave) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeviceCollectSave) ProtoMessage() {}

func (x *UserDeviceCollectSave) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeviceCollectSave.ProtoReflect.Descriptor instead.
func (*UserDeviceCollectSave) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{11}
}

func (x *UserDeviceCollectSave) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

type ProductCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentID        int64                   `protobuf:"varint,2,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Name            string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	HeadImg         string                  `protobuf:"bytes,4,opt,name=headImg,proto3" json:"headImg,omitempty"`
	IsUpdateHeadImg bool                    `protobuf:"varint,5,opt,name=isUpdateHeadImg,proto3" json:"isUpdateHeadImg,omitempty"` //只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
	Desc            *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	IdPath          []int64                 `protobuf:"varint,9,rep,packed,name=idPath,proto3" json:"idPath,omitempty"`
	Children        []*ProductCategory      `protobuf:"bytes,7,rep,name=children,proto3" json:"children,omitempty"` //子节点
}

func (x *ProductCategory) Reset() {
	*x = ProductCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategory) ProtoMessage() {}

func (x *ProductCategory) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategory.ProtoReflect.Descriptor instead.
func (*ProductCategory) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{12}
}

func (x *ProductCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductCategory) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *ProductCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCategory) GetHeadImg() string {
	if x != nil {
		return x.HeadImg
	}
	return ""
}

func (x *ProductCategory) GetIsUpdateHeadImg() bool {
	if x != nil {
		return x.IsUpdateHeadImg
	}
	return false
}

func (x *ProductCategory) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *ProductCategory) GetIdPath() []int64 {
	if x != nil {
		return x.IdPath
	}
	return nil
}

func (x *ProductCategory) GetChildren() []*ProductCategory {
	if x != nil {
		return x.Children
	}
	return nil
}

type ProductCategoryReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WithChildren bool  `protobuf:"varint,2,opt,name=withChildren,proto3" json:"withChildren,omitempty"` //是否返回子节点
}

func (x *ProductCategoryReadReq) Reset() {
	*x = ProductCategoryReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategoryReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryReadReq) ProtoMessage() {}

func (x *ProductCategoryReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryReadReq.ProtoReflect.Descriptor instead.
func (*ProductCategoryReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{13}
}

func (x *ProductCategoryReadReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductCategoryReadReq) GetWithChildren() bool {
	if x != nil {
		return x.WithChildren
	}
	return false
}

type ProductCategoryIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page     *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"` //分页信息 只获取一个则不填
	Name     string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"` //过滤名字
	ParentID int64     `protobuf:"varint,3,opt,name=parentID,proto3" json:"parentID,omitempty"`
}

func (x *ProductCategoryIndexReq) Reset() {
	*x = ProductCategoryIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategoryIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryIndexReq) ProtoMessage() {}

func (x *ProductCategoryIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryIndexReq.ProtoReflect.Descriptor instead.
func (*ProductCategoryIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{14}
}

func (x *ProductCategoryIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProductCategoryIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProductCategoryIndexReq) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

type ProductCategoryIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProductCategory `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //产品信息
	Total int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *ProductCategoryIndexResp) Reset() {
	*x = ProductCategoryIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCategoryIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCategoryIndexResp) ProtoMessage() {}

func (x *ProductCategoryIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCategoryIndexResp.ProtoReflect.Descriptor instead.
func (*ProductCategoryIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{15}
}

func (x *ProductCategoryIndexResp) GetList() []*ProductCategory {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProductCategoryIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProtocolInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Name          string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code          string    `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                   //  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
	TransProtocol string    `protobuf:"bytes,5,opt,name=transProtocol,proto3" json:"transProtocol,omitempty"` // 传输协议: mqtt,tcp,udp
}

func (x *ProtocolInfoIndexReq) Reset() {
	*x = ProtocolInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolInfoIndexReq) ProtoMessage() {}

func (x *ProtocolInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolInfoIndexReq.ProtoReflect.Descriptor instead.
func (*ProtocolInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{16}
}

func (x *ProtocolInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProtocolInfoIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtocolInfoIndexReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProtocolInfoIndexReq) GetTransProtocol() string {
	if x != nil {
		return x.TransProtocol
	}
	return ""
}

type ProtocolInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProtocolInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ProtocolInfoIndexResp) Reset() {
	*x = ProtocolInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolInfoIndexResp) ProtoMessage() {}

func (x *ProtocolInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolInfoIndexResp.ProtoReflect.Descriptor instead.
func (*ProtocolInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{17}
}

func (x *ProtocolInfoIndexResp) GetList() []*ProtocolInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProtocolInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProtocolInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code          string                 `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`                   //  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
	TransProtocol string                 `protobuf:"bytes,5,opt,name=transProtocol,proto3" json:"transProtocol,omitempty"` // 传输协议: mqtt,tcp,udp
	Desc          string                 `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Endpoints     []string               `protobuf:"bytes,7,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	EtcdKey       string                 `protobuf:"bytes,8,opt,name=etcdKey,proto3" json:"etcdKey,omitempty"`
	ConfigFields  []*ProtocolConfigField `protobuf:"bytes,9,rep,name=configFields,proto3" json:"configFields,omitempty"` //配置字段列表,没有可以不传
	ConfigInfos   []*ProtocolConfigInfo  `protobuf:"bytes,10,rep,name=configInfos,proto3" json:"configInfos,omitempty"`  //配置列表
}

func (x *ProtocolInfo) Reset() {
	*x = ProtocolInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolInfo) ProtoMessage() {}

func (x *ProtocolInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolInfo.ProtoReflect.Descriptor instead.
func (*ProtocolInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{18}
}

func (x *ProtocolInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtocolInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProtocolInfo) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProtocolInfo) GetTransProtocol() string {
	if x != nil {
		return x.TransProtocol
	}
	return ""
}

func (x *ProtocolInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *ProtocolInfo) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *ProtocolInfo) GetEtcdKey() string {
	if x != nil {
		return x.EtcdKey
	}
	return ""
}

func (x *ProtocolInfo) GetConfigFields() []*ProtocolConfigField {
	if x != nil {
		return x.ConfigFields
	}
	return nil
}

func (x *ProtocolInfo) GetConfigInfos() []*ProtocolConfigInfo {
	if x != nil {
		return x.ConfigInfos
	}
	return nil
}

type ProtocolConfigField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Group      string `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Key        string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Label      string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
	IsRequired bool   `protobuf:"varint,5,opt,name=isRequired,proto3" json:"isRequired,omitempty"`
	Sort       int64  `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *ProtocolConfigField) Reset() {
	*x = ProtocolConfigField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolConfigField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolConfigField) ProtoMessage() {}

func (x *ProtocolConfigField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolConfigField.ProtoReflect.Descriptor instead.
func (*ProtocolConfigField) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{19}
}

func (x *ProtocolConfigField) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtocolConfigField) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ProtocolConfigField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ProtocolConfigField) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ProtocolConfigField) GetIsRequired() bool {
	if x != nil {
		return x.IsRequired
	}
	return false
}

func (x *ProtocolConfigField) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

type ProtocolConfigInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Config map[string]string `protobuf:"bytes,2,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Desc   string            `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *ProtocolConfigInfo) Reset() {
	*x = ProtocolConfigInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProtocolConfigInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProtocolConfigInfo) ProtoMessage() {}

func (x *ProtocolConfigInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProtocolConfigInfo.ProtoReflect.Descriptor instead.
func (*ProtocolConfigInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{20}
}

func (x *ProtocolConfigInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProtocolConfigInfo) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *ProtocolConfigInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type ShadowIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*ShadowIndex `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *ShadowIndexResp) Reset() {
	*x = ShadowIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShadowIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowIndexResp) ProtoMessage() {}

func (x *ShadowIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowIndexResp.ProtoReflect.Descriptor instead.
func (*ShadowIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{21}
}

func (x *ShadowIndexResp) GetList() []*ShadowIndex {
	if x != nil {
		return x.List
	}
	return nil
}

// 设备的日志数据
type ShadowIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataID            string `protobuf:"bytes,1,opt,name=dataID,proto3" json:"dataID,omitempty"`                        //属性id
	Value             string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`                          //获取到的值
	UpdatedDeviceTime int64  `protobuf:"varint,3,opt,name=updatedDeviceTime,proto3" json:"updatedDeviceTime,omitempty"` //更新到设备的时间
}

func (x *ShadowIndex) Reset() {
	*x = ShadowIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShadowIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowIndex) ProtoMessage() {}

func (x *ShadowIndex) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowIndex.ProtoReflect.Descriptor instead.
func (*ShadowIndex) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{22}
}

func (x *ShadowIndex) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *ShadowIndex) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ShadowIndex) GetUpdatedDeviceTime() int64 {
	if x != nil {
		return x.UpdatedDeviceTime
	}
	return 0
}

type PropertyGetReportSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string   `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id (必填)
	DeviceName string   `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名(必填)
	DataIDs    []string `protobuf:"bytes,3,rep,name=dataIDs,proto3" json:"dataIDs,omitempty"`       //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
}

func (x *PropertyGetReportSendReq) Reset() {
	*x = PropertyGetReportSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyGetReportSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyGetReportSendReq) ProtoMessage() {}

func (x *PropertyGetReportSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyGetReportSendReq.ProtoReflect.Descriptor instead.
func (*PropertyGetReportSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{23}
}

func (x *PropertyGetReportSendReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyGetReportSendReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyGetReportSendReq) GetDataIDs() []string {
	if x != nil {
		return x.DataIDs
	}
	return nil
}

type PropertyGetReportSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code      int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`           //设备返回状态码
	Msg       string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`              //返回状态
	MsgToken  string `protobuf:"bytes,3,opt,name=msgToken,proto3" json:"msgToken,omitempty"`    //调用id
	Timestamp int64  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //上报时间戳(毫秒时间戳)
	Params    string `protobuf:"bytes,5,opt,name=params,proto3" json:"params,omitempty"`        //获取到的值
}

func (x *PropertyGetReportSendResp) Reset() {
	*x = PropertyGetReportSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyGetReportSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyGetReportSendResp) ProtoMessage() {}

func (x *PropertyGetReportSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyGetReportSendResp.ProtoReflect.Descriptor instead.
func (*PropertyGetReportSendResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{24}
}

func (x *PropertyGetReportSendResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PropertyGetReportSendResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PropertyGetReportSendResp) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

func (x *PropertyGetReportSendResp) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PropertyGetReportSendResp) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

// 获取对应日志信息
type PropertyLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`               //使用了聚合函数及间隔的时候无效
	DeviceNames []string  `protobuf:"bytes,3,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"` //设备名(不填获取产品下所有设备)
	ProductID   string    `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id (必填)
	DataID      string    `protobuf:"bytes,5,opt,name=dataID,proto3" json:"dataID,omitempty"`           //获取的具体标识符的数据(必填)
	TimeStart   int64     `protobuf:"varint,6,opt,name=timeStart,proto3" json:"timeStart,omitempty"`    //获取时间的开始(毫秒时间戳)
	TimeEnd     int64     `protobuf:"varint,7,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`        //时间的结束(毫秒时间戳)
	Interval    int64     `protobuf:"varint,8,opt,name=interval,proto3" json:"interval,omitempty"`      //间隔(单位毫秒) 如果这个值不为零值 则时间的开始和结束必须有效及聚合函数不应该为空
	ArgFunc     string    `protobuf:"bytes,9,opt,name=argFunc,proto3" json:"argFunc,omitempty"`         //聚合函数 avg:平均值 first:第一个参数 last:最后一个参数 count:总数 twa: 时间加权平均函数 参考:https://docs.taosdata.com/taos-sql/function
	// /*
	// FILL 语句指定某一窗口区间数据缺失的情况下的填充模式。填充模式包括以下几种：
	//
	//	不进行填充：NONE（默认填充模式）。
	//	VALUE 填充：固定值填充，此时需要指定填充的数值。例如：FILL(VALUE, 1.23)。
	//	PREV 填充：使用前一个非 NULL 值填充数据。例如：FILL(PREV)。
	//	NULL 填充：使用 NULL 填充数据。例如：FILL(NULL)。
	//	LINEAR 填充：根据前后距离最近的非 NULL 值做线性插值填充。例如：FILL(LINEAR)。
	//	NEXT 填充：使用下一个非 NULL 值填充数据。例如：FILL(NEXT)。
	//
	// */
	Fill  string `protobuf:"bytes,10,opt,name=fill,proto3" json:"fill,omitempty"`    //填充模式 参考:https://docs.taosdata.com/taos-sql/distinguished/
	Order int32  `protobuf:"varint,11,opt,name=order,proto3" json:"order,omitempty"` //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
}

func (x *PropertyLogIndexReq) Reset() {
	*x = PropertyLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyLogIndexReq) ProtoMessage() {}

func (x *PropertyLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyLogIndexReq.ProtoReflect.Descriptor instead.
func (*PropertyLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{25}
}

func (x *PropertyLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PropertyLogIndexReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *PropertyLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyLogIndexReq) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *PropertyLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *PropertyLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *PropertyLogIndexReq) GetInterval() int64 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PropertyLogIndexReq) GetArgFunc() string {
	if x != nil {
		return x.ArgFunc
	}
	return ""
}

func (x *PropertyLogIndexReq) GetFill() string {
	if x != nil {
		return x.Fill
	}
	return ""
}

func (x *PropertyLogIndexReq) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

// 获取对应日志信息
type PropertyLogLatestIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string   `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id (必填)
	DeviceName string   `protobuf:"bytes,1,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名(必填)
	DataIDs    []string `protobuf:"bytes,3,rep,name=dataIDs,proto3" json:"dataIDs,omitempty"`       //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

func (x *PropertyLogLatestIndexReq) Reset() {
	*x = PropertyLogLatestIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyLogLatestIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyLogLatestIndexReq) ProtoMessage() {}

func (x *PropertyLogLatestIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyLogLatestIndexReq.ProtoReflect.Descriptor instead.
func (*PropertyLogLatestIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{26}
}

func (x *PropertyLogLatestIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyLogLatestIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyLogLatestIndexReq) GetDataIDs() []string {
	if x != nil {
		return x.DataIDs
	}
	return nil
}

// 设备的日志数据
type PropertyLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //发生时间戳(毫秒时间戳)
	DataID    string `protobuf:"bytes,3,opt,name=dataID,proto3" json:"dataID,omitempty"`        //属性id
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`          //获取到的值
}

func (x *PropertyLogInfo) Reset() {
	*x = PropertyLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyLogInfo) ProtoMessage() {}

func (x *PropertyLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyLogInfo.ProtoReflect.Descriptor instead.
func (*PropertyLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{27}
}

func (x *PropertyLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PropertyLogInfo) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *PropertyLogInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// 获取对应日志信息
type PropertyLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64              `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*PropertyLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *PropertyLogIndexResp) Reset() {
	*x = PropertyLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyLogIndexResp) ProtoMessage() {}

func (x *PropertyLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyLogIndexResp.ProtoReflect.Descriptor instead.
func (*PropertyLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{28}
}

func (x *PropertyLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PropertyLogIndexResp) GetList() []*PropertyLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 获取对应日志信息
type EventLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`               //使用了聚合函数及间隔的时候无效
	ProductID   string    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id (必填)
	DeviceNames []string  `protobuf:"bytes,3,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"` //设备名(不填获取产品下所有设备)
	DataID      string    `protobuf:"bytes,4,opt,name=dataID,proto3" json:"dataID,omitempty"`           //获取的具体标识符的数据(必填)
	TimeStart   int64     `protobuf:"varint,5,opt,name=timeStart,proto3" json:"timeStart,omitempty"`    //获取时间的开始(毫秒时间戳)
	TimeEnd     int64     `protobuf:"varint,6,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`        //时间的结束(毫秒时间戳)
	Types       []string  `protobuf:"bytes,7,rep,name=types,proto3" json:"types,omitempty"`             //类型 事件类型: 信息:info  告警alert  故障:fault
}

func (x *EventLogIndexReq) Reset() {
	*x = EventLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLogIndexReq) ProtoMessage() {}

func (x *EventLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLogIndexReq.ProtoReflect.Descriptor instead.
func (*EventLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{29}
}

func (x *EventLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *EventLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *EventLogIndexReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *EventLogIndexReq) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *EventLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *EventLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *EventLogIndexReq) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

// 设备的日志数据
type EventLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //发生时间戳(毫秒时间戳)
	Type      string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`            // 事件类型: 信息:info  告警alert  故障:fault
	DataID    string `protobuf:"bytes,3,opt,name=dataID,proto3" json:"dataID,omitempty"`        //属性id
	Params    string `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`        //获取到的值
}

func (x *EventLogInfo) Reset() {
	*x = EventLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLogInfo) ProtoMessage() {}

func (x *EventLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLogInfo.ProtoReflect.Descriptor instead.
func (*EventLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{30}
}

func (x *EventLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EventLogInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventLogInfo) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *EventLogInfo) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

// 获取对应日志信息
type EventLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*EventLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *EventLogIndexResp) Reset() {
	*x = EventLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventLogIndexResp) ProtoMessage() {}

func (x *EventLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventLogIndexResp.ProtoReflect.Descriptor instead.
func (*EventLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{31}
}

func (x *EventLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *EventLogIndexResp) GetList() []*EventLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 实时获取对应信息
type HubLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string    `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string    `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
	TimeStart  int64     `protobuf:"varint,3,opt,name=timeStart,proto3" json:"timeStart,omitempty"`  //获取时间的开始(毫秒时间戳)
	TimeEnd    int64     `protobuf:"varint,4,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`      //时间的结束(毫秒时间戳)
	Page       *PageInfo `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`             //分页信息
	Actions    []string  `protobuf:"bytes,6,rep,name=actions,proto3" json:"actions,omitempty"`       //过滤操作类型 connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
	Topics     []string  `protobuf:"bytes,7,rep,name=topics,proto3" json:"topics,omitempty"`         //过滤主题
	Content    string    `protobuf:"bytes,8,opt,name=content,proto3" json:"content,omitempty"`       //过滤内容
	RequestID  string    `protobuf:"bytes,9,opt,name=requestID,proto3" json:"requestID,omitempty"`   //过滤请求ID
}

func (x *HubLogIndexReq) Reset() {
	*x = HubLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HubLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubLogIndexReq) ProtoMessage() {}

func (x *HubLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubLogIndexReq.ProtoReflect.Descriptor instead.
func (*HubLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{32}
}

func (x *HubLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *HubLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *HubLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *HubLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *HubLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *HubLogIndexReq) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *HubLogIndexReq) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *HubLogIndexReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HubLogIndexReq) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

// 实时获取对应信息
type HubLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*HubLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HubLogIndexResp) Reset() {
	*x = HubLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HubLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubLogIndexResp) ProtoMessage() {}

func (x *HubLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubLogIndexResp.ProtoReflect.Descriptor instead.
func (*HubLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{33}
}

func (x *HubLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *HubLogIndexResp) GetList() []*HubLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 设备的日志数据
type HubLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`   //发生时间戳(毫秒时间戳)
	Action     string `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`          //操作类型;connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
	RequestID  string `protobuf:"bytes,3,opt,name=requestID,proto3" json:"requestID,omitempty"`    //请求ID
	TraceID    string `protobuf:"bytes,4,opt,name=traceID,proto3" json:"traceID,omitempty"`        //服务器端事务id
	Topic      string `protobuf:"bytes,5,opt,name=topic,proto3" json:"topic,omitempty"`            //主题
	Content    string `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`        //具体内容
	ResultCode int64  `protobuf:"varint,7,opt,name=resultCode,proto3" json:"resultCode,omitempty"` //请求结果状态
}

func (x *HubLogInfo) Reset() {
	*x = HubLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HubLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HubLogInfo) ProtoMessage() {}

func (x *HubLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HubLogInfo.ProtoReflect.Descriptor instead.
func (*HubLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{34}
}

func (x *HubLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *HubLogInfo) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *HubLogInfo) GetRequestID() string {
	if x != nil {
		return x.RequestID
	}
	return ""
}

func (x *HubLogInfo) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *HubLogInfo) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *HubLogInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *HubLogInfo) GetResultCode() int64 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

// 实时获取对应信息
type StatusLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string    `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id
	DeviceName string    `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`   //设备名
	TimeStart  int64     `protobuf:"varint,3,opt,name=timeStart,proto3" json:"timeStart,omitempty"`    //获取时间的开始(毫秒时间戳)
	TimeEnd    int64     `protobuf:"varint,4,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`        //时间的结束(毫秒时间戳)
	Page       *PageInfo `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`               //分页信息
	ProjectID  int64     `protobuf:"varint,7,opt,name=projectID,proto3" json:"projectID,omitempty"`    //项目id
	AreaIDs    []int64   `protobuf:"varint,8,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"` //过滤内容
	Status     int64     `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`          //在线状态
}

func (x *StatusLogIndexReq) Reset() {
	*x = StatusLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusLogIndexReq) ProtoMessage() {}

func (x *StatusLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusLogIndexReq.ProtoReflect.Descriptor instead.
func (*StatusLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{35}
}

func (x *StatusLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *StatusLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *StatusLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *StatusLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *StatusLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *StatusLogIndexReq) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *StatusLogIndexReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *StatusLogIndexReq) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 实时获取对应信息
type StatusLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*StatusLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StatusLogIndexResp) Reset() {
	*x = StatusLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusLogIndexResp) ProtoMessage() {}

func (x *StatusLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusLogIndexResp.ProtoReflect.Descriptor instead.
func (*StatusLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{36}
}

func (x *StatusLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *StatusLogIndexResp) GetList() []*StatusLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 设备的日志数据
type StatusLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //发生时间戳(毫秒时间戳)
	Status     int64  `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`        //过滤请求ID
	ProductID  string `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
}

func (x *StatusLogInfo) Reset() {
	*x = StatusLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusLogInfo) ProtoMessage() {}

func (x *StatusLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusLogInfo.ProtoReflect.Descriptor instead.
func (*StatusLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{37}
}

func (x *StatusLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *StatusLogInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *StatusLogInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *StatusLogInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

// 实时获取对应信息
type SendLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string    `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id
	DeviceName string    `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`   //设备名
	TimeStart  int64     `protobuf:"varint,3,opt,name=timeStart,proto3" json:"timeStart,omitempty"`    //获取时间的开始(毫秒时间戳)
	TimeEnd    int64     `protobuf:"varint,4,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`        //时间的结束(毫秒时间戳)
	Page       *PageInfo `protobuf:"bytes,5,opt,name=page,proto3" json:"page,omitempty"`               //分页信息
	ProjectID  int64     `protobuf:"varint,7,opt,name=projectID,proto3" json:"projectID,omitempty"`    //项目id
	AreaIDs    []int64   `protobuf:"varint,8,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"` //过滤内容
	UserID     int64     `protobuf:"varint,9,opt,name=userID,proto3" json:"userID,omitempty"`
	Actions    []string  `protobuf:"bytes,10,rep,name=actions,proto3" json:"actions,omitempty"`
	ResultCode int64     `protobuf:"varint,12,opt,name=resultCode,proto3" json:"resultCode,omitempty"` //请求结果状态,200为成功
}

func (x *SendLogIndexReq) Reset() {
	*x = SendLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLogIndexReq) ProtoMessage() {}

func (x *SendLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLogIndexReq.ProtoReflect.Descriptor instead.
func (*SendLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{38}
}

func (x *SendLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *SendLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SendLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *SendLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *SendLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SendLogIndexReq) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *SendLogIndexReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *SendLogIndexReq) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SendLogIndexReq) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *SendLogIndexReq) GetResultCode() int64 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

// 实时获取对应信息
type SendLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*SendLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SendLogIndexResp) Reset() {
	*x = SendLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLogIndexResp) ProtoMessage() {}

func (x *SendLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLogIndexResp.ProtoReflect.Descriptor instead.
func (*SendLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{39}
}

func (x *SendLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SendLogIndexResp) GetList() []*SendLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

// 设备的日志数据
type SendLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //发生时间戳(毫秒时间戳)
	ProjectID  int64  `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`
	AreaID     int64  `protobuf:"varint,3,opt,name=areaID,proto3" json:"areaID,omitempty"`          //
	UserID     int64  `protobuf:"varint,4,opt,name=userID,proto3" json:"userID,omitempty"`          //
	ProductID  string `protobuf:"bytes,5,opt,name=productID,proto3" json:"productID,omitempty"`     //
	DeviceName string `protobuf:"bytes,6,opt,name=deviceName,proto3" json:"deviceName,omitempty"`   //
	Action     string `protobuf:"bytes,7,opt,name=action,proto3" json:"action,omitempty"`           //操作类型 propertySend:属性控制 actionSend:操作控制 propertyGetReportSend:获取最新属性请求
	DataID     string `protobuf:"bytes,8,opt,name=dataID,proto3" json:"dataID,omitempty"`           //identify
	TraceID    string `protobuf:"bytes,9,opt,name=traceID,proto3" json:"traceID,omitempty"`         //服务器端事务id
	Content    string `protobuf:"bytes,10,opt,name=content,proto3" json:"content,omitempty"`        //操作的内容
	ResultCode int64  `protobuf:"varint,11,opt,name=resultCode,proto3" json:"resultCode,omitempty"` //请求结果状态,200为成功
}

func (x *SendLogInfo) Reset() {
	*x = SendLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendLogInfo) ProtoMessage() {}

func (x *SendLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendLogInfo.ProtoReflect.Descriptor instead.
func (*SendLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{40}
}

func (x *SendLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SendLogInfo) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *SendLogInfo) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *SendLogInfo) GetUserID() int64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *SendLogInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *SendLogInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SendLogInfo) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SendLogInfo) GetDataID() string {
	if x != nil {
		return x.DataID
	}
	return ""
}

func (x *SendLogInfo) GetTraceID() string {
	if x != nil {
		return x.TraceID
	}
	return ""
}

func (x *SendLogInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SendLogInfo) GetResultCode() int64 {
	if x != nil {
		return x.ResultCode
	}
	return 0
}

// 获取sdk调试日志信息
type SdkLogIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string    `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string    `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
	TimeStart  int64     `protobuf:"varint,3,opt,name=timeStart,proto3" json:"timeStart,omitempty"`  //获取时间的开始
	TimeEnd    int64     `protobuf:"varint,4,opt,name=timeEnd,proto3" json:"timeEnd,omitempty"`      //时间的结束
	LogLevel   int64     `protobuf:"varint,5,opt,name=logLevel,proto3" json:"logLevel,omitempty"`    //日志等级
	Page       *PageInfo `protobuf:"bytes,6,opt,name=page,proto3" json:"page,omitempty"`             //分页信息 只获取一个则不填
}

func (x *SdkLogIndexReq) Reset() {
	*x = SdkLogIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkLogIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkLogIndexReq) ProtoMessage() {}

func (x *SdkLogIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkLogIndexReq.ProtoReflect.Descriptor instead.
func (*SdkLogIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{41}
}

func (x *SdkLogIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *SdkLogIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *SdkLogIndexReq) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

func (x *SdkLogIndexReq) GetTimeEnd() int64 {
	if x != nil {
		return x.TimeEnd
	}
	return 0
}

func (x *SdkLogIndexReq) GetLogLevel() int64 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

func (x *SdkLogIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

// sdk调试日志信息
type SdkLogIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"` //总数
	List  []*SdkLogInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SdkLogIndexResp) Reset() {
	*x = SdkLogIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkLogIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkLogIndexResp) ProtoMessage() {}

func (x *SdkLogIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkLogIndexResp.ProtoReflect.Descriptor instead.
func (*SdkLogIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{42}
}

func (x *SdkLogIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SdkLogIndexResp) GetList() []*SdkLogInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type SdkLogInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` //发生时间戳(毫秒时间戳)
	Loglevel  int64  `protobuf:"varint,2,opt,name=loglevel,proto3" json:"loglevel,omitempty"`   //操作类型;显示相应的操作名称、API名称、服务的method
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`      //具体内容
}

func (x *SdkLogInfo) Reset() {
	*x = SdkLogInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkLogInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkLogInfo) ProtoMessage() {}

func (x *SdkLogInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkLogInfo.ProtoReflect.Descriptor instead.
func (*SdkLogInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{43}
}

func (x *SdkLogInfo) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *SdkLogInfo) GetLoglevel() int64 {
	if x != nil {
		return x.Loglevel
	}
	return 0
}

func (x *SdkLogInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type ActionSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID   string      `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id 获取产品id下的所有设备信息
	DeviceName  string      `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`   //设备名
	ActionID    string      `protobuf:"bytes,3,opt,name=actionID,proto3" json:"actionID,omitempty"`       //产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
	InputParams string      `protobuf:"bytes,4,opt,name=inputParams,proto3" json:"inputParams,omitempty"` //输入参数
	IsAsync     bool        `protobuf:"varint,5,opt,name=isAsync,proto3" json:"isAsync,omitempty"`        //是否异步获取
	Option      *SendOption `protobuf:"bytes,6,opt,name=option,proto3" json:"option,omitempty"`           //异步选项
}

func (x *ActionSendReq) Reset() {
	*x = ActionSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSendReq) ProtoMessage() {}

func (x *ActionSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSendReq.ProtoReflect.Descriptor instead.
func (*ActionSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{44}
}

func (x *ActionSendReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ActionSendReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *ActionSendReq) GetActionID() string {
	if x != nil {
		return x.ActionID
	}
	return ""
}

func (x *ActionSendReq) GetInputParams() string {
	if x != nil {
		return x.InputParams
	}
	return ""
}

func (x *ActionSendReq) GetIsAsync() bool {
	if x != nil {
		return x.IsAsync
	}
	return false
}

func (x *ActionSendReq) GetOption() *SendOption {
	if x != nil {
		return x.Option
	}
	return nil
}

type ActionSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgToken     string `protobuf:"bytes,1,opt,name=msgToken,proto3" json:"msgToken,omitempty"`         //调用id
	OutputParams string `protobuf:"bytes,2,opt,name=outputParams,proto3" json:"outputParams,omitempty"` //输出参数 注意：此字段可能返回 null，表示取不到有效值。
	Msg          string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`                   //返回状态
	Code         int64  `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`                //设备返回状态码
}

func (x *ActionSendResp) Reset() {
	*x = ActionSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionSendResp) ProtoMessage() {}

func (x *ActionSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionSendResp.ProtoReflect.Descriptor instead.
func (*ActionSendResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{45}
}

func (x *ActionSendResp) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

func (x *ActionSendResp) GetOutputParams() string {
	if x != nil {
		return x.OutputParams
	}
	return ""
}

func (x *ActionSendResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ActionSendResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// 获取异步消息的请求
type RespReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
	MsgToken   string `protobuf:"bytes,3,opt,name=msgToken,proto3" json:"msgToken,omitempty"`     //调用id
}

func (x *RespReadReq) Reset() {
	*x = RespReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RespReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RespReadReq) ProtoMessage() {}

func (x *RespReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RespReadReq.ProtoReflect.Descriptor instead.
func (*RespReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{46}
}

func (x *RespReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *RespReadReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *RespReadReq) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

type PropertyControlSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID     string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`          //产品id
	DeviceName    string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`        //设备名
	Data          string `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                    //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
	ShadowControl int64  `protobuf:"varint,4,opt,name=shadowControl,proto3" json:"shadowControl,omitempty"` //设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
	IsAsync       bool   `protobuf:"varint,6,opt,name=isAsync,proto3" json:"isAsync,omitempty"`             //是否异步操作 异步情况通过获取接口来获取
}

func (x *PropertyControlSendReq) Reset() {
	*x = PropertyControlSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyControlSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyControlSendReq) ProtoMessage() {}

func (x *PropertyControlSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyControlSendReq.ProtoReflect.Descriptor instead.
func (*PropertyControlSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{47}
}

func (x *PropertyControlSendReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyControlSendReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyControlSendReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *PropertyControlSendReq) GetShadowControl() int64 {
	if x != nil {
		return x.ShadowControl
	}
	return 0
}

func (x *PropertyControlSendReq) GetIsAsync() bool {
	if x != nil {
		return x.IsAsync
	}
	return false
}

type ActionRespReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID    string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`       //产品id 获取产品id下的所有设备信息
	DeviceName   string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`     //设备名
	MsgToken     string `protobuf:"bytes,3,opt,name=msgToken,proto3" json:"msgToken,omitempty"`         //调用id
	OutputParams string `protobuf:"bytes,4,opt,name=outputParams,proto3" json:"outputParams,omitempty"` //输出参数 注意：此字段可能返回 null，表示取不到有效值。
	Msg          string `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`                   //返回状态
	Code         int64  `protobuf:"varint,6,opt,name=code,proto3" json:"code,omitempty"`                //设备返回状态码
}

func (x *ActionRespReq) Reset() {
	*x = ActionRespReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRespReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRespReq) ProtoMessage() {}

func (x *ActionRespReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRespReq.ProtoReflect.Descriptor instead.
func (*ActionRespReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{48}
}

func (x *ActionRespReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ActionRespReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *ActionRespReq) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

func (x *ActionRespReq) GetOutputParams() string {
	if x != nil {
		return x.OutputParams
	}
	return ""
}

func (x *ActionRespReq) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ActionRespReq) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

type PropertyControlSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`        //设备返回状态码
	Msg      string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`           //返回状态
	MsgToken string `protobuf:"bytes,3,opt,name=msgToken,proto3" json:"msgToken,omitempty"` //调用id
}

func (x *PropertyControlSendResp) Reset() {
	*x = PropertyControlSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyControlSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyControlSendResp) ProtoMessage() {}

func (x *PropertyControlSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyControlSendResp.ProtoReflect.Descriptor instead.
func (*PropertyControlSendResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{49}
}

func (x *PropertyControlSendResp) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PropertyControlSendResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PropertyControlSendResp) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

type SendMsgReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`     //发送的topic
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"` //发送的数据
}

func (x *SendMsgReq) Reset() {
	*x = SendMsgReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgReq) ProtoMessage() {}

func (x *SendMsgReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgReq.ProtoReflect.Descriptor instead.
func (*SendMsgReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{50}
}

func (x *SendMsgReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SendMsgReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type SendMsgResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendMsgResp) Reset() {
	*x = SendMsgResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMsgResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMsgResp) ProtoMessage() {}

func (x *SendMsgResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMsgResp.ProtoReflect.Descriptor instead.
func (*SendMsgResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{51}
}

type PropertyControlMultiSendReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID     string        `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`          //产品id
	DeviceNames   []string      `protobuf:"bytes,2,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"`      //设备名
	Devices       []*DeviceCore `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices,omitempty"`              //如果是不同的产品,则传这个字段,上面两个参数填了优先使用
	ShadowControl int64         `protobuf:"varint,4,opt,name=shadowControl,proto3" json:"shadowControl,omitempty"` //设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
	Data          string        `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                    //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
}

func (x *PropertyControlMultiSendReq) Reset() {
	*x = PropertyControlMultiSendReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyControlMultiSendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyControlMultiSendReq) ProtoMessage() {}

func (x *PropertyControlMultiSendReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyControlMultiSendReq.ProtoReflect.Descriptor instead.
func (*PropertyControlMultiSendReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{52}
}

func (x *PropertyControlMultiSendReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyControlMultiSendReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *PropertyControlMultiSendReq) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *PropertyControlMultiSendReq) GetShadowControl() int64 {
	if x != nil {
		return x.ShadowControl
	}
	return 0
}

func (x *PropertyControlMultiSendReq) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type PropertyControlSendMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名
	Code       int64  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`            //设备返回状态码
	Msg        string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`               //返回状态
	MsgToken   string `protobuf:"bytes,5,opt,name=msgToken,proto3" json:"msgToken,omitempty"`     //调用id
	SysMsg     string `protobuf:"bytes,6,opt,name=sysMsg,proto3" json:"sysMsg,omitempty"`         //系统错误信息
	SysCode    int64  `protobuf:"varint,7,opt,name=sysCode,proto3" json:"sysCode,omitempty"`      //系统错误码
}

func (x *PropertyControlSendMsg) Reset() {
	*x = PropertyControlSendMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyControlSendMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyControlSendMsg) ProtoMessage() {}

func (x *PropertyControlSendMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyControlSendMsg.ProtoReflect.Descriptor instead.
func (*PropertyControlSendMsg) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{53}
}

func (x *PropertyControlSendMsg) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *PropertyControlSendMsg) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *PropertyControlSendMsg) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PropertyControlSendMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *PropertyControlSendMsg) GetMsgToken() string {
	if x != nil {
		return x.MsgToken
	}
	return ""
}

func (x *PropertyControlSendMsg) GetSysMsg() string {
	if x != nil {
		return x.SysMsg
	}
	return ""
}

func (x *PropertyControlSendMsg) GetSysCode() int64 {
	if x != nil {
		return x.SysCode
	}
	return 0
}

type PropertyControlMultiSendResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*PropertyControlSendMsg `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"` //批量设备返回结果列表
}

func (x *PropertyControlMultiSendResp) Reset() {
	*x = PropertyControlMultiSendResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyControlMultiSendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyControlMultiSendResp) ProtoMessage() {}

func (x *PropertyControlMultiSendResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyControlMultiSendResp.ProtoReflect.Descriptor instead.
func (*PropertyControlMultiSendResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{54}
}

func (x *PropertyControlMultiSendResp) GetList() []*PropertyControlSendMsg {
	if x != nil {
		return x.List
	}
	return nil
}

type OtaPromptIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Module     string `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	ProductID  string `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string `protobuf:"bytes,5,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *OtaPromptIndexReq) Reset() {
	*x = OtaPromptIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaPromptIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaPromptIndexReq) ProtoMessage() {}

func (x *OtaPromptIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaPromptIndexReq.ProtoReflect.Descriptor instead.
func (*OtaPromptIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{55}
}

func (x *OtaPromptIndexReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OtaPromptIndexReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OtaPromptIndexReq) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *OtaPromptIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaPromptIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type OtaPromptIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TaskUid    string `protobuf:"bytes,2,opt,name=taskUid,proto3" json:"taskUid,omitempty"`
	FirmwareID int64  `protobuf:"varint,3,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
}

func (x *OtaPromptIndexResp) Reset() {
	*x = OtaPromptIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaPromptIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaPromptIndexResp) ProtoMessage() {}

func (x *OtaPromptIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaPromptIndexResp.ProtoReflect.Descriptor instead.
func (*OtaPromptIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{56}
}

func (x *OtaPromptIndexResp) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OtaPromptIndexResp) GetTaskUid() string {
	if x != nil {
		return x.TaskUid
	}
	return ""
}

func (x *OtaPromptIndexResp) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

type ProductRemoteConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProductID   string `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
	Content     string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	CreatedTime int64  `protobuf:"varint,4,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
}

func (x *ProductRemoteConfig) Reset() {
	*x = ProductRemoteConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductRemoteConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductRemoteConfig) ProtoMessage() {}

func (x *ProductRemoteConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductRemoteConfig.ProtoReflect.Descriptor instead.
func (*ProductRemoteConfig) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{57}
}

func (x *ProductRemoteConfig) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProductRemoteConfig) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductRemoteConfig) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ProductRemoteConfig) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type RemoteConfigCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	Content   string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *RemoteConfigCreateReq) Reset() {
	*x = RemoteConfigCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigCreateReq) ProtoMessage() {}

func (x *RemoteConfigCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigCreateReq.ProtoReflect.Descriptor instead.
func (*RemoteConfigCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{58}
}

func (x *RemoteConfigCreateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *RemoteConfigCreateReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type RemoteConfigIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	ProductID string    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *RemoteConfigIndexReq) Reset() {
	*x = RemoteConfigIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigIndexReq) ProtoMessage() {}

func (x *RemoteConfigIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigIndexReq.ProtoReflect.Descriptor instead.
func (*RemoteConfigIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{59}
}

func (x *RemoteConfigIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *RemoteConfigIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type RemoteConfigIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProductRemoteConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RemoteConfigIndexResp) Reset() {
	*x = RemoteConfigIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigIndexResp) ProtoMessage() {}

func (x *RemoteConfigIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigIndexResp.ProtoReflect.Descriptor instead.
func (*RemoteConfigIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{60}
}

func (x *RemoteConfigIndexResp) GetList() []*ProductRemoteConfig {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RemoteConfigIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type RemoteConfigPushAllReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *RemoteConfigPushAllReq) Reset() {
	*x = RemoteConfigPushAllReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigPushAllReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigPushAllReq) ProtoMessage() {}

func (x *RemoteConfigPushAllReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigPushAllReq.ProtoReflect.Descriptor instead.
func (*RemoteConfigPushAllReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{61}
}

func (x *RemoteConfigPushAllReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type RemoteConfigLastReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *RemoteConfigLastReadReq) Reset() {
	*x = RemoteConfigLastReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigLastReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigLastReadReq) ProtoMessage() {}

func (x *RemoteConfigLastReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigLastReadReq.ProtoReflect.Descriptor instead.
func (*RemoteConfigLastReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{62}
}

func (x *RemoteConfigLastReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type RemoteConfigLastReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ProductRemoteConfig `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *RemoteConfigLastReadResp) Reset() {
	*x = RemoteConfigLastReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteConfigLastReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteConfigLastReadResp) ProtoMessage() {}

func (x *RemoteConfigLastReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteConfigLastReadResp.ProtoReflect.Descriptor instead.
func (*RemoteConfigLastReadResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{63}
}

func (x *RemoteConfigLastReadResp) GetInfo() *ProductRemoteConfig {
	if x != nil {
		return x.Info
	}
	return nil
}

type ProductCustomReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *ProductCustomReadReq) Reset() {
	*x = ProductCustomReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCustomReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCustomReadReq) ProtoMessage() {}

func (x *ProductCustomReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCustomReadReq.ProtoReflect.Descriptor instead.
func (*ProductCustomReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{64}
}

func (x *ProductCustomReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type ProductCustom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID       string                  `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	ScriptLang      int64                   `protobuf:"varint,3,opt,name=scriptLang,proto3" json:"scriptLang,omitempty"`          //脚本语言类型（默认JavaScript） 1:JavaScript 2:lua 3:python
	TransformScript *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=transformScript,proto3" json:"transformScript,omitempty"` //协议转换脚本
	LoginAuthScript *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=loginAuthScript,proto3" json:"loginAuthScript,omitempty"` //登录认证脚本
	CustomTopics    []*CustomTopic          `protobuf:"bytes,4,rep,name=customTopics,proto3" json:"customTopics,omitempty"`       //自定义topic信息 只有mqtt协议有用
}

func (x *ProductCustom) Reset() {
	*x = ProductCustom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCustom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCustom) ProtoMessage() {}

func (x *ProductCustom) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCustom.ProtoReflect.Descriptor instead.
func (*ProductCustom) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{65}
}

func (x *ProductCustom) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductCustom) GetScriptLang() int64 {
	if x != nil {
		return x.ScriptLang
	}
	return 0
}

func (x *ProductCustom) GetTransformScript() *wrapperspb.StringValue {
	if x != nil {
		return x.TransformScript
	}
	return nil
}

func (x *ProductCustom) GetLoginAuthScript() *wrapperspb.StringValue {
	if x != nil {
		return x.LoginAuthScript
	}
	return nil
}

func (x *ProductCustom) GetCustomTopics() []*CustomTopic {
	if x != nil {
		return x.CustomTopics
	}
	return nil
}

type CustomTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic     string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`          //自定义主题需要以$custom 并包含设备名称{deviceName}及产品名称{productID}
	Direction int64  `protobuf:"varint,2,opt,name=direction,proto3" json:"direction,omitempty"` //1:上行 2:下行 3:双向
}

func (x *CustomTopic) Reset() {
	*x = CustomTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomTopic) ProtoMessage() {}

func (x *CustomTopic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomTopic.ProtoReflect.Descriptor instead.
func (*CustomTopic) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{66}
}

func (x *CustomTopic) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CustomTopic) GetDirection() int64 {
	if x != nil {
		return x.Direction
	}
	return 0
}

type DeviceGatewayBindDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string             `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string             `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名称
	Sign       *DeviceGatewaySign `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`             //签名
}

func (x *DeviceGatewayBindDevice) Reset() {
	*x = DeviceGatewayBindDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayBindDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayBindDevice) ProtoMessage() {}

func (x *DeviceGatewayBindDevice) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayBindDevice.ProtoReflect.Descriptor instead.
func (*DeviceGatewayBindDevice) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{67}
}

func (x *DeviceGatewayBindDevice) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceGatewayBindDevice) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceGatewayBindDevice) GetSign() *DeviceGatewaySign {
	if x != nil {
		return x.Sign
	}
	return nil
}

type DeviceGatewaySign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 子设备绑定签名串。 签名算法：
	// 1. 签名原串，将产品 ID 设备名称，随机数，时间戳拼接：text=${product_id}${device_name};${random};${expiration_time}
	// 2. 使用设备 Psk 密钥，或者证书的 Sha1 摘要，进行签名：hmac_sha1(device_secret, text)
	Signature  string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Random     int64  `protobuf:"varint,4,opt,name=random,proto3" json:"random,omitempty"`        //随机数。
	Timestamp  int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`  //时间戳，单位：秒。
	SignMethod string `protobuf:"bytes,6,opt,name=signMethod,proto3" json:"signMethod,omitempty"` //签名算法。支持 hmacsha1、hmacsha256
}

func (x *DeviceGatewaySign) Reset() {
	*x = DeviceGatewaySign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewaySign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewaySign) ProtoMessage() {}

func (x *DeviceGatewaySign) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewaySign.ProtoReflect.Descriptor instead.
func (*DeviceGatewaySign) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{68}
}

func (x *DeviceGatewaySign) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *DeviceGatewaySign) GetRandom() int64 {
	if x != nil {
		return x.Random
	}
	return 0
}

func (x *DeviceGatewaySign) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DeviceGatewaySign) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

type DeviceGatewayMultiCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayProductID  string                     `protobuf:"bytes,1,opt,name=gatewayProductID,proto3" json:"gatewayProductID,omitempty"`
	GatewayDeviceName string                     `protobuf:"bytes,2,opt,name=gatewayDeviceName,proto3" json:"gatewayDeviceName,omitempty"`
	IsAuthSign        bool                       `protobuf:"varint,3,opt,name=isAuthSign,proto3" json:"isAuthSign,omitempty"` //是否校验设备签名
	List              []*DeviceGatewayBindDevice `protobuf:"bytes,4,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceGatewayMultiCreateReq) Reset() {
	*x = DeviceGatewayMultiCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayMultiCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayMultiCreateReq) ProtoMessage() {}

func (x *DeviceGatewayMultiCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayMultiCreateReq.ProtoReflect.Descriptor instead.
func (*DeviceGatewayMultiCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{69}
}

func (x *DeviceGatewayMultiCreateReq) GetGatewayProductID() string {
	if x != nil {
		return x.GatewayProductID
	}
	return ""
}

func (x *DeviceGatewayMultiCreateReq) GetGatewayDeviceName() string {
	if x != nil {
		return x.GatewayDeviceName
	}
	return ""
}

func (x *DeviceGatewayMultiCreateReq) GetIsAuthSign() bool {
	if x != nil {
		return x.IsAuthSign
	}
	return false
}

func (x *DeviceGatewayMultiCreateReq) GetList() []*DeviceGatewayBindDevice {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceGatewayIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page      *PageInfo   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Gateway   *DeviceCore `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`     //获取网关下子设备列表
	SubDevice *DeviceCore `protobuf:"bytes,3,opt,name=subDevice,proto3" json:"subDevice,omitempty"` //获取子设备绑定的网关列表
}

func (x *DeviceGatewayIndexReq) Reset() {
	*x = DeviceGatewayIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayIndexReq) ProtoMessage() {}

func (x *DeviceGatewayIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayIndexReq.ProtoReflect.Descriptor instead.
func (*DeviceGatewayIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{70}
}

func (x *DeviceGatewayIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DeviceGatewayIndexReq) GetGateway() *DeviceCore {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *DeviceGatewayIndexReq) GetSubDevice() *DeviceCore {
	if x != nil {
		return x.SubDevice
	}
	return nil
}

type DeviceGatewayIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*DeviceInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DeviceGatewayIndexResp) Reset() {
	*x = DeviceGatewayIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayIndexResp) ProtoMessage() {}

func (x *DeviceGatewayIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayIndexResp.ProtoReflect.Descriptor instead.
func (*DeviceGatewayIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{71}
}

func (x *DeviceGatewayIndexResp) GetList() []*DeviceInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *DeviceGatewayIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeviceGatewayMultiDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayProductID  string        `protobuf:"bytes,1,opt,name=gatewayProductID,proto3" json:"gatewayProductID,omitempty"`
	GatewayDeviceName string        `protobuf:"bytes,2,opt,name=gatewayDeviceName,proto3" json:"gatewayDeviceName,omitempty"`
	List              []*DeviceCore `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceGatewayMultiDeleteReq) Reset() {
	*x = DeviceGatewayMultiDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceGatewayMultiDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceGatewayMultiDeleteReq) ProtoMessage() {}

func (x *DeviceGatewayMultiDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceGatewayMultiDeleteReq.ProtoReflect.Descriptor instead.
func (*DeviceGatewayMultiDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{72}
}

func (x *DeviceGatewayMultiDeleteReq) GetGatewayProductID() string {
	if x != nil {
		return x.GatewayProductID
	}
	return ""
}

func (x *DeviceGatewayMultiDeleteReq) GetGatewayDeviceName() string {
	if x != nil {
		return x.GatewayDeviceName
	}
	return ""
}

func (x *DeviceGatewayMultiDeleteReq) GetList() []*DeviceCore {
	if x != nil {
		return x.List
	}
	return nil
}

type GroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaID      int64             `protobuf:"varint,10,opt,name=areaID,proto3" json:"areaID,omitempty"` //分组可以属于某个区域下
	ProjectID   int64             `protobuf:"varint,3,opt,name=projectID,proto3" json:"projectID,omitempty"`
	Id          int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ParentID    int64             `protobuf:"varint,2,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Name        string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Desc        string            `protobuf:"bytes,5,opt,name=desc,proto3" json:"desc,omitempty"`
	CreatedTime int64             `protobuf:"varint,6,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
	Tags        map[string]string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProductID   string            `protobuf:"bytes,8,opt,name=productID,proto3" json:"productID,omitempty"`
	ProductName string            `protobuf:"bytes,9,opt,name=productName,proto3" json:"productName,omitempty"` //  DeviceInfoCount deviceInfoCount =11;
}

func (x *GroupInfo) Reset() {
	*x = GroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfo) ProtoMessage() {}

func (x *GroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfo.ProtoReflect.Descriptor instead.
func (*GroupInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{73}
}

func (x *GroupInfo) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *GroupInfo) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *GroupInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupInfo) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *GroupInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GroupInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *GroupInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GroupInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *GroupInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

type GroupInfoCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaID    int64  `protobuf:"varint,5,opt,name=areaID,proto3" json:"areaID,omitempty"` //分组可以属于某个区域下
	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ParentID  int64  `protobuf:"varint,2,opt,name=parentID,proto3" json:"parentID,omitempty"`
	ProductID string `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	Desc      string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *GroupInfoCreateReq) Reset() {
	*x = GroupInfoCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoCreateReq) ProtoMessage() {}

func (x *GroupInfoCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoCreateReq.ProtoReflect.Descriptor instead.
func (*GroupInfoCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{74}
}

func (x *GroupInfoCreateReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *GroupInfoCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupInfoCreateReq) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *GroupInfoCreateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *GroupInfoCreateReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type GroupInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaID   int64             `protobuf:"varint,5,opt,name=areaID,proto3" json:"areaID,omitempty"` //分组可以属于某个区域下
	Page     *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Name     string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ParentID int64             `protobuf:"varint,3,opt,name=parentID,proto3" json:"parentID,omitempty"`
	Tags     map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GroupInfoIndexReq) Reset() {
	*x = GroupInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoIndexReq) ProtoMessage() {}

func (x *GroupInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoIndexReq.ProtoReflect.Descriptor instead.
func (*GroupInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{75}
}

func (x *GroupInfoIndexReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *GroupInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GroupInfoIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupInfoIndexReq) GetParentID() int64 {
	if x != nil {
		return x.ParentID
	}
	return 0
}

func (x *GroupInfoIndexReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GroupInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*GroupInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64        `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // repeated GroupInfo listAll = 3;
}

func (x *GroupInfoIndexResp) Reset() {
	*x = GroupInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoIndexResp) ProtoMessage() {}

func (x *GroupInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoIndexResp.ProtoReflect.Descriptor instead.
func (*GroupInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{76}
}

func (x *GroupInfoIndexResp) GetList() []*GroupInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GroupInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GroupInfoUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string            `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Tags      map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ProductID string            `protobuf:"bytes,5,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *GroupInfoUpdateReq) Reset() {
	*x = GroupInfoUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupInfoUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupInfoUpdateReq) ProtoMessage() {}

func (x *GroupInfoUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupInfoUpdateReq.ProtoReflect.Descriptor instead.
func (*GroupInfoUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{77}
}

func (x *GroupInfoUpdateReq) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupInfoUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupInfoUpdateReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *GroupInfoUpdateReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GroupInfoUpdateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type GroupDeviceMultiSaveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID int64         `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	List    []*DeviceCore `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GroupDeviceMultiSaveReq) Reset() {
	*x = GroupDeviceMultiSaveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDeviceMultiSaveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeviceMultiSaveReq) ProtoMessage() {}

func (x *GroupDeviceMultiSaveReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeviceMultiSaveReq.ProtoReflect.Descriptor instead.
func (*GroupDeviceMultiSaveReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{78}
}

func (x *GroupDeviceMultiSaveReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GroupDeviceMultiSaveReq) GetList() []*DeviceCore {
	if x != nil {
		return x.List
	}
	return nil
}

type GroupDeviceIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	GroupID    int64     `protobuf:"varint,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	ProductID  string    `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string    `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *GroupDeviceIndexReq) Reset() {
	*x = GroupDeviceIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDeviceIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeviceIndexReq) ProtoMessage() {}

func (x *GroupDeviceIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeviceIndexReq.ProtoReflect.Descriptor instead.
func (*GroupDeviceIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{79}
}

func (x *GroupDeviceIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *GroupDeviceIndexReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GroupDeviceIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *GroupDeviceIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type GroupDeviceIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*DeviceInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *GroupDeviceIndexResp) Reset() {
	*x = GroupDeviceIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDeviceIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeviceIndexResp) ProtoMessage() {}

func (x *GroupDeviceIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeviceIndexResp.ProtoReflect.Descriptor instead.
func (*GroupDeviceIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{80}
}

func (x *GroupDeviceIndexResp) GetList() []*DeviceInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *GroupDeviceIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GroupDeviceMultiDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupID int64         `protobuf:"varint,1,opt,name=groupID,proto3" json:"groupID,omitempty"`
	List    []*DeviceCore `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GroupDeviceMultiDeleteReq) Reset() {
	*x = GroupDeviceMultiDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupDeviceMultiDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupDeviceMultiDeleteReq) ProtoMessage() {}

func (x *GroupDeviceMultiDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupDeviceMultiDeleteReq.ProtoReflect.Descriptor instead.
func (*GroupDeviceMultiDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{81}
}

func (x *GroupDeviceMultiDeleteReq) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *GroupDeviceMultiDeleteReq) GetList() []*DeviceCore {
	if x != nil {
		return x.List
	}
	return nil
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude,proto3" json:"longitude,omitempty"` //经度
	Latitude  float64 `protobuf:"fixed64,2,opt,name=latitude,proto3" json:"latitude,omitempty"`   //纬度
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{82}
}

func (x *Point) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Point) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantCode     string                  `protobuf:"bytes,26,opt,name=tenantCode,proto3" json:"tenantCode,omitempty"`                                                                                           //租户号,只有default租户能查到这个字段
	ProductID      string                  `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`                                                                                              //产品id 只读
	ProjectID      int64                   `protobuf:"varint,2,opt,name=projectID,proto3" json:"projectID,omitempty"`                                                                                             //项目id 只读
	AreaID         int64                   `protobuf:"varint,3,opt,name=areaID,proto3" json:"areaID,omitempty"`                                                                                                   //项目区域id
	ProductName    string                  `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`                                                                                          //产品名称 只读
	DeviceName     string                  `protobuf:"bytes,5,opt,name=deviceName,proto3" json:"deviceName,omitempty"`                                                                                            //设备名称 读写
	CreatedTime    int64                   `protobuf:"varint,6,opt,name=createdTime,proto3" json:"createdTime,omitempty"`                                                                                         //创建时间 只读
	Secret         string                  `protobuf:"bytes,7,opt,name=secret,proto3" json:"secret,omitempty"`                                                                                                    //设备秘钥 只读
	Cert           string                  `protobuf:"bytes,8,opt,name=cert,proto3" json:"cert,omitempty"`                                                                                                        // 设备证书  只读
	Imei           string                  `protobuf:"bytes,9,opt,name=imei,proto3" json:"imei,omitempty"`                                                                                                        //IMEI号信息 只读
	Mac            string                  `protobuf:"bytes,10,opt,name=mac,proto3" json:"mac,omitempty"`                                                                                                         //MAC号信息 只读
	Version        *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=version,proto3" json:"version,omitempty"`                                                                                                 // 固件版本  读写
	HardInfo       string                  `protobuf:"bytes,12,opt,name=hardInfo,proto3" json:"hardInfo,omitempty"`                                                                                               //模组硬件型号 只读
	SoftInfo       string                  `protobuf:"bytes,13,opt,name=softInfo,proto3" json:"softInfo,omitempty"`                                                                                               //模组软件版本 只读
	Position       *Point                  `protobuf:"bytes,14,opt,name=Position,proto3" json:"Position,omitempty"`                                                                                               //设备定位,默认百度坐标系
	Address        *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=address,proto3" json:"address,omitempty"`                                                                                                 // 所在地址 读写
	Tags           map[string]string       `protobuf:"bytes,16,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`               //设备标签
	IsOnline       int64                   `protobuf:"varint,17,opt,name=isOnline,proto3" json:"isOnline,omitempty"`                                                                                              //在线状态  1离线 2在线 只读
	FirstLogin     int64                   `protobuf:"varint,18,opt,name=firstLogin,proto3" json:"firstLogin,omitempty"`                                                                                          //激活时间 只读
	LastLogin      int64                   `protobuf:"varint,19,opt,name=lastLogin,proto3" json:"lastLogin,omitempty"`                                                                                            //最后上线时间 只读
	LogLevel       int64                   `protobuf:"varint,20,opt,name=logLevel,proto3" json:"logLevel,omitempty"`                                                                                              // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	DeviceAlias    *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=deviceAlias,proto3" json:"deviceAlias,omitempty"`                                                                                         //设备别名 读写
	MobileOperator int64                   `protobuf:"varint,22,opt,name=mobileOperator,proto3" json:"mobileOperator,omitempty"`                                                                                  //移动运营商:1)移动 2)联通 3)电信 4)广电
	Phone          *wrapperspb.StringValue `protobuf:"bytes,23,opt,name=phone,proto3" json:"phone,omitempty"`                                                                                                     //手机号
	Iccid          *wrapperspb.StringValue `protobuf:"bytes,24,opt,name=iccid,proto3" json:"iccid,omitempty"`                                                                                                     //SIM卡卡号
	SchemaAlias    map[string]string       `protobuf:"bytes,25,rep,name=schemaAlias,proto3" json:"schemaAlias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //设备物模型别名,如果是结构体类型则key为xxx.xxx
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{83}
}

func (x *DeviceInfo) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

func (x *DeviceInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceInfo) GetProjectID() int64 {
	if x != nil {
		return x.ProjectID
	}
	return 0
}

func (x *DeviceInfo) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

func (x *DeviceInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *DeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *DeviceInfo) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *DeviceInfo) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *DeviceInfo) GetImei() string {
	if x != nil {
		return x.Imei
	}
	return ""
}

func (x *DeviceInfo) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DeviceInfo) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *DeviceInfo) GetHardInfo() string {
	if x != nil {
		return x.HardInfo
	}
	return ""
}

func (x *DeviceInfo) GetSoftInfo() string {
	if x != nil {
		return x.SoftInfo
	}
	return ""
}

func (x *DeviceInfo) GetPosition() *Point {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DeviceInfo) GetAddress() *wrapperspb.StringValue {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *DeviceInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DeviceInfo) GetIsOnline() int64 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *DeviceInfo) GetFirstLogin() int64 {
	if x != nil {
		return x.FirstLogin
	}
	return 0
}

func (x *DeviceInfo) GetLastLogin() int64 {
	if x != nil {
		return x.LastLogin
	}
	return 0
}

func (x *DeviceInfo) GetLogLevel() int64 {
	if x != nil {
		return x.LogLevel
	}
	return 0
}

func (x *DeviceInfo) GetDeviceAlias() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceAlias
	}
	return nil
}

func (x *DeviceInfo) GetMobileOperator() int64 {
	if x != nil {
		return x.MobileOperator
	}
	return 0
}

func (x *DeviceInfo) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *DeviceInfo) GetIccid() *wrapperspb.StringValue {
	if x != nil {
		return x.Iccid
	}
	return nil
}

func (x *DeviceInfo) GetSchemaAlias() map[string]string {
	if x != nil {
		return x.SchemaAlias
	}
	return nil
}

type ProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime        int64                   `protobuf:"varint,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"`                                                                           //创建时间 只读
	ProductID          string                  `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`                                                                                //产品id 只读
	ProductName        string                  `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`                                                                            //产品名称
	AuthMode           int64                   `protobuf:"varint,4,opt,name=authMode,proto3" json:"authMode,omitempty"`                                                                                 //认证方式:1:账密认证,2:秘钥认证
	DeviceType         int64                   `protobuf:"varint,5,opt,name=deviceType,proto3" json:"deviceType,omitempty"`                                                                             //设备类型:1:设备,2:网关,3:子设备
	CategoryID         int64                   `protobuf:"varint,6,opt,name=categoryID,proto3" json:"categoryID,omitempty"`                                                                             //产品品类
	NetType            int64                   `protobuf:"varint,7,opt,name=netType,proto3" json:"netType,omitempty"`                                                                                   //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	ProtocolCode       string                  `protobuf:"bytes,8,opt,name=protocolCode,proto3" json:"protocolCode,omitempty"`                                                                          //协议code,默认iThings  iThings,iThings-thingsboard,wumei,aliyun,huaweiyun,tuya
	AutoRegister       int64                   `protobuf:"varint,9,opt,name=autoRegister,proto3" json:"autoRegister,omitempty"`                                                                         //动态注册:1:关闭,2:打开,3:打开并自动创建设备
	Secret             string                  `protobuf:"bytes,10,opt,name=secret,proto3" json:"secret,omitempty"`                                                                                     //动态注册产品秘钥 只读
	Desc               *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=desc,proto3" json:"desc,omitempty"`                                                                                         //描述
	DevStatus          *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=devStatus,proto3" json:"devStatus,omitempty"`                                                                               // 产品状态
	Tags               map[string]string       `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //产品标签
	ProductImg         string                  `protobuf:"bytes,14,opt,name=productImg,proto3" json:"productImg,omitempty"`                                                                             //产品图片
	IsUpdateProductImg bool                    `protobuf:"varint,15,opt,name=isUpdateProductImg,proto3" json:"isUpdateProductImg,omitempty"`                                                            //只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
	Protocol           *ProtocolInfo           `protobuf:"bytes,16,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Category           *ProductCategory        `protobuf:"bytes,17,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *ProductInfo) Reset() {
	*x = ProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfo) ProtoMessage() {}

func (x *ProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfo.ProtoReflect.Descriptor instead.
func (*ProductInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{84}
}

func (x *ProductInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *ProductInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductInfo) GetAuthMode() int64 {
	if x != nil {
		return x.AuthMode
	}
	return 0
}

func (x *ProductInfo) GetDeviceType() int64 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *ProductInfo) GetCategoryID() int64 {
	if x != nil {
		return x.CategoryID
	}
	return 0
}

func (x *ProductInfo) GetNetType() int64 {
	if x != nil {
		return x.NetType
	}
	return 0
}

func (x *ProductInfo) GetProtocolCode() string {
	if x != nil {
		return x.ProtocolCode
	}
	return ""
}

func (x *ProductInfo) GetAutoRegister() int64 {
	if x != nil {
		return x.AutoRegister
	}
	return 0
}

func (x *ProductInfo) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ProductInfo) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *ProductInfo) GetDevStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.DevStatus
	}
	return nil
}

func (x *ProductInfo) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProductInfo) GetProductImg() string {
	if x != nil {
		return x.ProductImg
	}
	return ""
}

func (x *ProductInfo) GetIsUpdateProductImg() bool {
	if x != nil {
		return x.IsUpdateProductImg
	}
	return false
}

func (x *ProductInfo) GetProtocol() *ProtocolInfo {
	if x != nil {
		return x.Protocol
	}
	return nil
}

func (x *ProductInfo) GetCategory() *ProductCategory {
	if x != nil {
		return x.Category
	}
	return nil
}

type ProductInfoDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"` //产品id
}

func (x *ProductInfoDeleteReq) Reset() {
	*x = ProductInfoDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfoDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfoDeleteReq) ProtoMessage() {}

func (x *ProductInfoDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfoDeleteReq.ProtoReflect.Descriptor instead.
func (*ProductInfoDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{85}
}

func (x *ProductInfoDeleteReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type ProductInfoReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID    string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"` //产品id
	WithProtocol bool   `protobuf:"varint,2,opt,name=withProtocol,proto3" json:"withProtocol,omitempty"`
	WithCategory bool   `protobuf:"varint,3,opt,name=withCategory,proto3" json:"withCategory,omitempty"`
}

func (x *ProductInfoReadReq) Reset() {
	*x = ProductInfoReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfoReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfoReadReq) ProtoMessage() {}

func (x *ProductInfoReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfoReadReq.ProtoReflect.Descriptor instead.
func (*ProductInfoReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{86}
}

func (x *ProductInfoReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductInfoReadReq) GetWithProtocol() bool {
	if x != nil {
		return x.WithProtocol
	}
	return false
}

func (x *ProductInfoReadReq) GetWithCategory() bool {
	if x != nil {
		return x.WithCategory
	}
	return false
}

type ProductInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`                                                                                         //分页信息 只获取一个则不填
	DeviceType   int64             `protobuf:"varint,2,opt,name=deviceType,proto3" json:"deviceType,omitempty"`                                                                            //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
	ProductName  string            `protobuf:"bytes,3,opt,name=productName,proto3" json:"productName,omitempty"`                                                                           //过滤条件: 产品名称
	ProductIDs   []string          `protobuf:"bytes,4,rep,name=productIDs,proto3" json:"productIDs,omitempty"`                                                                             //过滤产品id列表
	Tags         map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
	ProtocolCode string            `protobuf:"bytes,6,opt,name=protocolCode,proto3" json:"protocolCode,omitempty"`
	WithProtocol bool              `protobuf:"varint,7,opt,name=withProtocol,proto3" json:"withProtocol,omitempty"`
	WithCategory bool              `protobuf:"varint,8,opt,name=withCategory,proto3" json:"withCategory,omitempty"`
}

func (x *ProductInfoIndexReq) Reset() {
	*x = ProductInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfoIndexReq) ProtoMessage() {}

func (x *ProductInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfoIndexReq.ProtoReflect.Descriptor instead.
func (*ProductInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{87}
}

func (x *ProductInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProductInfoIndexReq) GetDeviceType() int64 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *ProductInfoIndexReq) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ProductInfoIndexReq) GetProductIDs() []string {
	if x != nil {
		return x.ProductIDs
	}
	return nil
}

func (x *ProductInfoIndexReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ProductInfoIndexReq) GetProtocolCode() string {
	if x != nil {
		return x.ProtocolCode
	}
	return ""
}

func (x *ProductInfoIndexReq) GetWithProtocol() bool {
	if x != nil {
		return x.WithProtocol
	}
	return false
}

func (x *ProductInfoIndexReq) GetWithCategory() bool {
	if x != nil {
		return x.WithCategory
	}
	return false
}

type ProductInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProductInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //产品信息
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *ProductInfoIndexResp) Reset() {
	*x = ProductInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfoIndexResp) ProtoMessage() {}

func (x *ProductInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfoIndexResp.ProtoReflect.Descriptor instead.
func (*ProductInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{88}
}

func (x *ProductInfoIndexResp) GetList() []*ProductInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProductInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeviceInfoDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名称
}

func (x *DeviceInfoDeleteReq) Reset() {
	*x = DeviceInfoDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoDeleteReq) ProtoMessage() {}

func (x *DeviceInfoDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoDeleteReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{89}
}

func (x *DeviceInfoDeleteReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceInfoDeleteReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type DeviceCore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名称
}

func (x *DeviceCore) Reset() {
	*x = DeviceCore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCore) ProtoMessage() {}

func (x *DeviceCore) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCore.ProtoReflect.Descriptor instead.
func (*DeviceCore) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{90}
}

func (x *DeviceCore) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceCore) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type DeviceInfoReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备名称
}

func (x *DeviceInfoReadReq) Reset() {
	*x = DeviceInfoReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoReadReq) ProtoMessage() {}

func (x *DeviceInfoReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoReadReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{91}
}

func (x *DeviceInfoReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceInfoReadReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type DeviceInfoMultiUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*DeviceCore `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"` //产品id
	AreaID  int64         `protobuf:"varint,2,opt,name=areaID,proto3" json:"areaID,omitempty"`  //项目区域id
}

func (x *DeviceInfoMultiUpdateReq) Reset() {
	*x = DeviceInfoMultiUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoMultiUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoMultiUpdateReq) ProtoMessage() {}

func (x *DeviceInfoMultiUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoMultiUpdateReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoMultiUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{92}
}

func (x *DeviceInfoMultiUpdateReq) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *DeviceInfoMultiUpdateReq) GetAreaID() int64 {
	if x != nil {
		return x.AreaID
	}
	return 0
}

type DeviceInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page              *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`                                                                                         //分页信息 只获取一个则不填
	ProductID         string            `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`                                                                               //过滤条件: 产品id
	DeviceName        string            `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`                                                                             //过滤条件:模糊查询 设备名
	DeviceNames       []string          `protobuf:"bytes,4,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"`                                                                           //过滤条件:精准查询 设备名
	Tags              map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
	Range             int64             `protobuf:"varint,6,opt,name=range,proto3" json:"range,omitempty"`                                                                                      //过滤条件:取距离坐标点固定范围内的设备
	Position          *Point            `protobuf:"bytes,7,opt,name=Position,proto3" json:"Position,omitempty"`                                                                                 //设备定位,默认百度坐标系
	AreaIDs           []int64           `protobuf:"varint,8,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"`                                                                           //区域ids
	DeviceAlias       string            `protobuf:"bytes,9,opt,name=deviceAlias,proto3" json:"deviceAlias,omitempty"`                                                                           //过滤条件:模糊查询 设备别名
	IsOnline          int64             `protobuf:"varint,10,opt,name=isOnline,proto3" json:"isOnline,omitempty"`                                                                               //在线状态过滤  1离线 2在线
	ProductCategoryID int64             `protobuf:"varint,11,opt,name=productCategoryID,proto3" json:"productCategoryID,omitempty"`                                                             //产品品类id
	Devices           []*DeviceCore     `protobuf:"bytes,12,rep,name=devices,proto3" json:"devices,omitempty"`
	IsShared          int64             `protobuf:"varint,13,opt,name=isShared,proto3" json:"isShared,omitempty"`    //过滤分享的设备(这里只获取分享的设备)
	TenantCode        string            `protobuf:"bytes,14,opt,name=tenantCode,proto3" json:"tenantCode,omitempty"` //租户过滤
}

func (x *DeviceInfoIndexReq) Reset() {
	*x = DeviceInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoIndexReq) ProtoMessage() {}

func (x *DeviceInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoIndexReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{93}
}

func (x *DeviceInfoIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetRange() int64 {
	if x != nil {
		return x.Range
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetPosition() *Point {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetDeviceAlias() string {
	if x != nil {
		return x.DeviceAlias
	}
	return ""
}

func (x *DeviceInfoIndexReq) GetIsOnline() int64 {
	if x != nil {
		return x.IsOnline
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetProductCategoryID() int64 {
	if x != nil {
		return x.ProductCategoryID
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetDevices() []*DeviceCore {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *DeviceInfoIndexReq) GetIsShared() int64 {
	if x != nil {
		return x.IsShared
	}
	return 0
}

func (x *DeviceInfoIndexReq) GetTenantCode() string {
	if x != nil {
		return x.TenantCode
	}
	return ""
}

type DeviceInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*DeviceInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //设备信息
	Total int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *DeviceInfoIndexResp) Reset() {
	*x = DeviceInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoIndexResp) ProtoMessage() {}

func (x *DeviceInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoIndexResp.ProtoReflect.Descriptor instead.
func (*DeviceInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{94}
}

func (x *DeviceInfoIndexResp) GetList() []*DeviceInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *DeviceInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type RootCheckReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`       //用户名
	Password    string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`       //密码
	ClientID    string `protobuf:"bytes,3,opt,name=clientID,proto3" json:"clientID,omitempty"`       //clientID
	Ip          string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`                   //访问的ip地址
	Certificate []byte `protobuf:"bytes,5,opt,name=certificate,proto3" json:"certificate,omitempty"` //客户端证书
}

func (x *RootCheckReq) Reset() {
	*x = RootCheckReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootCheckReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootCheckReq) ProtoMessage() {}

func (x *RootCheckReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootCheckReq.ProtoReflect.Descriptor instead.
func (*RootCheckReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{95}
}

func (x *RootCheckReq) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *RootCheckReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RootCheckReq) GetClientID() string {
	if x != nil {
		return x.ClientID
	}
	return ""
}

func (x *RootCheckReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RootCheckReq) GetCertificate() []byte {
	if x != nil {
		return x.Certificate
	}
	return nil
}

type CommonSchemaUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CommonSchemaInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` //物模型信息
}

func (x *CommonSchemaUpdateReq) Reset() {
	*x = CommonSchemaUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSchemaUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSchemaUpdateReq) ProtoMessage() {}

func (x *CommonSchemaUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSchemaUpdateReq.ProtoReflect.Descriptor instead.
func (*CommonSchemaUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{96}
}

func (x *CommonSchemaUpdateReq) GetInfo() *CommonSchemaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CommonSchemaCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CommonSchemaInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` //物模型信息
}

func (x *CommonSchemaCreateReq) Reset() {
	*x = CommonSchemaCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSchemaCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSchemaCreateReq) ProtoMessage() {}

func (x *CommonSchemaCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSchemaCreateReq.ProtoReflect.Descriptor instead.
func (*CommonSchemaCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{97}
}

func (x *CommonSchemaCreateReq) GetInfo() *CommonSchemaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CommonSchemaIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`               //分页信息 只获取一个则不填
	ProductIDs  []string  `protobuf:"bytes,2,rep,name=productIDs,proto3" json:"productIDs,omitempty"`   //有这个属性的产品id列表
	Type        int64     `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`              //物模型类型 1:property属性 2:event事件 3:action行为
	Identifiers []string  `protobuf:"bytes,5,rep,name=identifiers,proto3" json:"identifiers,omitempty"` //过滤标识符列表
	Name        string    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`               //标识符名字过滤
}

func (x *CommonSchemaIndexReq) Reset() {
	*x = CommonSchemaIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSchemaIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSchemaIndexReq) ProtoMessage() {}

func (x *CommonSchemaIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSchemaIndexReq.ProtoReflect.Descriptor instead.
func (*CommonSchemaIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{98}
}

func (x *CommonSchemaIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CommonSchemaIndexReq) GetProductIDs() []string {
	if x != nil {
		return x.ProductIDs
	}
	return nil
}

func (x *CommonSchemaIndexReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommonSchemaIndexReq) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *CommonSchemaIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CommonSchemaIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*CommonSchemaInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *CommonSchemaIndexResp) Reset() {
	*x = CommonSchemaIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSchemaIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSchemaIndexResp) ProtoMessage() {}

func (x *CommonSchemaIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSchemaIndexResp.ProtoReflect.Descriptor instead.
func (*CommonSchemaIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{99}
}

func (x *CommonSchemaIndexResp) GetList() []*CommonSchemaInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *CommonSchemaIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CommonSchemaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type              int64                   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                           //物模型类型 1:property属性 2:event事件 3:action行为
	Identifier        string                  `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`                //标识符
	Name              *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                            //功能名称
	Desc              *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`                            //描述
	Required          int64                   `protobuf:"varint,7,opt,name=required,proto3" json:"required,omitempty"`                   //是否必须 1:是 2:否
	IsCanSceneLinkage int64                   `protobuf:"varint,8,opt,name=isCanSceneLinkage,proto3" json:"isCanSceneLinkage,omitempty"` //是否支持场景联动控制
	IsShareAuthPerm   int64                   `protobuf:"varint,9,opt,name=isShareAuthPerm,proto3" json:"isShareAuthPerm,omitempty"`     // 分享是否需要校验权限
	IsHistory         int64                   `protobuf:"varint,10,opt,name=isHistory,proto3" json:"isHistory,omitempty"`                // 是否存储历史记录
	Affordance        *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=affordance,proto3" json:"affordance,omitempty"`               //各功能类型的详细参数定义
	ExtendConfig      string                  `protobuf:"bytes,12,opt,name=extendConfig,proto3" json:"extendConfig,omitempty"`           //拓展参数
	Order             int64                   `protobuf:"varint,13,opt,name=order,proto3" json:"order,omitempty"`                        //排序
}

func (x *CommonSchemaInfo) Reset() {
	*x = CommonSchemaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSchemaInfo) ProtoMessage() {}

func (x *CommonSchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSchemaInfo.ProtoReflect.Descriptor instead.
func (*CommonSchemaInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{100}
}

func (x *CommonSchemaInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommonSchemaInfo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CommonSchemaInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *CommonSchemaInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *CommonSchemaInfo) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *CommonSchemaInfo) GetRequired() int64 {
	if x != nil {
		return x.Required
	}
	return 0
}

func (x *CommonSchemaInfo) GetIsCanSceneLinkage() int64 {
	if x != nil {
		return x.IsCanSceneLinkage
	}
	return 0
}

func (x *CommonSchemaInfo) GetIsShareAuthPerm() int64 {
	if x != nil {
		return x.IsShareAuthPerm
	}
	return 0
}

func (x *CommonSchemaInfo) GetIsHistory() int64 {
	if x != nil {
		return x.IsHistory
	}
	return 0
}

func (x *CommonSchemaInfo) GetAffordance() *wrapperspb.StringValue {
	if x != nil {
		return x.Affordance
	}
	return nil
}

func (x *CommonSchemaInfo) GetExtendConfig() string {
	if x != nil {
		return x.ExtendConfig
	}
	return ""
}

func (x *CommonSchemaInfo) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ProductSchemaUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ProductSchemaInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` //物模型信息
}

func (x *ProductSchemaUpdateReq) Reset() {
	*x = ProductSchemaUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaUpdateReq) ProtoMessage() {}

func (x *ProductSchemaUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaUpdateReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{101}
}

func (x *ProductSchemaUpdateReq) GetInfo() *ProductSchemaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ProductSchemaMultiCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string               `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`
	List      []*ProductSchemaInfo `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"` //物模型信息
}

func (x *ProductSchemaMultiCreateReq) Reset() {
	*x = ProductSchemaMultiCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaMultiCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaMultiCreateReq) ProtoMessage() {}

func (x *ProductSchemaMultiCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaMultiCreateReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaMultiCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{102}
}

func (x *ProductSchemaMultiCreateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductSchemaMultiCreateReq) GetList() []*ProductSchemaInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type ProductSchemaCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ProductSchemaInfo `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"` //物模型信息
}

func (x *ProductSchemaCreateReq) Reset() {
	*x = ProductSchemaCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaCreateReq) ProtoMessage() {}

func (x *ProductSchemaCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaCreateReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{103}
}

func (x *ProductSchemaCreateReq) GetInfo() *ProductSchemaInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ProductSchemaDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID  string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`   //产品id  如果为空返回所有产品的信息
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"` //标识符
}

func (x *ProductSchemaDeleteReq) Reset() {
	*x = ProductSchemaDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaDeleteReq) ProtoMessage() {}

func (x *ProductSchemaDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaDeleteReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{104}
}

func (x *ProductSchemaDeleteReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductSchemaDeleteReq) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

type ProductSchemaIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page        *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`               //分页信息 只获取一个则不填
	ProductID   string    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id  必填
	Type        int64     `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`              //物模型类型 1:property属性 2:event事件 3:action行为
	Tag         int64     `protobuf:"varint,4,opt,name=tag,proto3" json:"tag,omitempty"`                //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
	Identifiers []string  `protobuf:"bytes,5,rep,name=identifiers,proto3" json:"identifiers,omitempty"` //过滤标识符列表
	Name        string    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`               //标识符名字过滤
}

func (x *ProductSchemaIndexReq) Reset() {
	*x = ProductSchemaIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaIndexReq) ProtoMessage() {}

func (x *ProductSchemaIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaIndexReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{105}
}

func (x *ProductSchemaIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ProductSchemaIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductSchemaIndexReq) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProductSchemaIndexReq) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *ProductSchemaIndexReq) GetIdentifiers() []string {
	if x != nil {
		return x.Identifiers
	}
	return nil
}

func (x *ProductSchemaIndexReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ProductSchemaIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ProductSchemaInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *ProductSchemaIndexResp) Reset() {
	*x = ProductSchemaIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaIndexResp) ProtoMessage() {}

func (x *ProductSchemaIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaIndexResp.ProtoReflect.Descriptor instead.
func (*ProductSchemaIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{106}
}

func (x *ProductSchemaIndexResp) GetList() []*ProductSchemaInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ProductSchemaIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ProductSchemaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID         string                  `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"`                  //产品id  必填
	Type              int64                   `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                           //物模型类型 1:property属性 2:event事件 3:action行为
	Tag               int64                   `protobuf:"varint,3,opt,name=tag,proto3" json:"tag,omitempty"`                             //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
	Identifier        string                  `protobuf:"bytes,4,opt,name=identifier,proto3" json:"identifier,omitempty"`                //标识符
	Name              *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                            //功能名称
	Desc              *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`                            //描述
	Required          int64                   `protobuf:"varint,7,opt,name=required,proto3" json:"required,omitempty"`                   //是否必须 1:是 2:否
	IsCanSceneLinkage int64                   `protobuf:"varint,8,opt,name=isCanSceneLinkage,proto3" json:"isCanSceneLinkage,omitempty"` //是否支持场景联动控制
	IsShareAuthPerm   int64                   `protobuf:"varint,9,opt,name=isShareAuthPerm,proto3" json:"isShareAuthPerm,omitempty"`     // 分享是否需要校验权限
	IsHistory         int64                   `protobuf:"varint,10,opt,name=isHistory,proto3" json:"isHistory,omitempty"`                // 是否存储历史记录
	Affordance        *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=affordance,proto3" json:"affordance,omitempty"`               //各功能类型的详细参数定义
	ExtendConfig      string                  `protobuf:"bytes,12,opt,name=extendConfig,proto3" json:"extendConfig,omitempty"`           //拓展参数
	Order             int64                   `protobuf:"varint,13,opt,name=order,proto3" json:"order,omitempty"`                        //排序
}

func (x *ProductSchemaInfo) Reset() {
	*x = ProductSchemaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaInfo) ProtoMessage() {}

func (x *ProductSchemaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaInfo.ProtoReflect.Descriptor instead.
func (*ProductSchemaInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{107}
}

func (x *ProductSchemaInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductSchemaInfo) GetType() int64 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ProductSchemaInfo) GetTag() int64 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *ProductSchemaInfo) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *ProductSchemaInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ProductSchemaInfo) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *ProductSchemaInfo) GetRequired() int64 {
	if x != nil {
		return x.Required
	}
	return 0
}

func (x *ProductSchemaInfo) GetIsCanSceneLinkage() int64 {
	if x != nil {
		return x.IsCanSceneLinkage
	}
	return 0
}

func (x *ProductSchemaInfo) GetIsShareAuthPerm() int64 {
	if x != nil {
		return x.IsShareAuthPerm
	}
	return 0
}

func (x *ProductSchemaInfo) GetIsHistory() int64 {
	if x != nil {
		return x.IsHistory
	}
	return 0
}

func (x *ProductSchemaInfo) GetAffordance() *wrapperspb.StringValue {
	if x != nil {
		return x.Affordance
	}
	return nil
}

func (x *ProductSchemaInfo) GetExtendConfig() string {
	if x != nil {
		return x.ExtendConfig
	}
	return ""
}

func (x *ProductSchemaInfo) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ProductSchemaTslImportReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"` //产品id
	Tsl       string `protobuf:"bytes,2,opt,name=tsl,proto3" json:"tsl,omitempty"`             //物模型tsl
}

func (x *ProductSchemaTslImportReq) Reset() {
	*x = ProductSchemaTslImportReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaTslImportReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaTslImportReq) ProtoMessage() {}

func (x *ProductSchemaTslImportReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaTslImportReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaTslImportReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{108}
}

func (x *ProductSchemaTslImportReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *ProductSchemaTslImportReq) GetTsl() string {
	if x != nil {
		return x.Tsl
	}
	return ""
}

type ProductSchemaTslReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID string `protobuf:"bytes,1,opt,name=productID,proto3" json:"productID,omitempty"` //产品id
}

func (x *ProductSchemaTslReadReq) Reset() {
	*x = ProductSchemaTslReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaTslReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaTslReadReq) ProtoMessage() {}

func (x *ProductSchemaTslReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaTslReadReq.ProtoReflect.Descriptor instead.
func (*ProductSchemaTslReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{109}
}

func (x *ProductSchemaTslReadReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type ProductSchemaTslReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tsl string `protobuf:"bytes,1,opt,name=tsl,proto3" json:"tsl,omitempty"` //物模型tsl
}

func (x *ProductSchemaTslReadResp) Reset() {
	*x = ProductSchemaTslReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductSchemaTslReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductSchemaTslReadResp) ProtoMessage() {}

func (x *ProductSchemaTslReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductSchemaTslReadResp.ProtoReflect.Descriptor instead.
func (*ProductSchemaTslReadResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{110}
}

func (x *ProductSchemaTslReadResp) GetTsl() string {
	if x != nil {
		return x.Tsl
	}
	return ""
}

type DeviceCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountTypes []string `protobuf:"bytes,1,rep,name=countTypes,proto3" json:"countTypes,omitempty"`     //在线设备数:status,设备类型: deviceType
	RangeType  int64    `protobuf:"varint,2,opt,name=rangeType,proto3" json:"rangeType,omitempty"`      //0:全部 1:area 2:group
	RangeIDs   []int64  `protobuf:"varint,3,rep,packed,name=rangeIDs,proto3" json:"rangeIDs,omitempty"` ////统计的id列表, areaID或者groupID
}

func (x *DeviceCountReq) Reset() {
	*x = DeviceCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCountReq) ProtoMessage() {}

func (x *DeviceCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCountReq.ProtoReflect.Descriptor instead.
func (*DeviceCountReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{111}
}

func (x *DeviceCountReq) GetCountTypes() []string {
	if x != nil {
		return x.CountTypes
	}
	return nil
}

func (x *DeviceCountReq) GetRangeType() int64 {
	if x != nil {
		return x.RangeType
	}
	return 0
}

func (x *DeviceCountReq) GetRangeIDs() []int64 {
	if x != nil {
		return x.RangeIDs
	}
	return nil
}

type DeviceCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DeviceCountInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DeviceCountResp) Reset() {
	*x = DeviceCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCountResp) ProtoMessage() {}

func (x *DeviceCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCountResp.ProtoReflect.Descriptor instead.
func (*DeviceCountResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{112}
}

func (x *DeviceCountResp) GetList() []*DeviceCountInfo {
	if x != nil {
		return x.List
	}
	return nil
}

type DeviceCountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RangeID int64            `protobuf:"varint,1,opt,name=rangeID,proto3" json:"rangeID,omitempty"`
	Count   map[string]int64 `protobuf:"bytes,2,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *DeviceCountInfo) Reset() {
	*x = DeviceCountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCountInfo) ProtoMessage() {}

func (x *DeviceCountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCountInfo.ProtoReflect.Descriptor instead.
func (*DeviceCountInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{113}
}

func (x *DeviceCountInfo) GetRangeID() int64 {
	if x != nil {
		return x.RangeID
	}
	return 0
}

func (x *DeviceCountInfo) GetCount() map[string]int64 {
	if x != nil {
		return x.Count
	}
	return nil
}

type DeviceInfoCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange *TimeRange `protobuf:"bytes,1,opt,name=timeRange,proto3" json:"timeRange,omitempty"`
	AreaIDs   []int64    `protobuf:"varint,2,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"`
	GroupIDs  []int64    `protobuf:"varint,3,rep,packed,name=groupIDs,proto3" json:"groupIDs,omitempty"`
}

func (x *DeviceInfoCountReq) Reset() {
	*x = DeviceInfoCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoCountReq) ProtoMessage() {}

func (x *DeviceInfoCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoCountReq.ProtoReflect.Descriptor instead.
func (*DeviceInfoCountReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{114}
}

func (x *DeviceInfoCountReq) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *DeviceInfoCountReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *DeviceInfoCountReq) GetGroupIDs() []int64 {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type DeviceTypeCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange *TimeRange `protobuf:"bytes,1,opt,name=timeRange,proto3" json:"timeRange,omitempty"`
	AreaIDs   []int64    `protobuf:"varint,2,rep,packed,name=areaIDs,proto3" json:"areaIDs,omitempty"`
	GroupIDs  []int64    `protobuf:"varint,3,rep,packed,name=groupIDs,proto3" json:"groupIDs,omitempty"`
}

func (x *DeviceTypeCountReq) Reset() {
	*x = DeviceTypeCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTypeCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTypeCountReq) ProtoMessage() {}

func (x *DeviceTypeCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTypeCountReq.ProtoReflect.Descriptor instead.
func (*DeviceTypeCountReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{115}
}

func (x *DeviceTypeCountReq) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *DeviceTypeCountReq) GetAreaIDs() []int64 {
	if x != nil {
		return x.AreaIDs
	}
	return nil
}

func (x *DeviceTypeCountReq) GetGroupIDs() []int64 {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type DeviceInfoCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Online   int64 `protobuf:"varint,1,opt,name=online,proto3" json:"online,omitempty"`
	Offline  int64 `protobuf:"varint,2,opt,name=offline,proto3" json:"offline,omitempty"`
	Inactive int64 `protobuf:"varint,3,opt,name=inactive,proto3" json:"inactive,omitempty"`
	Unknown  int64 `protobuf:"varint,4,opt,name=unknown,proto3" json:"unknown,omitempty"`
	Total    int64 `protobuf:"varint,5,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *DeviceInfoCount) Reset() {
	*x = DeviceInfoCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfoCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfoCount) ProtoMessage() {}

func (x *DeviceInfoCount) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfoCount.ProtoReflect.Descriptor instead.
func (*DeviceInfoCount) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{116}
}

func (x *DeviceInfoCount) GetOnline() int64 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *DeviceInfoCount) GetOffline() int64 {
	if x != nil {
		return x.Offline
	}
	return 0
}

func (x *DeviceInfoCount) GetInactive() int64 {
	if x != nil {
		return x.Inactive
	}
	return 0
}

func (x *DeviceInfoCount) GetUnknown() int64 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

func (x *DeviceInfoCount) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeviceTypeCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device  int64 `protobuf:"varint,1,opt,name=device,proto3" json:"device,omitempty"`
	Gateway int64 `protobuf:"varint,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Subset  int64 `protobuf:"varint,3,opt,name=subset,proto3" json:"subset,omitempty"`
	Unknown int64 `protobuf:"varint,4,opt,name=unknown,proto3" json:"unknown,omitempty"`
}

func (x *DeviceTypeCountResp) Reset() {
	*x = DeviceTypeCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceTypeCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceTypeCountResp) ProtoMessage() {}

func (x *DeviceTypeCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceTypeCountResp.ProtoReflect.Descriptor instead.
func (*DeviceTypeCountResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{117}
}

func (x *DeviceTypeCountResp) GetDevice() int64 {
	if x != nil {
		return x.Device
	}
	return 0
}

func (x *DeviceTypeCountResp) GetGateway() int64 {
	if x != nil {
		return x.Gateway
	}
	return 0
}

func (x *DeviceTypeCountResp) GetSubset() int64 {
	if x != nil {
		return x.Subset
	}
	return 0
}

func (x *DeviceTypeCountResp) GetUnknown() int64 {
	if x != nil {
		return x.Unknown
	}
	return 0
}

// 下面是ota固件管理模块的消息
type Firmware struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime int64                   `protobuf:"varint,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"` //创建时间 只读
	FirmwareID  int64                   `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID   string                  `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	Name        string                  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`             //升级包名称
	Version     string                  `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`       //升级包版本
	IsDiff      int32                   `protobuf:"varint,6,opt,name=isDiff,proto3" json:"isDiff,omitempty"`        //是否差分包,1:整包,2:差分
	SignMethod  string                  `protobuf:"bytes,7,opt,name=signMethod,proto3" json:"signMethod,omitempty"` //签名方法 MD5/SHA
	Desc        *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=desc,proto3" json:"desc,omitempty"`             //描述
	ExtData     *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=extData,proto3" json:"extData,omitempty"`       //自定义数据
	Files       []*OtaFirmwareFile      `protobuf:"bytes,10,rep,name=files,proto3" json:"files,omitempty"`          //产品信息
}

func (x *Firmware) Reset() {
	*x = Firmware{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Firmware) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Firmware) ProtoMessage() {}

func (x *Firmware) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Firmware.ProtoReflect.Descriptor instead.
func (*Firmware) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{118}
}

func (x *Firmware) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *Firmware) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *Firmware) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *Firmware) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Firmware) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Firmware) GetIsDiff() int32 {
	if x != nil {
		return x.IsDiff
	}
	return 0
}

func (x *Firmware) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *Firmware) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *Firmware) GetExtData() *wrapperspb.StringValue {
	if x != nil {
		return x.ExtData
	}
	return nil
}

func (x *Firmware) GetFiles() []*OtaFirmwareFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type FirmwareResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID int64 `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
}

func (x *FirmwareResp) Reset() {
	*x = FirmwareResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareResp) ProtoMessage() {}

func (x *FirmwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareResp.ProtoReflect.Descriptor instead.
func (*FirmwareResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{119}
}

func (x *FirmwareResp) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

type FirmwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime int64                   `protobuf:"varint,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"` //创建时间 只读
	FirmwareID  int64                   `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID   string                  `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	ProductName string                  `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	Name        string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`             //升级包名称
	Version     string                  `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`       //升级包版本
	IsDiff      int32                   `protobuf:"varint,7,opt,name=isDiff,proto3" json:"isDiff,omitempty"`        //是否差分包,1:整包,2:差分
	SignMethod  string                  `protobuf:"bytes,8,opt,name=signMethod,proto3" json:"signMethod,omitempty"` //签名方法 MD5/SHA
	Desc        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`             //描述
	ExtData     *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=extData,proto3" json:"extData,omitempty"`      //自定义数据
	Files       []*OtaFirmwareFile      `protobuf:"bytes,11,rep,name=files,proto3" json:"files,omitempty"`          //产品信息
}

func (x *FirmwareInfo) Reset() {
	*x = FirmwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfo) ProtoMessage() {}

func (x *FirmwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfo.ProtoReflect.Descriptor instead.
func (*FirmwareInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{120}
}

func (x *FirmwareInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *FirmwareInfo) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FirmwareInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *FirmwareInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *FirmwareInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirmwareInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FirmwareInfo) GetIsDiff() int32 {
	if x != nil {
		return x.IsDiff
	}
	return 0
}

func (x *FirmwareInfo) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *FirmwareInfo) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *FirmwareInfo) GetExtData() *wrapperspb.StringValue {
	if x != nil {
		return x.ExtData
	}
	return nil
}

func (x *FirmwareInfo) GetFiles() []*OtaFirmwareFile {
	if x != nil {
		return x.Files
	}
	return nil
}

type OtaFirmwareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *OtaFirmwareFile) Reset() {
	*x = OtaFirmwareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFile) ProtoMessage() {}

func (x *OtaFirmwareFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFile.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFile) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{121}
}

func (x *OtaFirmwareFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *OtaFirmwareFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FirmwareInfoDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID int64 `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
}

func (x *FirmwareInfoDeleteReq) Reset() {
	*x = FirmwareInfoDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoDeleteReq) ProtoMessage() {}

func (x *FirmwareInfoDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoDeleteReq.ProtoReflect.Descriptor instead.
func (*FirmwareInfoDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{122}
}

func (x *FirmwareInfoDeleteReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

type FirmwareInfoDeleteResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path []string `protobuf:"bytes,1,rep,name=path,proto3" json:"path,omitempty"`
}

func (x *FirmwareInfoDeleteResp) Reset() {
	*x = FirmwareInfoDeleteResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoDeleteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoDeleteResp) ProtoMessage() {}

func (x *FirmwareInfoDeleteResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoDeleteResp.ProtoReflect.Descriptor instead.
func (*FirmwareInfoDeleteResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{123}
}

func (x *FirmwareInfoDeleteResp) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

type FirmwareInfoIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *OtaPageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"` //分页信息 只获取一个则不填
	FirmwareID int64        `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID  string       `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *FirmwareInfoIndexReq) Reset() {
	*x = FirmwareInfoIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoIndexReq) ProtoMessage() {}

func (x *FirmwareInfoIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoIndexReq.ProtoReflect.Descriptor instead.
func (*FirmwareInfoIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{124}
}

func (x *FirmwareInfoIndexReq) GetPage() *OtaPageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *FirmwareInfoIndexReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FirmwareInfoIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

type FirmwareInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*FirmwareInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    //固件信息
	Total int64           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` //总数(只有分页的时候会返回)
}

func (x *FirmwareInfoIndexResp) Reset() {
	*x = FirmwareInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoIndexResp) ProtoMessage() {}

func (x *FirmwareInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoIndexResp.ProtoReflect.Descriptor instead.
func (*FirmwareInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{125}
}

func (x *FirmwareInfoIndexResp) GetList() []*FirmwareInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *FirmwareInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FirmwareInfoReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID int64 `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
}

func (x *FirmwareInfoReadReq) Reset() {
	*x = FirmwareInfoReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoReadReq) ProtoMessage() {}

func (x *FirmwareInfoReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoReadReq.ProtoReflect.Descriptor instead.
func (*FirmwareInfoReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{126}
}

func (x *FirmwareInfoReadReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

type OtaFirmwareFileReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID     int64  `protobuf:"varint,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Host       string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	FilePath   string `protobuf:"bytes,4,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Size       int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Storage    string `protobuf:"bytes,6,opt,name=storage,proto3" json:"storage,omitempty"`
	SignMethod string `protobuf:"bytes,7,opt,name=signMethod,proto3" json:"signMethod,omitempty"`
	Signature  string `protobuf:"bytes,8,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OtaFirmwareFileReq) Reset() {
	*x = OtaFirmwareFileReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFileReq) ProtoMessage() {}

func (x *OtaFirmwareFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFileReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFileReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{127}
}

func (x *OtaFirmwareFileReq) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *OtaFirmwareFileReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaFirmwareFileReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *OtaFirmwareFileReq) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *OtaFirmwareFileReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OtaFirmwareFileReq) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *OtaFirmwareFileReq) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *OtaFirmwareFileReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type OtaFirmwareFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID     int64  `protobuf:"varint,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	FirmwareID int64  `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Host       string `protobuf:"bytes,4,opt,name=host,proto3" json:"host,omitempty"`
	FilePath   string `protobuf:"bytes,5,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Size       int64  `protobuf:"varint,6,opt,name=size,proto3" json:"size,omitempty"`
	Storage    string `protobuf:"bytes,7,opt,name=storage,proto3" json:"storage,omitempty"`
	SignMethod string `protobuf:"bytes,8,opt,name=signMethod,proto3" json:"signMethod,omitempty"`
	Signature  string `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OtaFirmwareFileInfo) Reset() {
	*x = OtaFirmwareFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFileInfo) ProtoMessage() {}

func (x *OtaFirmwareFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFileInfo.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFileInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{128}
}

func (x *OtaFirmwareFileInfo) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *OtaFirmwareFileInfo) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaFirmwareFileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaFirmwareFileInfo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *OtaFirmwareFileInfo) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *OtaFirmwareFileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OtaFirmwareFileInfo) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *OtaFirmwareFileInfo) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *OtaFirmwareFileInfo) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type OtaFirmwareFileResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileID   int64  `protobuf:"varint,1,opt,name=fileID,proto3" json:"fileID,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	FilePath string `protobuf:"bytes,4,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Size     int64  `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Storage  string `protobuf:"bytes,6,opt,name=storage,proto3" json:"storage,omitempty"`
	// string signMethod = 7;
	Signature string `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *OtaFirmwareFileResp) Reset() {
	*x = OtaFirmwareFileResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFileResp) ProtoMessage() {}

func (x *OtaFirmwareFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFileResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFileResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{129}
}

func (x *OtaFirmwareFileResp) GetFileID() int64 {
	if x != nil {
		return x.FileID
	}
	return 0
}

func (x *OtaFirmwareFileResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OtaFirmwareFileResp) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *OtaFirmwareFileResp) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *OtaFirmwareFileResp) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OtaFirmwareFileResp) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *OtaFirmwareFileResp) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

type OtaFirmwareFileIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *OtaPageInfo           `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	FirmwareID int64                  `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	Size       *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *OtaFirmwareFileIndexReq) Reset() {
	*x = OtaFirmwareFileIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFileIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFileIndexReq) ProtoMessage() {}

func (x *OtaFirmwareFileIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFileIndexReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFileIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{130}
}

func (x *OtaFirmwareFileIndexReq) GetPage() *OtaPageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *OtaFirmwareFileIndexReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaFirmwareFileIndexReq) GetSize() *wrapperspb.Int64Value {
	if x != nil {
		return x.Size
	}
	return nil
}

type OtaFirmwareFileIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*OtaFirmwareFileInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OtaFirmwareFileIndexResp) Reset() {
	*x = OtaFirmwareFileIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareFileIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareFileIndexResp) ProtoMessage() {}

func (x *OtaFirmwareFileIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareFileIndexResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareFileIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{131}
}

func (x *OtaFirmwareFileIndexResp) GetList() []*OtaFirmwareFileInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *OtaFirmwareFileIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type FirmwareInfoReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedTime int64                   `protobuf:"varint,1,opt,name=createdTime,proto3" json:"createdTime,omitempty"` //创建时间 只读
	FirmwareID  int64                   `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID   string                  `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	ProductName string                  `protobuf:"bytes,4,opt,name=productName,proto3" json:"productName,omitempty"`
	Name        string                  `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`       //升级包名称
	Version     string                  `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"` //升级包版本
	IsDiff      int32                   `protobuf:"varint,7,opt,name=isDiff,proto3" json:"isDiff,omitempty"`  //是否差分包,1:整包,2:差分
	SignMethod  string                  `protobuf:"bytes,8,opt,name=signMethod,proto3" json:"signMethod,omitempty"`
	Desc        *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=desc,proto3" json:"desc,omitempty"`       //描述
	ExtData     *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=extData,proto3" json:"extData,omitempty"` //自定义数据
	Files       []*OtaFirmwareFileResp  `protobuf:"bytes,12,rep,name=files,proto3" json:"files,omitempty"`     //产品信息
}

func (x *FirmwareInfoReadResp) Reset() {
	*x = FirmwareInfoReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareInfoReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareInfoReadResp) ProtoMessage() {}

func (x *FirmwareInfoReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareInfoReadResp.ProtoReflect.Descriptor instead.
func (*FirmwareInfoReadResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{132}
}

func (x *FirmwareInfoReadResp) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *FirmwareInfoReadResp) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *FirmwareInfoReadResp) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *FirmwareInfoReadResp) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *FirmwareInfoReadResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirmwareInfoReadResp) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *FirmwareInfoReadResp) GetIsDiff() int32 {
	if x != nil {
		return x.IsDiff
	}
	return 0
}

func (x *FirmwareInfoReadResp) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *FirmwareInfoReadResp) GetDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.Desc
	}
	return nil
}

func (x *FirmwareInfoReadResp) GetExtData() *wrapperspb.StringValue {
	if x != nil {
		return x.ExtData
	}
	return nil
}

func (x *FirmwareInfoReadResp) GetFiles() []*OtaFirmwareFileResp {
	if x != nil {
		return x.Files
	}
	return nil
}

type OtaFirmwareDeviceInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID int64 `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
}

func (x *OtaFirmwareDeviceInfoReq) Reset() {
	*x = OtaFirmwareDeviceInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareDeviceInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareDeviceInfoReq) ProtoMessage() {}

func (x *OtaFirmwareDeviceInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareDeviceInfoReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareDeviceInfoReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{133}
}

func (x *OtaFirmwareDeviceInfoReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

type OtaFirmwareDeviceInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Versions string `protobuf:"bytes,1,opt,name=versions,proto3" json:"versions,omitempty"`
}

func (x *OtaFirmwareDeviceInfoResp) Reset() {
	*x = OtaFirmwareDeviceInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareDeviceInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareDeviceInfoResp) ProtoMessage() {}

func (x *OtaFirmwareDeviceInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareDeviceInfoResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareDeviceInfoResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{134}
}

func (x *OtaFirmwareDeviceInfoResp) GetVersions() string {
	if x != nil {
		return x.Versions
	}
	return ""
}

// 下面是ota升级任务管理模块的消息
type OtaTaskCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID  int64                   `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	TaskUid     string                  `protobuf:"bytes,2,opt,name=taskUid,proto3" json:"taskUid,omitempty"`
	Type        int32                   `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	UpgradeType int32                   `protobuf:"varint,4,opt,name=upgradeType,proto3" json:"upgradeType,omitempty"`
	AutoRepeat  int32                   `protobuf:"varint,5,opt,name=autoRepeat,proto3" json:"autoRepeat,omitempty"`
	DeviceList  *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=deviceList,proto3" json:"deviceList,omitempty"`
	VersionList *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=versionList,proto3" json:"versionList,omitempty"`
}

func (x *OtaTaskCreateReq) Reset() {
	*x = OtaTaskCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskCreateReq) ProtoMessage() {}

func (x *OtaTaskCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskCreateReq.ProtoReflect.Descriptor instead.
func (*OtaTaskCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{135}
}

func (x *OtaTaskCreateReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaTaskCreateReq) GetTaskUid() string {
	if x != nil {
		return x.TaskUid
	}
	return ""
}

func (x *OtaTaskCreateReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OtaTaskCreateReq) GetUpgradeType() int32 {
	if x != nil {
		return x.UpgradeType
	}
	return 0
}

func (x *OtaTaskCreateReq) GetAutoRepeat() int32 {
	if x != nil {
		return x.AutoRepeat
	}
	return 0
}

func (x *OtaTaskCreateReq) GetDeviceList() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceList
	}
	return nil
}

func (x *OtaTaskCreateReq) GetVersionList() *wrapperspb.StringValue {
	if x != nil {
		return x.VersionList
	}
	return nil
}

type OtaTaskCreatResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID int64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *OtaTaskCreatResp) Reset() {
	*x = OtaTaskCreatResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskCreatResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskCreatResp) ProtoMessage() {}

func (x *OtaTaskCreatResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskCreatResp.ProtoReflect.Descriptor instead.
func (*OtaTaskCreatResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{136}
}

func (x *OtaTaskCreatResp) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type OtaTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      int64                   `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	FirmwareID  int64                   `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID   string                  `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	TaskUid     string                  `protobuf:"bytes,4,opt,name=taskUid,proto3" json:"taskUid,omitempty"`
	Type        int32                   `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	UpgradeType int32                   `protobuf:"varint,6,opt,name=upgradeType,proto3" json:"upgradeType,omitempty"`
	AutoRepeat  int32                   `protobuf:"varint,7,opt,name=autoRepeat,proto3" json:"autoRepeat,omitempty"`
	Status      int32                   `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"` //升级状态:1未升级2升级中3完成4已取消
	DeviceList  *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=deviceList,proto3" json:"deviceList,omitempty"`
	VersionList *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=versionList,proto3" json:"versionList,omitempty"`
	CreatedTime int64                   `protobuf:"varint,11,opt,name=createdTime,proto3" json:"createdTime,omitempty"` //创建时间 只读
}

func (x *OtaTaskInfo) Reset() {
	*x = OtaTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskInfo) ProtoMessage() {}

func (x *OtaTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskInfo.ProtoReflect.Descriptor instead.
func (*OtaTaskInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{137}
}

func (x *OtaTaskInfo) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *OtaTaskInfo) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaTaskInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaTaskInfo) GetTaskUid() string {
	if x != nil {
		return x.TaskUid
	}
	return ""
}

func (x *OtaTaskInfo) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OtaTaskInfo) GetUpgradeType() int32 {
	if x != nil {
		return x.UpgradeType
	}
	return 0
}

func (x *OtaTaskInfo) GetAutoRepeat() int32 {
	if x != nil {
		return x.AutoRepeat
	}
	return 0
}

func (x *OtaTaskInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OtaTaskInfo) GetDeviceList() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceList
	}
	return nil
}

func (x *OtaTaskInfo) GetVersionList() *wrapperspb.StringValue {
	if x != nil {
		return x.VersionList
	}
	return nil
}

func (x *OtaTaskInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type OtaTaskCancleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID int64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *OtaTaskCancleReq) Reset() {
	*x = OtaTaskCancleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskCancleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskCancleReq) ProtoMessage() {}

func (x *OtaTaskCancleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskCancleReq.ProtoReflect.Descriptor instead.
func (*OtaTaskCancleReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{138}
}

func (x *OtaTaskCancleReq) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type OtaTaskIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *OtaPageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	FirmwareID int64        `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	ProductID  int64        `protobuf:"varint,3,opt,name=productID,proto3" json:"productID,omitempty"`
}

func (x *OtaTaskIndexReq) Reset() {
	*x = OtaTaskIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskIndexReq) ProtoMessage() {}

func (x *OtaTaskIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskIndexReq.ProtoReflect.Descriptor instead.
func (*OtaTaskIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{139}
}

func (x *OtaTaskIndexReq) GetPage() *OtaPageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *OtaTaskIndexReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaTaskIndexReq) GetProductID() int64 {
	if x != nil {
		return x.ProductID
	}
	return 0
}

type OtaTaskIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*OtaTaskInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64          `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OtaTaskIndexResp) Reset() {
	*x = OtaTaskIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskIndexResp) ProtoMessage() {}

func (x *OtaTaskIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskIndexResp.ProtoReflect.Descriptor instead.
func (*OtaTaskIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{140}
}

func (x *OtaTaskIndexResp) GetList() []*OtaTaskInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *OtaTaskIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OtaTaskReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID int64 `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
}

func (x *OtaTaskReadReq) Reset() {
	*x = OtaTaskReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskReadReq) ProtoMessage() {}

func (x *OtaTaskReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskReadReq.ProtoReflect.Descriptor instead.
func (*OtaTaskReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{141}
}

func (x *OtaTaskReadReq) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

type OtaTaskReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskID      int64                   `protobuf:"varint,1,opt,name=taskID,proto3" json:"taskID,omitempty"`
	FirmwareID  int64                   `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	TaskUid     string                  `protobuf:"bytes,3,opt,name=taskUid,proto3" json:"taskUid,omitempty"`          //批次号
	Type        int32                   `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`               //升级范围1全部设备2定向升级
	UpgradeType int32                   `protobuf:"varint,5,opt,name=upgradeType,proto3" json:"upgradeType,omitempty"` //升级策略:1静态升级2动态升级
	AutoRepeat  int32                   `protobuf:"varint,6,opt,name=autoRepeat,proto3" json:"autoRepeat,omitempty"`   //是否自动重试,1:不,2自动重试
	Status      int32                   `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`           //升级状态:1未升级2升级中3完成4已取消
	DeviceList  *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=deviceList,proto3" json:"deviceList,omitempty"`
	VersionList *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=versionList,proto3" json:"versionList,omitempty"`
	CreatedTime int64                   `protobuf:"varint,10,opt,name=createdTime,proto3" json:"createdTime,omitempty"`
}

func (x *OtaTaskReadResp) Reset() {
	*x = OtaTaskReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskReadResp) ProtoMessage() {}

func (x *OtaTaskReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskReadResp.ProtoReflect.Descriptor instead.
func (*OtaTaskReadResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{142}
}

func (x *OtaTaskReadResp) GetTaskID() int64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *OtaTaskReadResp) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaTaskReadResp) GetTaskUid() string {
	if x != nil {
		return x.TaskUid
	}
	return ""
}

func (x *OtaTaskReadResp) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *OtaTaskReadResp) GetUpgradeType() int32 {
	if x != nil {
		return x.UpgradeType
	}
	return 0
}

func (x *OtaTaskReadResp) GetAutoRepeat() int32 {
	if x != nil {
		return x.AutoRepeat
	}
	return 0
}

func (x *OtaTaskReadResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OtaTaskReadResp) GetDeviceList() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceList
	}
	return nil
}

func (x *OtaTaskReadResp) GetVersionList() *wrapperspb.StringValue {
	if x != nil {
		return x.VersionList
	}
	return nil
}

func (x *OtaTaskReadResp) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type OtaTaskDeviceIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       *OtaPageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	FirmwareID int64        `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	TaskUid    string       `protobuf:"bytes,3,opt,name=taskUid,proto3" json:"taskUid,omitempty"`       //批次号
	DeviceName string       `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"` //设备
	Status     int32        `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`        //状态
}

func (x *OtaTaskDeviceIndexReq) Reset() {
	*x = OtaTaskDeviceIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskDeviceIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskDeviceIndexReq) ProtoMessage() {}

func (x *OtaTaskDeviceIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskDeviceIndexReq.ProtoReflect.Descriptor instead.
func (*OtaTaskDeviceIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{143}
}

func (x *OtaTaskDeviceIndexReq) GetPage() *OtaPageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *OtaTaskDeviceIndexReq) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaTaskDeviceIndexReq) GetTaskUid() string {
	if x != nil {
		return x.TaskUid
	}
	return ""
}

func (x *OtaTaskDeviceIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *OtaTaskDeviceIndexReq) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type OtaTaskDeviceIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*OtaTaskDeviceInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64                `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OtaTaskDeviceIndexResp) Reset() {
	*x = OtaTaskDeviceIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskDeviceIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskDeviceIndexResp) ProtoMessage() {}

func (x *OtaTaskDeviceIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskDeviceIndexResp.ProtoReflect.Descriptor instead.
func (*OtaTaskDeviceIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{144}
}

func (x *OtaTaskDeviceIndexResp) GetList() []*OtaTaskDeviceInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *OtaTaskDeviceIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OtaTaskDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FirmwareID  int64  `protobuf:"varint,2,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
	DeviceName  string `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ProductID   string `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`
	ProductName string `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
	TaskUid     string `protobuf:"bytes,6,opt,name=taskUid,proto3" json:"taskUid,omitempty"`           //批次号
	Status      int32  `protobuf:"varint,7,opt,name=status,proto3" json:"status,omitempty"`            //升级状态:101待确认 201/202/203待推送 301已推送 401升级中 501升级成功 601升级失败 701已取消
	Version     string `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`           //当前版本号
	Desc        string `protobuf:"bytes,9,opt,name=desc,proto3" json:"desc,omitempty"`                 //状态详情
	RetryCount  int64  `protobuf:"varint,10,opt,name=retryCount,proto3" json:"retryCount,omitempty"`   //重试次数,计划最多20次
	UpdatedTime int64  `protobuf:"varint,11,opt,name=updatedTime,proto3" json:"updatedTime,omitempty"` //创建时间 只读
}

func (x *OtaTaskDeviceInfo) Reset() {
	*x = OtaTaskDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskDeviceInfo) ProtoMessage() {}

func (x *OtaTaskDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskDeviceInfo.ProtoReflect.Descriptor instead.
func (*OtaTaskDeviceInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{145}
}

func (x *OtaTaskDeviceInfo) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OtaTaskDeviceInfo) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

func (x *OtaTaskDeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *OtaTaskDeviceInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaTaskDeviceInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OtaTaskDeviceInfo) GetTaskUid() string {
	if x != nil {
		return x.TaskUid
	}
	return ""
}

func (x *OtaTaskDeviceInfo) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OtaTaskDeviceInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OtaTaskDeviceInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OtaTaskDeviceInfo) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *OtaTaskDeviceInfo) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

type OtaTaskDeviceReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *OtaTaskDeviceReadReq) Reset() {
	*x = OtaTaskDeviceReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskDeviceReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskDeviceReadReq) ProtoMessage() {}

func (x *OtaTaskDeviceReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskDeviceReadReq.ProtoReflect.Descriptor instead.
func (*OtaTaskDeviceReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{146}
}

func (x *OtaTaskDeviceReadReq) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type OtaTaskBatchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ProductID  string `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`
	DeviceName string `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Version    string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Module     string `protobuf:"bytes,5,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *OtaTaskBatchReq) Reset() {
	*x = OtaTaskBatchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskBatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskBatchReq) ProtoMessage() {}

func (x *OtaTaskBatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskBatchReq.ProtoReflect.Descriptor instead.
func (*OtaTaskBatchReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{147}
}

func (x *OtaTaskBatchReq) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OtaTaskBatchReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaTaskBatchReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *OtaTaskBatchReq) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *OtaTaskBatchReq) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type OtaTaskBatchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TaskUid    string `protobuf:"bytes,2,opt,name=taskUid,proto3" json:"taskUid,omitempty"`
	FirmwareID int64  `protobuf:"varint,3,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
}

func (x *OtaTaskBatchResp) Reset() {
	*x = OtaTaskBatchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskBatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskBatchResp) ProtoMessage() {}

func (x *OtaTaskBatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskBatchResp.ProtoReflect.Descriptor instead.
func (*OtaTaskBatchResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{148}
}

func (x *OtaTaskBatchResp) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OtaTaskBatchResp) GetTaskUid() string {
	if x != nil {
		return x.TaskUid
	}
	return ""
}

func (x *OtaTaskBatchResp) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

type OtaTaskDeviceProcessReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Step       int64  `protobuf:"varint,2,opt,name=step,proto3" json:"step,omitempty"`
	Module     string `protobuf:"bytes,3,opt,name=module,proto3" json:"module,omitempty"`
	Desc       string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	ProductId  string `protobuf:"bytes,5,opt,name=productId,proto3" json:"productId,omitempty"`
	DeviceName string `protobuf:"bytes,6,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *OtaTaskDeviceProcessReq) Reset() {
	*x = OtaTaskDeviceProcessReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskDeviceProcessReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskDeviceProcessReq) ProtoMessage() {}

func (x *OtaTaskDeviceProcessReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskDeviceProcessReq.ProtoReflect.Descriptor instead.
func (*OtaTaskDeviceProcessReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{149}
}

func (x *OtaTaskDeviceProcessReq) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OtaTaskDeviceProcessReq) GetStep() int64 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *OtaTaskDeviceProcessReq) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *OtaTaskDeviceProcessReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OtaTaskDeviceProcessReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *OtaTaskDeviceProcessReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type OtaTaskDeviceCancleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID int64 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *OtaTaskDeviceCancleReq) Reset() {
	*x = OtaTaskDeviceCancleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskDeviceCancleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskDeviceCancleReq) ProtoMessage() {}

func (x *OtaTaskDeviceCancleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskDeviceCancleReq.ProtoReflect.Descriptor instead.
func (*OtaTaskDeviceCancleReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{150}
}

func (x *OtaTaskDeviceCancleReq) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

type OtaPageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page int64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *OtaPageInfo) Reset() {
	*x = OtaPageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaPageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaPageInfo) ProtoMessage() {}

func (x *OtaPageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaPageInfo.ProtoReflect.Descriptor instead.
func (*OtaPageInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{151}
}

func (x *OtaPageInfo) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *OtaPageInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type OtaCommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OtaCommonResp) Reset() {
	*x = OtaCommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaCommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaCommonResp) ProtoMessage() {}

func (x *OtaCommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaCommonResp.ProtoReflect.Descriptor instead.
func (*OtaCommonResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{152}
}

type FirmwareFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size      int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	FilePath  string `protobuf:"bytes,3,opt,name=filePath,proto3" json:"filePath,omitempty"`
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	FileMd5   string `protobuf:"bytes,5,opt,name=fileMd5,proto3" json:"fileMd5,omitempty"`
}

func (x *FirmwareFile) Reset() {
	*x = FirmwareFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FirmwareFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FirmwareFile) ProtoMessage() {}

func (x *FirmwareFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FirmwareFile.ProtoReflect.Descriptor instead.
func (*FirmwareFile) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{153}
}

func (x *FirmwareFile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FirmwareFile) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FirmwareFile) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FirmwareFile) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *FirmwareFile) GetFileMd5() string {
	if x != nil {
		return x.FileMd5
	}
	return ""
}

type OtaFirmwareCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductID    string `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`       //产品id
	FirmwareName string `protobuf:"bytes,3,opt,name=firmwareName,proto3" json:"firmwareName,omitempty"` //固件升级包名称
	// *
	// 当前OTA升级包的版本号，仅支持英文字母、数字、半角句号（.）、短划线（-）和下划线（_）。长度限制为1~64个字符。
	DestVersion string `protobuf:"bytes,4,opt,name=destVersion,proto3" json:"destVersion,omitempty"` //版本号
	// *
	// OTA升级包签名方法。取值：
	// MD5（默认）：MD5签名。
	// SHA256：SHA256签名。
	SignMethod   string `protobuf:"bytes,6,opt,name=signMethod,proto3" json:"signMethod,omitempty"`     //签名方法
	FirmwareDesc string `protobuf:"bytes,9,opt,name=firmwareDesc,proto3" json:"firmwareDesc,omitempty"` //文件描述
	// *
	// OTA升级包类型。可选：
	// 0：整包升级包，您上传的升级包文件包含完整的升级包，将推送整包升级包给设备进行升级。
	// 1：差分升级包，您上传的升级包文件仅包含新版本升级包与之前版本的差异部分，仅推送差异部分给设备进行升级。
	// 不传入此参数，则默认值为0。
	IsDiff        int64                   `protobuf:"varint,10,opt,name=isDiff,proto3" json:"isDiff,omitempty"` //升级包类型
	Module        string                  `protobuf:"bytes,11,opt,name=module,proto3" json:"module,omitempty"`  //模块名称
	SrcVersion    string                  `protobuf:"bytes,12,opt,name=srcVersion,proto3" json:"srcVersion,omitempty"`
	NeedToVerify  bool                    `protobuf:"varint,13,opt,name=needToVerify,proto3" json:"needToVerify,omitempty"` //是否需要验证
	FirmwareUdi   *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=firmwareUdi,proto3" json:"firmwareUdi,omitempty"`    //自定义数据
	FirmwareFiles []*FirmwareFile         `protobuf:"bytes,15,rep,name=firmwareFiles,proto3" json:"firmwareFiles,omitempty"`
}

func (x *OtaFirmwareCreateReq) Reset() {
	*x = OtaFirmwareCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareCreateReq) ProtoMessage() {}

func (x *OtaFirmwareCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareCreateReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareCreateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{154}
}

func (x *OtaFirmwareCreateReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareCreateReq) GetFirmwareName() string {
	if x != nil {
		return x.FirmwareName
	}
	return ""
}

func (x *OtaFirmwareCreateReq) GetDestVersion() string {
	if x != nil {
		return x.DestVersion
	}
	return ""
}

func (x *OtaFirmwareCreateReq) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *OtaFirmwareCreateReq) GetFirmwareDesc() string {
	if x != nil {
		return x.FirmwareDesc
	}
	return ""
}

func (x *OtaFirmwareCreateReq) GetIsDiff() int64 {
	if x != nil {
		return x.IsDiff
	}
	return 0
}

func (x *OtaFirmwareCreateReq) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *OtaFirmwareCreateReq) GetSrcVersion() string {
	if x != nil {
		return x.SrcVersion
	}
	return ""
}

func (x *OtaFirmwareCreateReq) GetNeedToVerify() bool {
	if x != nil {
		return x.NeedToVerify
	}
	return false
}

func (x *OtaFirmwareCreateReq) GetFirmwareUdi() *wrapperspb.StringValue {
	if x != nil {
		return x.FirmwareUdi
	}
	return nil
}

func (x *OtaFirmwareCreateReq) GetFirmwareFiles() []*FirmwareFile {
	if x != nil {
		return x.FirmwareFiles
	}
	return nil
}

type OtaFirmwareResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareID int64 `protobuf:"varint,1,opt,name=firmwareID,proto3" json:"firmwareID,omitempty"`
}

func (x *OtaFirmwareResp) Reset() {
	*x = OtaFirmwareResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareResp) ProtoMessage() {}

func (x *OtaFirmwareResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{155}
}

func (x *OtaFirmwareResp) GetFirmwareID() int64 {
	if x != nil {
		return x.FirmwareID
	}
	return 0
}

type OtaFirmwareUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId   int64                   `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`    //固件id
	FirmwareName string                  `protobuf:"bytes,2,opt,name=firmwareName,proto3" json:"firmwareName,omitempty"` //固件升级包名称
	FirmwareDesc string                  `protobuf:"bytes,3,opt,name=firmwareDesc,proto3" json:"firmwareDesc,omitempty"` //文件描述
	FirmwareUdi  *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=firmwareUdi,proto3" json:"firmwareUdi,omitempty"`  //推送设备端的信息
}

func (x *OtaFirmwareUpdateReq) Reset() {
	*x = OtaFirmwareUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareUpdateReq) ProtoMessage() {}

func (x *OtaFirmwareUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareUpdateReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareUpdateReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{156}
}

func (x *OtaFirmwareUpdateReq) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OtaFirmwareUpdateReq) GetFirmwareName() string {
	if x != nil {
		return x.FirmwareName
	}
	return ""
}

func (x *OtaFirmwareUpdateReq) GetFirmwareDesc() string {
	if x != nil {
		return x.FirmwareDesc
	}
	return ""
}

func (x *OtaFirmwareUpdateReq) GetFirmwareUdi() *wrapperspb.StringValue {
	if x != nil {
		return x.FirmwareUdi
	}
	return nil
}

type OtaFirmwareDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId int64 `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"` //固件id
}

func (x *OtaFirmwareDeleteReq) Reset() {
	*x = OtaFirmwareDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareDeleteReq) ProtoMessage() {}

func (x *OtaFirmwareDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareDeleteReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{157}
}

func (x *OtaFirmwareDeleteReq) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

type OtaFirmwareIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page         *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`                 //分页
	ProductID    string    `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`       //产品id
	FirmwareName string    `protobuf:"bytes,3,opt,name=firmwareName,proto3" json:"firmwareName,omitempty"` //产品名称
	ModuleName   string    `protobuf:"bytes,4,opt,name=moduleName,proto3" json:"moduleName,omitempty"`     //模块名称
}

func (x *OtaFirmwareIndexReq) Reset() {
	*x = OtaFirmwareIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareIndexReq) ProtoMessage() {}

func (x *OtaFirmwareIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareIndexReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{158}
}

func (x *OtaFirmwareIndexReq) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *OtaFirmwareIndexReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareIndexReq) GetFirmwareName() string {
	if x != nil {
		return x.FirmwareName
	}
	return ""
}

func (x *OtaFirmwareIndexReq) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

type OtaFirmwareIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*OtaFirmwareInfo `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OtaFirmwareIndexResp) Reset() {
	*x = OtaFirmwareIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareIndexResp) ProtoMessage() {}

func (x *OtaFirmwareIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareIndexResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{159}
}

func (x *OtaFirmwareIndexResp) GetList() []*OtaFirmwareInfo {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *OtaFirmwareIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OtaFirmwareInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId   int64  `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`    //固件id
	FirmwareName string `protobuf:"bytes,2,opt,name=firmwareName,proto3" json:"firmwareName,omitempty"` //固件升级包名称
	DestVersion  string `protobuf:"bytes,3,opt,name=destVersion,proto3" json:"destVersion,omitempty"`   //版本号
	ProductID    string `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`       //产品id
	ProductName  string `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`   //产品名称
	Status       int64  `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`            //状态
	CreatedTime  int64  `protobuf:"varint,7,opt,name=createdTime,proto3" json:"createdTime,omitempty"`  //添加时间
}

func (x *OtaFirmwareInfo) Reset() {
	*x = OtaFirmwareInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareInfo) ProtoMessage() {}

func (x *OtaFirmwareInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareInfo.ProtoReflect.Descriptor instead.
func (*OtaFirmwareInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{160}
}

func (x *OtaFirmwareInfo) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OtaFirmwareInfo) GetFirmwareName() string {
	if x != nil {
		return x.FirmwareName
	}
	return ""
}

func (x *OtaFirmwareInfo) GetDestVersion() string {
	if x != nil {
		return x.DestVersion
	}
	return ""
}

func (x *OtaFirmwareInfo) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OtaFirmwareInfo) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OtaFirmwareInfo) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

type OtaFirmwareReadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId int64 `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"` //固件id
}

func (x *OtaFirmwareReadReq) Reset() {
	*x = OtaFirmwareReadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareReadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareReadReq) ProtoMessage() {}

func (x *OtaFirmwareReadReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareReadReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareReadReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{161}
}

func (x *OtaFirmwareReadReq) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

type OtaFirmwareReadResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId       int64           `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`             //固件id
	FirmwareName     string          `protobuf:"bytes,2,opt,name=firmwareName,proto3" json:"firmwareName,omitempty"`          //固件升级包名称
	DestVersion      string          `protobuf:"bytes,3,opt,name=destVersion,proto3" json:"destVersion,omitempty"`            //版本号
	ProductID        string          `protobuf:"bytes,4,opt,name=productID,proto3" json:"productID,omitempty"`                //产品id
	ProductName      string          `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`            //产品名称
	Status           int64           `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`                     //状态
	CreatedTime      int64           `protobuf:"varint,7,opt,name=createdTime,proto3" json:"createdTime,omitempty"`           //添加时间
	SignMethod       string          `protobuf:"bytes,8,opt,name=signMethod,proto3" json:"signMethod,omitempty"`              //签名方法
	FirmwareDesc     string          `protobuf:"bytes,9,opt,name=firmwareDesc,proto3" json:"firmwareDesc,omitempty"`          //文件描述
	FirmwareUdi      string          `protobuf:"bytes,10,opt,name=firmwareUdi,proto3" json:"firmwareUdi,omitempty"`           //推给设备端端消息
	FirmwareFileList []*FirmwareFile `protobuf:"bytes,11,rep,name=firmwareFileList,proto3" json:"firmwareFileList,omitempty"` //文件列表
	IsDiff           int64           `protobuf:"varint,12,opt,name=isDiff,proto3" json:"isDiff,omitempty"`                    //整包or差包
	Module           string          `protobuf:"bytes,13,opt,name=module,proto3" json:"module,omitempty"`
}

func (x *OtaFirmwareReadResp) Reset() {
	*x = OtaFirmwareReadResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareReadResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareReadResp) ProtoMessage() {}

func (x *OtaFirmwareReadResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareReadResp.ProtoReflect.Descriptor instead.
func (*OtaFirmwareReadResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{162}
}

func (x *OtaFirmwareReadResp) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OtaFirmwareReadResp) GetFirmwareName() string {
	if x != nil {
		return x.FirmwareName
	}
	return ""
}

func (x *OtaFirmwareReadResp) GetDestVersion() string {
	if x != nil {
		return x.DestVersion
	}
	return ""
}

func (x *OtaFirmwareReadResp) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareReadResp) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OtaFirmwareReadResp) GetStatus() int64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OtaFirmwareReadResp) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *OtaFirmwareReadResp) GetSignMethod() string {
	if x != nil {
		return x.SignMethod
	}
	return ""
}

func (x *OtaFirmwareReadResp) GetFirmwareDesc() string {
	if x != nil {
		return x.FirmwareDesc
	}
	return ""
}

func (x *OtaFirmwareReadResp) GetFirmwareUdi() string {
	if x != nil {
		return x.FirmwareUdi
	}
	return ""
}

func (x *OtaFirmwareReadResp) GetFirmwareFileList() []*FirmwareFile {
	if x != nil {
		return x.FirmwareFileList
	}
	return nil
}

func (x *OtaFirmwareReadResp) GetIsDiff() int64 {
	if x != nil {
		return x.IsDiff
	}
	return 0
}

func (x *OtaFirmwareReadResp) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

type OtaFirmwareVerifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId       int64    `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`  //固件id
	ProductID        string   `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`     //产品id
	Tags             []*Tag   `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`               //标签
	DeviceNames      []string `protobuf:"bytes,4,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"` //产品名称
	SrcVersion       []string `protobuf:"bytes,5,rep,name=srcVersion,proto3" json:"srcVersion,omitempty"`
	TimeoutInMinutes int64    `protobuf:"varint,6,opt,name=timeoutInMinutes,proto3" json:"timeoutInMinutes,omitempty"` //超时时间
	NeedConfirm      int64    `protobuf:"varint,8,opt,name=needConfirm,proto3" json:"needConfirm,omitempty"`           //是否需要自主控制
	DownloadProtocol string   `protobuf:"bytes,9,opt,name=downloadProtocol,proto3" json:"downloadProtocol,omitempty"`  //下载协议
}

func (x *OtaFirmwareVerifyReq) Reset() {
	*x = OtaFirmwareVerifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaFirmwareVerifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaFirmwareVerifyReq) ProtoMessage() {}

func (x *OtaFirmwareVerifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaFirmwareVerifyReq.ProtoReflect.Descriptor instead.
func (*OtaFirmwareVerifyReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{163}
}

func (x *OtaFirmwareVerifyReq) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OtaFirmwareVerifyReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *OtaFirmwareVerifyReq) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *OtaFirmwareVerifyReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *OtaFirmwareVerifyReq) GetSrcVersion() []string {
	if x != nil {
		return x.SrcVersion
	}
	return nil
}

func (x *OtaFirmwareVerifyReq) GetTimeoutInMinutes() int64 {
	if x != nil {
		return x.TimeoutInMinutes
	}
	return 0
}

func (x *OtaFirmwareVerifyReq) GetNeedConfirm() int64 {
	if x != nil {
		return x.NeedConfirm
	}
	return 0
}

func (x *OtaFirmwareVerifyReq) GetDownloadProtocol() string {
	if x != nil {
		return x.DownloadProtocol
	}
	return ""
}

type UpgradeJobResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId     int64  `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"`        //jobId
	UtcCreate string `protobuf:"bytes,2,opt,name=UtcCreate,proto3" json:"UtcCreate,omitempty"` //OTA升级包验证任务的创建时间，UTC格式。
}

func (x *UpgradeJobResp) Reset() {
	*x = UpgradeJobResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpgradeJobResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpgradeJobResp) ProtoMessage() {}

func (x *UpgradeJobResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpgradeJobResp.ProtoReflect.Descriptor instead.
func (*UpgradeJobResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{164}
}

func (x *UpgradeJobResp) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *UpgradeJobResp) GetUtcCreate() string {
	if x != nil {
		return x.UtcCreate
	}
	return ""
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`     //标签key
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"` //标签value
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{165}
}

func (x *Tag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Tag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type StaticUpgradeDeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName string `protobuf:"bytes,1,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	SrcVersion string `protobuf:"bytes,2,opt,name=srcVersion,proto3" json:"srcVersion,omitempty"`
	ProductId  string `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *StaticUpgradeDeviceInfo) Reset() {
	*x = StaticUpgradeDeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticUpgradeDeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticUpgradeDeviceInfo) ProtoMessage() {}

func (x *StaticUpgradeDeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticUpgradeDeviceInfo.ProtoReflect.Descriptor instead.
func (*StaticUpgradeDeviceInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{166}
}

func (x *StaticUpgradeDeviceInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *StaticUpgradeDeviceInfo) GetSrcVersion() string {
	if x != nil {
		return x.SrcVersion
	}
	return ""
}

func (x *StaticUpgradeDeviceInfo) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type StaticUpgradeJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId         int64                      `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	ProductId          string                     `protobuf:"bytes,2,opt,name=productId,proto3" json:"productId,omitempty"`
	Tag                *Tag                       `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	TargetSelection    int64                      `protobuf:"varint,4,opt,name=targetSelection,proto3" json:"targetSelection,omitempty"`
	ScheduleTime       int64                      `protobuf:"varint,5,opt,name=scheduleTime,proto3" json:"scheduleTime,omitempty"`
	RetryInterval      int64                      `protobuf:"varint,6,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`
	RetryCount         int64                      `protobuf:"varint,7,opt,name=retryCount,proto3" json:"retryCount,omitempty"`
	TimeoutInMinutes   int64                      `protobuf:"varint,8,opt,name=timeoutInMinutes,proto3" json:"timeoutInMinutes,omitempty"`
	MaximumPerMinute   int64                      `protobuf:"varint,9,opt,name=maximumPerMinute,proto3" json:"maximumPerMinute,omitempty"`
	GrayPercent        int64                      `protobuf:"varint,10,opt,name=grayPercent,proto3" json:"grayPercent,omitempty"`
	ScheduleFinishTime int64                      `protobuf:"varint,11,opt,name=scheduleFinishTime,proto3" json:"scheduleFinishTime,omitempty"`
	OverwriteMode      int64                      `protobuf:"varint,12,opt,name=overwriteMode,proto3" json:"overwriteMode,omitempty"`
	NeedPush           int64                      `protobuf:"varint,13,opt,name=needPush,proto3" json:"needPush,omitempty"`
	NeedConfirm        int64                      `protobuf:"varint,14,opt,name=needConfirm,proto3" json:"needConfirm,omitempty"`
	GroupId            int64                      `protobuf:"varint,15,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupType          string                     `protobuf:"bytes,16,opt,name=groupType,proto3" json:"groupType,omitempty"`
	DownloadProtocol   string                     `protobuf:"bytes,17,opt,name=downloadProtocol,proto3" json:"downloadProtocol,omitempty"`
	MultiModuleMode    string                     `protobuf:"bytes,18,opt,name=multiModuleMode,proto3" json:"multiModuleMode,omitempty"`
	DeviceInfo         []*StaticUpgradeDeviceInfo `protobuf:"bytes,19,rep,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
}

func (x *StaticUpgradeJobReq) Reset() {
	*x = StaticUpgradeJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticUpgradeJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticUpgradeJobReq) ProtoMessage() {}

func (x *StaticUpgradeJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticUpgradeJobReq.ProtoReflect.Descriptor instead.
func (*StaticUpgradeJobReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{167}
}

func (x *StaticUpgradeJobReq) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *StaticUpgradeJobReq) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *StaticUpgradeJobReq) GetTargetSelection() int64 {
	if x != nil {
		return x.TargetSelection
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetScheduleTime() int64 {
	if x != nil {
		return x.ScheduleTime
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetRetryInterval() int64 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetTimeoutInMinutes() int64 {
	if x != nil {
		return x.TimeoutInMinutes
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetMaximumPerMinute() int64 {
	if x != nil {
		return x.MaximumPerMinute
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetGrayPercent() int64 {
	if x != nil {
		return x.GrayPercent
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetScheduleFinishTime() int64 {
	if x != nil {
		return x.ScheduleFinishTime
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetOverwriteMode() int64 {
	if x != nil {
		return x.OverwriteMode
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetNeedPush() int64 {
	if x != nil {
		return x.NeedPush
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetNeedConfirm() int64 {
	if x != nil {
		return x.NeedConfirm
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *StaticUpgradeJobReq) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *StaticUpgradeJobReq) GetDownloadProtocol() string {
	if x != nil {
		return x.DownloadProtocol
	}
	return ""
}

func (x *StaticUpgradeJobReq) GetMultiModuleMode() string {
	if x != nil {
		return x.MultiModuleMode
	}
	return ""
}

func (x *StaticUpgradeJobReq) GetDeviceInfo() []*StaticUpgradeDeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

type DynamicUpgradeJobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId       int64                      `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	ProductId        string                     `protobuf:"bytes,2,opt,name=productId,proto3" json:"productId,omitempty"`
	Tag              *Tag                       `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
	SrcVersion       []string                   `protobuf:"bytes,4,rep,name=srcVersion,proto3" json:"srcVersion,omitempty"`
	RetryInterval    int64                      `protobuf:"varint,5,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`
	RetryCount       int64                      `protobuf:"varint,6,opt,name=retryCount,proto3" json:"retryCount,omitempty"`
	TimeoutInMinutes int64                      `protobuf:"varint,7,opt,name=timeoutInMinutes,proto3" json:"timeoutInMinutes,omitempty"`
	MaximumPerMinute int64                      `protobuf:"varint,8,opt,name=maximumPerMinute,proto3" json:"maximumPerMinute,omitempty"`
	OverwriteMode    int64                      `protobuf:"varint,9,opt,name=overwriteMode,proto3" json:"overwriteMode,omitempty"`
	DynamicMode      int64                      `protobuf:"varint,10,opt,name=dynamicMode,proto3" json:"dynamicMode,omitempty"`
	NeedPush         int64                      `protobuf:"varint,11,opt,name=needPush,proto3" json:"needPush,omitempty"`
	NeedConfirm      int64                      `protobuf:"varint,12,opt,name=needConfirm,proto3" json:"needConfirm,omitempty"`
	GroupId          int64                      `protobuf:"varint,13,opt,name=groupId,proto3" json:"groupId,omitempty"`
	GroupType        string                     `protobuf:"bytes,14,opt,name=groupType,proto3" json:"groupType,omitempty"`
	DownloadProtocol string                     `protobuf:"bytes,15,opt,name=downloadProtocol,proto3" json:"downloadProtocol,omitempty"`
	MultiModuleMode  string                     `protobuf:"bytes,16,opt,name=multiModuleMode,proto3" json:"multiModuleMode,omitempty"`
	TargetSelection  int64                      `protobuf:"varint,17,opt,name=targetSelection,proto3" json:"targetSelection,omitempty"`
	DeviceInfo       []*StaticUpgradeDeviceInfo `protobuf:"bytes,18,rep,name=deviceInfo,proto3" json:"deviceInfo,omitempty"`
}

func (x *DynamicUpgradeJobReq) Reset() {
	*x = DynamicUpgradeJobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicUpgradeJobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicUpgradeJobReq) ProtoMessage() {}

func (x *DynamicUpgradeJobReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicUpgradeJobReq.ProtoReflect.Descriptor instead.
func (*DynamicUpgradeJobReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{168}
}

func (x *DynamicUpgradeJobReq) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *DynamicUpgradeJobReq) GetTag() *Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *DynamicUpgradeJobReq) GetSrcVersion() []string {
	if x != nil {
		return x.SrcVersion
	}
	return nil
}

func (x *DynamicUpgradeJobReq) GetRetryInterval() int64 {
	if x != nil {
		return x.RetryInterval
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetRetryCount() int64 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetTimeoutInMinutes() int64 {
	if x != nil {
		return x.TimeoutInMinutes
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetMaximumPerMinute() int64 {
	if x != nil {
		return x.MaximumPerMinute
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetOverwriteMode() int64 {
	if x != nil {
		return x.OverwriteMode
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetDynamicMode() int64 {
	if x != nil {
		return x.DynamicMode
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetNeedPush() int64 {
	if x != nil {
		return x.NeedPush
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetNeedConfirm() int64 {
	if x != nil {
		return x.NeedConfirm
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetGroupId() int64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetGroupType() string {
	if x != nil {
		return x.GroupType
	}
	return ""
}

func (x *DynamicUpgradeJobReq) GetDownloadProtocol() string {
	if x != nil {
		return x.DownloadProtocol
	}
	return ""
}

func (x *DynamicUpgradeJobReq) GetMultiModuleMode() string {
	if x != nil {
		return x.MultiModuleMode
	}
	return ""
}

func (x *DynamicUpgradeJobReq) GetTargetSelection() int64 {
	if x != nil {
		return x.TargetSelection
	}
	return 0
}

func (x *DynamicUpgradeJobReq) GetDeviceInfo() []*StaticUpgradeDeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

type OtaJobByFirmwareIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo   *PageInfo `protobuf:"bytes,1,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
	FirmwareId int64     `protobuf:"varint,2,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
}

func (x *OtaJobByFirmwareIndexReq) Reset() {
	*x = OtaJobByFirmwareIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaJobByFirmwareIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaJobByFirmwareIndexReq) ProtoMessage() {}

func (x *OtaJobByFirmwareIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaJobByFirmwareIndexReq.ProtoReflect.Descriptor instead.
func (*OtaJobByFirmwareIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{169}
}

func (x *OtaJobByFirmwareIndexReq) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *OtaJobByFirmwareIndexReq) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

type OtaJobInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId      int64  `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	JobId           int64  `protobuf:"varint,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	JobStatus       string `protobuf:"bytes,3,opt,name=jobStatus,proto3" json:"jobStatus,omitempty"`
	JobType         string `protobuf:"bytes,4,opt,name=jobType,proto3" json:"jobType,omitempty"`
	ProductId       int64  `protobuf:"varint,5,opt,name=productId,proto3" json:"productId,omitempty"`
	UpgradeType     string `protobuf:"bytes,6,opt,name=upgradeType,proto3" json:"upgradeType,omitempty"`
	TagList         []*Tag `protobuf:"bytes,7,rep,name=tagList,proto3" json:"tagList,omitempty"`
	TargetSelection string `protobuf:"bytes,8,opt,name=targetSelection,proto3" json:"targetSelection,omitempty"`
	UtcCreate       string `protobuf:"bytes,9,opt,name=utcCreate,proto3" json:"utcCreate,omitempty"`
	UtcEndTime      string `protobuf:"bytes,10,opt,name=utcEndTime,proto3" json:"utcEndTime,omitempty"`
	UtcModified     string `protobuf:"bytes,11,opt,name=utcModified,proto3" json:"utcModified,omitempty"`
	UtcStartTime    string `protobuf:"bytes,12,opt,name=utcStartTime,proto3" json:"utcStartTime,omitempty"`
}

func (x *OtaJobInfo) Reset() {
	*x = OtaJobInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaJobInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaJobInfo) ProtoMessage() {}

func (x *OtaJobInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaJobInfo.ProtoReflect.Descriptor instead.
func (*OtaJobInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{170}
}

func (x *OtaJobInfo) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OtaJobInfo) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *OtaJobInfo) GetJobStatus() string {
	if x != nil {
		return x.JobStatus
	}
	return ""
}

func (x *OtaJobInfo) GetJobType() string {
	if x != nil {
		return x.JobType
	}
	return ""
}

func (x *OtaJobInfo) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *OtaJobInfo) GetUpgradeType() string {
	if x != nil {
		return x.UpgradeType
	}
	return ""
}

func (x *OtaJobInfo) GetTagList() []*Tag {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *OtaJobInfo) GetTargetSelection() string {
	if x != nil {
		return x.TargetSelection
	}
	return ""
}

func (x *OtaJobInfo) GetUtcCreate() string {
	if x != nil {
		return x.UtcCreate
	}
	return ""
}

func (x *OtaJobInfo) GetUtcEndTime() string {
	if x != nil {
		return x.UtcEndTime
	}
	return ""
}

func (x *OtaJobInfo) GetUtcModified() string {
	if x != nil {
		return x.UtcModified
	}
	return ""
}

func (x *OtaJobInfo) GetUtcStartTime() string {
	if x != nil {
		return x.UtcStartTime
	}
	return ""
}

type OtaJobInfoIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtaJobInfo []*OtaJobInfo `protobuf:"bytes,1,rep,name=otaJobInfo,proto3" json:"otaJobInfo,omitempty"`
	Total      int64         `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OtaJobInfoIndexResp) Reset() {
	*x = OtaJobInfoIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaJobInfoIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaJobInfoIndexResp) ProtoMessage() {}

func (x *OtaJobInfoIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaJobInfoIndexResp.ProtoReflect.Descriptor instead.
func (*OtaJobInfoIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{171}
}

func (x *OtaJobInfoIndexResp) GetOtaJobInfo() []*OtaJobInfo {
	if x != nil {
		return x.OtaJobInfo
	}
	return nil
}

func (x *OtaJobInfoIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OtaJobByDeviceIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo   *PageInfo `protobuf:"bytes,1,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
	FirmwareId int64     `protobuf:"varint,2,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	ProductId  string    `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
	DeviceName string    `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *OtaJobByDeviceIndexReq) Reset() {
	*x = OtaJobByDeviceIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaJobByDeviceIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaJobByDeviceIndexReq) ProtoMessage() {}

func (x *OtaJobByDeviceIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaJobByDeviceIndexReq.ProtoReflect.Descriptor instead.
func (*OtaJobByDeviceIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{172}
}

func (x *OtaJobByDeviceIndexReq) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *OtaJobByDeviceIndexReq) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OtaJobByDeviceIndexReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *OtaJobByDeviceIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type JobReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId int64 `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
}

func (x *JobReq) Reset() {
	*x = JobReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobReq) ProtoMessage() {}

func (x *JobReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobReq.ProtoReflect.Descriptor instead.
func (*JobReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{173}
}

func (x *JobReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type OTATaskByJobIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo   *PageInfo `protobuf:"bytes,1,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
	JobId      int64     `protobuf:"varint,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	TaskStatus int64     `protobuf:"varint,3,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`
	DeviceName []string  `protobuf:"bytes,4,rep,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *OTATaskByJobIndexReq) Reset() {
	*x = OTATaskByJobIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTATaskByJobIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTATaskByJobIndexReq) ProtoMessage() {}

func (x *OTATaskByJobIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTATaskByJobIndexReq.ProtoReflect.Descriptor instead.
func (*OTATaskByJobIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{174}
}

func (x *OTATaskByJobIndexReq) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *OTATaskByJobIndexReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *OTATaskByJobIndexReq) GetTaskStatus() int64 {
	if x != nil {
		return x.TaskStatus
	}
	return 0
}

func (x *OTATaskByJobIndexReq) GetDeviceName() []string {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

type OtaUpTaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId  int64  `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	JobId       int64  `protobuf:"varint,2,opt,name=jobId,proto3" json:"jobId,omitempty"`
	TaskId      int64  `protobuf:"varint,3,opt,name=taskId,proto3" json:"taskId,omitempty"`
	ProductId   string `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`
	ProductName string `protobuf:"bytes,5,opt,name=productName,proto3" json:"productName,omitempty"`
	Progress    string `protobuf:"bytes,6,opt,name=progress,proto3" json:"progress,omitempty"`
	SrcVersion  string `protobuf:"bytes,7,opt,name=srcVersion,proto3" json:"srcVersion,omitempty"`
	DestVersion string `protobuf:"bytes,8,opt,name=destVersion,proto3" json:"destVersion,omitempty"`
	DeviceName  string `protobuf:"bytes,9,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	TaskDesc    string `protobuf:"bytes,10,opt,name=taskDesc,proto3" json:"taskDesc,omitempty"`
	TaskStatus  string `protobuf:"bytes,11,opt,name=taskStatus,proto3" json:"taskStatus,omitempty"`
	Timeout     string `protobuf:"bytes,12,opt,name=timeout,proto3" json:"timeout,omitempty"`
	UtcCreate   string `protobuf:"bytes,13,opt,name=utcCreate,proto3" json:"utcCreate,omitempty"`
	UtcModified string `protobuf:"bytes,14,opt,name=utcModified,proto3" json:"utcModified,omitempty"`
}

func (x *OtaUpTaskInfo) Reset() {
	*x = OtaUpTaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaUpTaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaUpTaskInfo) ProtoMessage() {}

func (x *OtaUpTaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaUpTaskInfo.ProtoReflect.Descriptor instead.
func (*OtaUpTaskInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{175}
}

func (x *OtaUpTaskInfo) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OtaUpTaskInfo) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *OtaUpTaskInfo) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *OtaUpTaskInfo) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *OtaUpTaskInfo) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *OtaUpTaskInfo) GetProgress() string {
	if x != nil {
		return x.Progress
	}
	return ""
}

func (x *OtaUpTaskInfo) GetSrcVersion() string {
	if x != nil {
		return x.SrcVersion
	}
	return ""
}

func (x *OtaUpTaskInfo) GetDestVersion() string {
	if x != nil {
		return x.DestVersion
	}
	return ""
}

func (x *OtaUpTaskInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *OtaUpTaskInfo) GetTaskDesc() string {
	if x != nil {
		return x.TaskDesc
	}
	return ""
}

func (x *OtaUpTaskInfo) GetTaskStatus() string {
	if x != nil {
		return x.TaskStatus
	}
	return ""
}

func (x *OtaUpTaskInfo) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *OtaUpTaskInfo) GetUtcCreate() string {
	if x != nil {
		return x.UtcCreate
	}
	return ""
}

func (x *OtaUpTaskInfo) GetUtcModified() string {
	if x != nil {
		return x.UtcModified
	}
	return ""
}

type OtaTaskByJobIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtaUpTaskInfo []*OtaUpTaskInfo `protobuf:"bytes,1,rep,name=otaUpTaskInfo,proto3" json:"otaUpTaskInfo,omitempty"`
	Total         int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OtaTaskByJobIndexResp) Reset() {
	*x = OtaTaskByJobIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaTaskByJobIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaTaskByJobIndexResp) ProtoMessage() {}

func (x *OtaTaskByJobIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaTaskByJobIndexResp.ProtoReflect.Descriptor instead.
func (*OtaTaskByJobIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{176}
}

func (x *OtaTaskByJobIndexResp) GetOtaUpTaskInfo() []*OtaUpTaskInfo {
	if x != nil {
		return x.OtaUpTaskInfo
	}
	return nil
}

func (x *OtaTaskByJobIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OTATaskByJobCancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId                 int64 `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	CancelScheduledTask   int64 `protobuf:"varint,2,opt,name=cancelScheduledTask,proto3" json:"cancelScheduledTask,omitempty"`
	CancelQueuedTask      int64 `protobuf:"varint,3,opt,name=cancelQueuedTask,proto3" json:"cancelQueuedTask,omitempty"`
	CancelInProgressTask  int64 `protobuf:"varint,4,opt,name=cancelInProgressTask,proto3" json:"cancelInProgressTask,omitempty"`
	CancelNotifiedTask    int64 `protobuf:"varint,5,opt,name=cancelNotifiedTask,proto3" json:"cancelNotifiedTask,omitempty"`
	CancelUnconfirmedTask int64 `protobuf:"varint,6,opt,name=cancelUnconfirmedTask,proto3" json:"cancelUnconfirmedTask,omitempty"`
}

func (x *OTATaskByJobCancelReq) Reset() {
	*x = OTATaskByJobCancelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTATaskByJobCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTATaskByJobCancelReq) ProtoMessage() {}

func (x *OTATaskByJobCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTATaskByJobCancelReq.ProtoReflect.Descriptor instead.
func (*OTATaskByJobCancelReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{177}
}

func (x *OTATaskByJobCancelReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *OTATaskByJobCancelReq) GetCancelScheduledTask() int64 {
	if x != nil {
		return x.CancelScheduledTask
	}
	return 0
}

func (x *OTATaskByJobCancelReq) GetCancelQueuedTask() int64 {
	if x != nil {
		return x.CancelQueuedTask
	}
	return 0
}

func (x *OTATaskByJobCancelReq) GetCancelInProgressTask() int64 {
	if x != nil {
		return x.CancelInProgressTask
	}
	return 0
}

func (x *OTATaskByJobCancelReq) GetCancelNotifiedTask() int64 {
	if x != nil {
		return x.CancelNotifiedTask
	}
	return 0
}

func (x *OTATaskByJobCancelReq) GetCancelUnconfirmedTask() int64 {
	if x != nil {
		return x.CancelUnconfirmedTask
	}
	return 0
}

type OTATaskByDeviceCancelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId  string   `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId,omitempty"`
	FirmwareId int64    `protobuf:"varint,2,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`
	DeviceName []string `protobuf:"bytes,3,rep,name=deviceName,proto3" json:"deviceName,omitempty"`
	JobId      int64    `protobuf:"varint,4,opt,name=jobId,proto3" json:"jobId,omitempty"`
}

func (x *OTATaskByDeviceCancelReq) Reset() {
	*x = OTATaskByDeviceCancelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTATaskByDeviceCancelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTATaskByDeviceCancelReq) ProtoMessage() {}

func (x *OTATaskByDeviceCancelReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTATaskByDeviceCancelReq.ProtoReflect.Descriptor instead.
func (*OTATaskByDeviceCancelReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{178}
}

func (x *OTATaskByDeviceCancelReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *OTATaskByDeviceCancelReq) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *OTATaskByDeviceCancelReq) GetDeviceName() []string {
	if x != nil {
		return x.DeviceName
	}
	return nil
}

func (x *OTATaskByDeviceCancelReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

type OTATaskByDeviceNameReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductId  string `protobuf:"bytes,1,opt,name=productId,proto3" json:"productId,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ModuleName string `protobuf:"bytes,3,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
}

func (x *OTATaskByDeviceNameReq) Reset() {
	*x = OTATaskByDeviceNameReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTATaskByDeviceNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTATaskByDeviceNameReq) ProtoMessage() {}

func (x *OTATaskByDeviceNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTATaskByDeviceNameReq.ProtoReflect.Descriptor instead.
func (*OTATaskByDeviceNameReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{179}
}

func (x *OTATaskByDeviceNameReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *OTATaskByDeviceNameReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *OTATaskByDeviceNameReq) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

type OTATaskConfirmReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskId []int64 `protobuf:"varint,1,rep,packed,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *OTATaskConfirmReq) Reset() {
	*x = OTATaskConfirmReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTATaskConfirmReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTATaskConfirmReq) ProtoMessage() {}

func (x *OTATaskConfirmReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTATaskConfirmReq.ProtoReflect.Descriptor instead.
func (*OTATaskConfirmReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{180}
}

func (x *OTATaskConfirmReq) GetTaskId() []int64 {
	if x != nil {
		return x.TaskId
	}
	return nil
}

type OTAUnfinishedTaskByDeviceIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName     string   `protobuf:"bytes,1,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	TaskStatusList []string `protobuf:"bytes,2,rep,name=taskStatusList,proto3" json:"taskStatusList,omitempty"`
	ProductId      string   `protobuf:"bytes,3,opt,name=productId,proto3" json:"productId,omitempty"`
	DeviceName     string   `protobuf:"bytes,4,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *OTAUnfinishedTaskByDeviceIndexReq) Reset() {
	*x = OTAUnfinishedTaskByDeviceIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTAUnfinishedTaskByDeviceIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAUnfinishedTaskByDeviceIndexReq) ProtoMessage() {}

func (x *OTAUnfinishedTaskByDeviceIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAUnfinishedTaskByDeviceIndexReq.ProtoReflect.Descriptor instead.
func (*OTAUnfinishedTaskByDeviceIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{181}
}

func (x *OTAUnfinishedTaskByDeviceIndexReq) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *OTAUnfinishedTaskByDeviceIndexReq) GetTaskStatusList() []string {
	if x != nil {
		return x.TaskStatusList
	}
	return nil
}

func (x *OTAUnfinishedTaskByDeviceIndexReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *OTAUnfinishedTaskByDeviceIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type OTAUnfinishedTaskByDeviceIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtaUpTaskInfoList []*OtaUpTaskInfo `protobuf:"bytes,1,rep,name=otaUpTaskInfoList,proto3" json:"otaUpTaskInfoList,omitempty"`
}

func (x *OTAUnfinishedTaskByDeviceIndexResp) Reset() {
	*x = OTAUnfinishedTaskByDeviceIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTAUnfinishedTaskByDeviceIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAUnfinishedTaskByDeviceIndexResp) ProtoMessage() {}

func (x *OTAUnfinishedTaskByDeviceIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAUnfinishedTaskByDeviceIndexResp.ProtoReflect.Descriptor instead.
func (*OTAUnfinishedTaskByDeviceIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{182}
}

func (x *OTAUnfinishedTaskByDeviceIndexResp) GetOtaUpTaskInfoList() []*OtaUpTaskInfo {
	if x != nil {
		return x.OtaUpTaskInfoList
	}
	return nil
}

type OTATaskReUpgradeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobId  int64   `protobuf:"varint,1,opt,name=jobId,proto3" json:"jobId,omitempty"`
	TaskId []int64 `protobuf:"varint,2,rep,packed,name=taskId,proto3" json:"taskId,omitempty"`
}

func (x *OTATaskReUpgradeReq) Reset() {
	*x = OTATaskReUpgradeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTATaskReUpgradeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTATaskReUpgradeReq) ProtoMessage() {}

func (x *OTATaskReUpgradeReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTATaskReUpgradeReq.ProtoReflect.Descriptor instead.
func (*OTATaskReUpgradeReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{183}
}

func (x *OTATaskReUpgradeReq) GetJobId() int64 {
	if x != nil {
		return x.JobId
	}
	return 0
}

func (x *OTATaskReUpgradeReq) GetTaskId() []int64 {
	if x != nil {
		return x.TaskId
	}
	return nil
}

type VerifyOtaFirmwareReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirmwareId       int64    `protobuf:"varint,1,opt,name=firmwareId,proto3" json:"firmwareId,omitempty"`             //固件id
	ProductID        string   `protobuf:"bytes,2,opt,name=productID,proto3" json:"productID,omitempty"`                //产品id
	Tags             []*Tag   `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`                          //标签
	DeviceNames      []string `protobuf:"bytes,4,rep,name=deviceNames,proto3" json:"deviceNames,omitempty"`            //产品名称
	TimeoutInMinutes int64    `protobuf:"varint,5,opt,name=timeoutInMinutes,proto3" json:"timeoutInMinutes,omitempty"` //超时时间
	NeedPush         int64    `protobuf:"varint,6,opt,name=needPush,proto3" json:"needPush,omitempty"`                 //是否需要主动推送
	NeedConfirm      int64    `protobuf:"varint,7,opt,name=needConfirm,proto3" json:"needConfirm,omitempty"`           //是否需要自主控制
	DownloadProtocol string   `protobuf:"bytes,8,opt,name=downloadProtocol,proto3" json:"downloadProtocol,omitempty"`  //下载协议
}

func (x *VerifyOtaFirmwareReq) Reset() {
	*x = VerifyOtaFirmwareReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyOtaFirmwareReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyOtaFirmwareReq) ProtoMessage() {}

func (x *VerifyOtaFirmwareReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyOtaFirmwareReq.ProtoReflect.Descriptor instead.
func (*VerifyOtaFirmwareReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{184}
}

func (x *VerifyOtaFirmwareReq) GetFirmwareId() int64 {
	if x != nil {
		return x.FirmwareId
	}
	return 0
}

func (x *VerifyOtaFirmwareReq) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *VerifyOtaFirmwareReq) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *VerifyOtaFirmwareReq) GetDeviceNames() []string {
	if x != nil {
		return x.DeviceNames
	}
	return nil
}

func (x *VerifyOtaFirmwareReq) GetTimeoutInMinutes() int64 {
	if x != nil {
		return x.TimeoutInMinutes
	}
	return 0
}

func (x *VerifyOtaFirmwareReq) GetNeedPush() int64 {
	if x != nil {
		return x.NeedPush
	}
	return 0
}

func (x *VerifyOtaFirmwareReq) GetNeedConfirm() int64 {
	if x != nil {
		return x.NeedConfirm
	}
	return 0
}

func (x *VerifyOtaFirmwareReq) GetDownloadProtocol() string {
	if x != nil {
		return x.DownloadProtocol
	}
	return ""
}

type OTAModuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName string `protobuf:"bytes,1,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	ProductId  string `protobuf:"bytes,2,opt,name=productId,proto3" json:"productId,omitempty"`
	AliasName  string `protobuf:"bytes,3,opt,name=aliasName,proto3" json:"aliasName,omitempty"`
	Desc       string `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *OTAModuleReq) Reset() {
	*x = OTAModuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTAModuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAModuleReq) ProtoMessage() {}

func (x *OTAModuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAModuleReq.ProtoReflect.Descriptor instead.
func (*OTAModuleReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{185}
}

func (x *OTAModuleReq) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *OTAModuleReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *OTAModuleReq) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *OTAModuleReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type OTAModuleDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleName string `protobuf:"bytes,1,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	ProductId  string `protobuf:"bytes,2,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *OTAModuleDeleteReq) Reset() {
	*x = OTAModuleDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTAModuleDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAModuleDeleteReq) ProtoMessage() {}

func (x *OTAModuleDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAModuleDeleteReq.ProtoReflect.Descriptor instead.
func (*OTAModuleDeleteReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{186}
}

func (x *OTAModuleDeleteReq) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *OTAModuleDeleteReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type OTAModuleIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtaModuleInfoList []*OtaModuleInfo `protobuf:"bytes,1,rep,name=otaModuleInfoList,proto3" json:"otaModuleInfoList,omitempty"`
	Total             int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OTAModuleIndexResp) Reset() {
	*x = OTAModuleIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTAModuleIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAModuleIndexResp) ProtoMessage() {}

func (x *OTAModuleIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAModuleIndexResp.ProtoReflect.Descriptor instead.
func (*OTAModuleIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{187}
}

func (x *OTAModuleIndexResp) GetOtaModuleInfoList() []*OtaModuleInfo {
	if x != nil {
		return x.OtaModuleInfoList
	}
	return nil
}

func (x *OTAModuleIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OtaModuleInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AliasName   string `protobuf:"bytes,1,opt,name=aliasName,proto3" json:"aliasName,omitempty"`
	Desc        string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	GmtCreate   string `protobuf:"bytes,3,opt,name=gmtCreate,proto3" json:"gmtCreate,omitempty"`
	GmtModified string `protobuf:"bytes,4,opt,name=gmtModified,proto3" json:"gmtModified,omitempty"`
	ModuleName  string `protobuf:"bytes,5,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	ProductId   string `protobuf:"bytes,6,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *OtaModuleInfo) Reset() {
	*x = OtaModuleInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtaModuleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtaModuleInfo) ProtoMessage() {}

func (x *OtaModuleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtaModuleInfo.ProtoReflect.Descriptor instead.
func (*OtaModuleInfo) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{188}
}

func (x *OtaModuleInfo) GetAliasName() string {
	if x != nil {
		return x.AliasName
	}
	return ""
}

func (x *OtaModuleInfo) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *OtaModuleInfo) GetGmtCreate() string {
	if x != nil {
		return x.GmtCreate
	}
	return ""
}

func (x *OtaModuleInfo) GetGmtModified() string {
	if x != nil {
		return x.GmtModified
	}
	return ""
}

func (x *OtaModuleInfo) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *OtaModuleInfo) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type OTAModuleIndexReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageInfo   *PageInfo `protobuf:"bytes,1,opt,name=pageInfo,proto3" json:"pageInfo,omitempty"`
	ProductId  string    `protobuf:"bytes,2,opt,name=productId,proto3" json:"productId,omitempty"`
	DeviceName string    `protobuf:"bytes,3,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
}

func (x *OTAModuleIndexReq) Reset() {
	*x = OTAModuleIndexReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTAModuleIndexReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAModuleIndexReq) ProtoMessage() {}

func (x *OTAModuleIndexReq) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAModuleIndexReq.ProtoReflect.Descriptor instead.
func (*OTAModuleIndexReq) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{189}
}

func (x *OTAModuleIndexReq) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

func (x *OTAModuleIndexReq) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

func (x *OTAModuleIndexReq) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type OTAModuleDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceName    string `protobuf:"bytes,1,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	ModuleName    string `protobuf:"bytes,2,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	ModuleVersion string `protobuf:"bytes,3,opt,name=moduleVersion,proto3" json:"moduleVersion,omitempty"`
	ProductId     string `protobuf:"bytes,4,opt,name=productId,proto3" json:"productId,omitempty"`
}

func (x *OTAModuleDetail) Reset() {
	*x = OTAModuleDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTAModuleDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAModuleDetail) ProtoMessage() {}

func (x *OTAModuleDetail) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAModuleDetail.ProtoReflect.Descriptor instead.
func (*OTAModuleDetail) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{190}
}

func (x *OTAModuleDetail) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

func (x *OTAModuleDetail) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *OTAModuleDetail) GetModuleVersion() string {
	if x != nil {
		return x.ModuleVersion
	}
	return ""
}

func (x *OTAModuleDetail) GetProductId() string {
	if x != nil {
		return x.ProductId
	}
	return ""
}

type OTAModuleVersionsIndexResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtaModuleDetailList []*OTAModuleDetail `protobuf:"bytes,1,rep,name=otaModuleDetailList,proto3" json:"otaModuleDetailList,omitempty"`
	Total               int64              `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *OTAModuleVersionsIndexResp) Reset() {
	*x = OTAModuleVersionsIndexResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OTAModuleVersionsIndexResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OTAModuleVersionsIndexResp) ProtoMessage() {}

func (x *OTAModuleVersionsIndexResp) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OTAModuleVersionsIndexResp.ProtoReflect.Descriptor instead.
func (*OTAModuleVersionsIndexResp) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{191}
}

func (x *OTAModuleVersionsIndexResp) GetOtaModuleDetailList() []*OTAModuleDetail {
	if x != nil {
		return x.OtaModuleDetailList
	}
	return nil
}

func (x *OTAModuleVersionsIndexResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

type PageInfo_OrderBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 排序的字段名
	Filed string `protobuf:"bytes,1,opt,name=filed,proto3" json:"filed,omitempty"`
	// 排序方式：0 aes, 1 desc
	Sort int64 `protobuf:"varint,2,opt,name=sort,proto3" json:"sort,omitempty"`
}

func (x *PageInfo_OrderBy) Reset() {
	*x = PageInfo_OrderBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dm_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo_OrderBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo_OrderBy) ProtoMessage() {}

func (x *PageInfo_OrderBy) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dm_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo_OrderBy.ProtoReflect.Descriptor instead.
func (*PageInfo_OrderBy) Descriptor() ([]byte, []int) {
	return file_proto_dm_proto_rawDescGZIP(), []int{2, 0}
}

func (x *PageInfo_OrderBy) GetFiled() string {
	if x != nil {
		return x.Filed
	}
	return ""
}

func (x *PageInfo_OrderBy) GetSort() int64 {
	if x != nil {
		return x.Sort
	}
	return 0
}

var File_proto_dm_proto protoreflect.FileDescriptor

var file_proto_dm_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x02, 0x64, 0x6d, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x33, 0x0a,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x52, 0x06, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x33, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x0a, 0x53,
	0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x54, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x6f, 0x46, 0x61, 0x69, 0x6c, 0x12,
	0x26, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x30, 0x0a,
	0x0a, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x18, 0x0a, 0x06, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x63, 0x0a,
	0x17, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x22, 0x5d, 0x0a, 0x18, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xa5, 0x01, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x22, 0x41, 0x0a, 0x15, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x72, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x90, 0x02, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6d, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x49, 0x6d, 0x67, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2f,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22,
	0x4c, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x77, 0x69, 0x74, 0x68, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x6b, 0x0a,
	0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x59, 0x0a, 0x18, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x86, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x53,
	0x0a, 0x15, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xaf, 0x02, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x74, 0x63, 0x64, 0x4b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x74, 0x63, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x3b,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x6f, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x22,
	0xaf, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x1a, 0x39, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x36, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x0b, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x19, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xa7,
	0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x72, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x73, 0x22, 0x5d, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x55, 0x0a, 0x14,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x22, 0x70, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x22, 0x4f, 0x0a, 0x11, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x92, 0x02, 0x0a, 0x0e, 0x48, 0x75, 0x62, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x4b, 0x0a, 0x0f, 0x48, 0x75, 0x62, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x48, 0x75, 0x62, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x0a, 0x48, 0x75, 0x62, 0x4c, 0x6f, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x51, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6d, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x02, 0x0a, 0x0f, 0x53, 0x65,
	0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65,
	0x45, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x4d, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x6e,
	0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbb,
	0x02, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xc4, 0x01, 0x0a,
	0x0e, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x22, 0x4b, 0x0a, 0x0f, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e,
	0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0x60, 0x0a, 0x0a, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x6f, 0x67, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x12, 0x26, 0x0a, 0x06, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x76, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x0a, 0x0b, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xaa, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x22, 0xb3, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d,
	0x73, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x3c, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x22, 0xc1, 0x01, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xca, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x73, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x22, 0x4e, 0x0a, 0x1c, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x93, 0x01, 0x0a, 0x11, 0x4f, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5e, 0x0a, 0x12, 0x4f, 0x74, 0x61, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x22, 0x7f, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x56, 0x0a, 0x14, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x22, 0x5a, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x36, 0x0a,
	0x16, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x75, 0x73,
	0x68, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x47,
	0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x92, 0x02,
	0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x46, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x46, 0x0a, 0x0f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x41, 0x75, 0x74, 0x68, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x33, 0x0a,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x73, 0x22, 0x41, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x2f,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42,
	0x69, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x91, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2c, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x73, 0x75, 0x62, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x52, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9b, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xdd, 0x02, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x37, 0x0a, 0x09,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x4d, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xd9, 0x01, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x57, 0x0a, 0x17, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x72, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x13, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x50, 0x0a, 0x14, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x59, 0x0a, 0x19,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xb5, 0x08, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6d, 0x65, 0x69, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6d, 0x65,
	0x69, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x61, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x66, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x32,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x69, 0x63, 0x63, 0x69, 0x64, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xca, 0x05, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x3a, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64,
	0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6d, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x69, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6d, 0x67, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x34, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x7a, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x22, 0xf5, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x14, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x53, 0x0a, 0x13,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x4a, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a,
	0x11, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x5c, 0x0a, 0x18, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72, 0x65, 0x52, 0x07, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x22, 0xae,
	0x04, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65,
	0x61, 0x49, 0x44, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x72,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x73,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x4f, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x94, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x41, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xa2, 0x01,
	0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x57, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc4, 0x03, 0x0a, 0x10,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65,
	0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x50, 0x65, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x73, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x69, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x69, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x66,
	0x66, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x61, 0x66,
	0x66, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x43, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x66, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x43, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xb3, 0x01, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x59, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe5, 0x03,
	0x0a, 0x11, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x43, 0x61, 0x6e,
	0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x11, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x53, 0x63, 0x65, 0x6e, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x69, 0x73, 0x53, 0x68, 0x61, 0x72, 0x65, 0x41, 0x75, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x12,
	0x1c, 0x0a, 0x09, 0x69, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x69, 0x73, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3c, 0x0a,
	0x0a, 0x61, 0x66, 0x66, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x61, 0x66, 0x66, 0x6f, 0x72, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x4b, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x73, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74,
	0x73, 0x6c, 0x22, 0x37, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x2c, 0x0a, 0x18, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x73, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x73, 0x6c, 0x22, 0x6a, 0x0a, 0x0e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12,
	0x34, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x77, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x77, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2b,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x72, 0x65, 0x61, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x61, 0x72,
	0x65, 0x61, 0x49, 0x44, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x73, 0x22, 0x8f, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x79, 0x0a, 0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x22, 0xe5,
	0x02, 0x0a, 0x08, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44,
	0x69, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66,
	0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e,
	0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x22, 0x8b, 0x03, 0x0a, 0x0c, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66,
	0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74,
	0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x41, 0x0a, 0x0f, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x15, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44,
	0x22, 0x2c, 0x0a, 0x16, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x79,
	0x0a, 0x14, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x50, 0x61, 0x67,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x15, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x35,
	0x0a, 0x13, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x44, 0x22, 0xdc, 0x01, 0x0a, 0x12, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xfd, 0x01, 0x0a, 0x13, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x13, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x5d, 0x0a, 0x18, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2b, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x97, 0x03, 0x0a, 0x14, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x73, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x2d, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22,
	0x3a, 0x0a, 0x18, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x22, 0x37, 0x0a, 0x19, 0x4f,
	0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xa0, 0x02, 0x0a, 0x10, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x10, 0x4f, 0x74, 0x61, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x22, 0x8b, 0x03, 0x0a, 0x0b, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73,
	0x6b, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x70,
	0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x75, 0x74, 0x6f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x2a, 0x0a, 0x10, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x74, 0x0a,
	0x0f, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x12, 0x23, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x10, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x28, 0x0a, 0x0e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0xf1, 0x02, 0x0a,
	0x0f, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b,
	0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x55,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x75, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x75,
	0x74, 0x6f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3e,
	0x0a, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xae, 0x01, 0x0a, 0x15, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74,
	0x61, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x59, 0x0a, 0x16, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x29, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x4f,
	0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc5, 0x02, 0x0a,
	0x11, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x14, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x22, 0x91, 0x01, 0x0a,
	0x0f, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x22, 0x5c, 0x0a, 0x10, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x22, 0xa7,
	0x01, 0x0a, 0x17, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x4f, 0x74, 0x61, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x35, 0x0a, 0x0b, 0x4f, 0x74, 0x61, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x0f, 0x0a, 0x0d, 0x4f, 0x74, 0x61,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8a, 0x01, 0x0a, 0x0c, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x66, 0x69, 0x6c, 0x65, 0x4d, 0x64, 0x35, 0x22, 0xaa, 0x03, 0x0a, 0x14, 0x4f, 0x74, 0x61, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x69,
	0x66, 0x66, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66, 0x66,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72,
	0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x65, 0x65, 0x64,
	0x54, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x6e, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x3e, 0x0a, 0x0b,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x64, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x64, 0x69, 0x12, 0x36, 0x0a, 0x0d,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x0f, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x44, 0x22, 0xbe, 0x01, 0x0a, 0x14, 0x4f, 0x74, 0x61, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x55, 0x64, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x64, 0x69, 0x22, 0x36, 0x0a, 0x14, 0x4f, 0x74, 0x61, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x22, 0x99, 0x01, 0x0a, 0x13, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x14,
	0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x34, 0x0a, 0x12, 0x4f, 0x74, 0x61, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0xc9, 0x03,
	0x0a, 0x13, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x44, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x64, 0x69, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x64, 0x69, 0x12, 0x3c, 0x0a, 0x10, 0x66,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44,
	0x69, 0x66, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x69, 0x73, 0x44, 0x69, 0x66,
	0x66, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x22, 0xad, 0x02, 0x0a, 0x14, 0x4f, 0x74,
	0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x12, 0x1b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x64, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2a, 0x0a,
	0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x44, 0x0a, 0x0e, 0x55, 0x70, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x74, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x74, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22,
	0x2d, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x77,
	0x0a, 0x17, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0xdb, 0x05, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x63, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x64, 0x6d, 0x2e,
	0x54, 0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49,
	0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x69,
	0x6d, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x4d, 0x69,
	0x6e, 0x75, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x67, 0x72, 0x61, 0x79, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x79, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f,
	0x76, 0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x65, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6e, 0x65, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e,
	0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x28,
	0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64,
	0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa8, 0x05, 0x0a, 0x14, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x1e,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x64, 0x6d, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x50, 0x65, 0x72, 0x4d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x76,
	0x65, 0x72, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x28, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x64, 0x0a, 0x18, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x03, 0x0a, 0x0a, 0x4f, 0x74, 0x61, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6a,
	0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6a, 0x6f, 0x62, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6a, 0x6f, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x6f, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x64, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x07, 0x74,
	0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x75, 0x74, 0x63, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x74, 0x63, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x75, 0x74, 0x63, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x63, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x75, 0x74, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x74, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x13, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2e, 0x0a, 0x0a, 0x6f,
	0x74, 0x61, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x6f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0xa0, 0x01, 0x0a, 0x16, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x06, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a,
	0x6f, 0x62, 0x49, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x14, 0x4f, 0x54, 0x41, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x28, 0x0a,
	0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb1, 0x03,
	0x0a, 0x0d, 0x4f, 0x74, 0x61, 0x55, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x72, 0x63,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x72, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x74, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x74, 0x63, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x75, 0x74, 0x63, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x74, 0x63, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x22, 0x66, 0x0a, 0x15, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x4a, 0x6f,
	0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x37, 0x0a, 0x0d, 0x6f, 0x74,
	0x61, 0x55, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x55, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x6f, 0x74, 0x61, 0x55, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa5, 0x02, 0x0a, 0x15, 0x4f, 0x54,
	0x41, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2a, 0x0a, 0x10, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x75, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x32, 0x0a, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x49, 0x6e, 0x50,
	0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x34, 0x0a, 0x15, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x22, 0x8e, 0x01, 0x0a, 0x18, 0x4f, 0x54, 0x41, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6a, 0x6f, 0x62,
	0x49, 0x64, 0x22, 0x76, 0x0a, 0x16, 0x4f, 0x54, 0x41, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x11, 0x4f, 0x54,
	0x41, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x21, 0x4f, 0x54, 0x41, 0x55,
	0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x22, 0x4f, 0x54, 0x41, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x11, 0x6f, 0x74, 0x61,
	0x55, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x55, 0x70, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6f, 0x74, 0x61, 0x55, 0x70, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x13, 0x4f, 0x54,
	0x41, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x22,
	0xa9, 0x02, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x64, 0x6d, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x65, 0x65, 0x64, 0x50, 0x75, 0x73, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x6e, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12,
	0x2a, 0x0a, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x7e, 0x0a, 0x0c, 0x4f,
	0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x52, 0x0a, 0x12, 0x4f,
	0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22,
	0x6b, 0x0a, 0x12, 0x4f, 0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x11, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x11, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xbf, 0x01, 0x0a,
	0x0d, 0x4f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x67, 0x6d, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x6d, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x67, 0x6d, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x67, 0x6d, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x7b,
	0x0a, 0x11, 0x4f, 0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x12, 0x28, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x0f,
	0x4f, 0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x1a, 0x4f, 0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x13, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x13, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xa6,
	0x06, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12,
	0x28, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x10, 0x2e, 0x64,
	0x6d, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e,
	0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e,
	0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x2e, 0x64,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64,
	0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x6d,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x42, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x64,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x37, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0e,
	0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x46,
	0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x64, 0x6d, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x2e, 0x64,
	0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1f, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x36, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12,
	0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x32, 0xf7, 0x09, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64,
	0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e,
	0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e,
	0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09,
	0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71,
	0x1a, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16, 0x2e,
	0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e,
	0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x46, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x13, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e,
	0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1d, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x54, 0x73, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x54, 0x73, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x40, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x33,
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x1a, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x37, 0x0a,
	0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0x09, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64,
	0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64,
	0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x32, 0xfd, 0x01, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x12, 0x3a, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3a,
	0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e, 0x64,
	0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x64,
	0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x32, 0xa4, 0x02, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x34,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x43, 0x6f,
	0x64, 0x65, 0x1a, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x6d, 0x2e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0a, 0x2e, 0x64,
	0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x10,
	0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2b, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e,
	0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0x8e, 0x04, 0x0a, 0x0b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x64, 0x6d,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0a, 0x2e, 0x64, 0x6d, 0x2e,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x49, 0x44, 0x1a, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x16, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x16,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45,
	0x0a, 0x10, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x6d,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x16, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x1d, 0x2e, 0x64, 0x6d, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09,
	0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xa5, 0x02, 0x0a, 0x0c, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3a, 0x0a, 0x12, 0x52, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x64, 0x6d,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3c, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x50, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x6c, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x50, 0x75, 0x73, 0x68, 0x41, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51,
	0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x32, 0xd3, 0x04, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x36, 0x0a, 0x0b, 0x73, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12,
	0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x64, 0x6b, 0x4c, 0x6f, 0x67, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x68, 0x75, 0x62, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x48, 0x75, 0x62, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x6d, 0x2e,
	0x48, 0x75, 0x62, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x39, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x2e, 0x64,
	0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4c,
	0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45,
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3c, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64,
	0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x1d, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x4c, 0x6f, 0x67, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x71, 0x1a, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3f, 0x0a, 0x0e, 0x6f, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74,
	0x61, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x32, 0x9a, 0x04, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x64, 0x6d,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x31, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0f, 0x2e,
	0x64, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x12,
	0x2e, 0x64, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x2a, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x54,
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64,
	0x12, 0x1f, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x20, 0x2e, 0x64, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x43, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x12, 0x0f, 0x2e, 0x64, 0x6d, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x64, 0x6d,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x65, 0x6e, 0x64,
	0x4d, 0x73, 0x67, 0x12, 0x0e, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x71, 0x1a, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x32, 0xd2, 0x04, 0x0a, 0x0e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x12, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x2e,
	0x64, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x1a, 0x10, 0x2e, 0x64, 0x6d,
	0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a,
	0x12, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x12, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19,
	0x2e, 0x64, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x11, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x45, 0x0a, 0x10, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x61, 0x64, 0x12, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64,
	0x6d, 0x2e, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x15, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61,
	0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x51, 0x0a, 0x14, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74,
	0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69,
	0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x15, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x2e, 0x64,
	0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x64, 0x6d, 0x2e,
	0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x32, 0x96, 0x05, 0x0a, 0x0d, 0x4f, 0x74,
	0x61, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x4f,
	0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x64,
	0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x0d, 0x4f, 0x74, 0x61, 0x54,
	0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x2e, 0x64, 0x6d, 0x2e, 0x4f,
	0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x11, 0x2e, 0x64, 0x6d, 0x2e,
	0x4f, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a,
	0x0d, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x6c, 0x65, 0x12, 0x14,
	0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x39, 0x0a, 0x0c, 0x4f, 0x74, 0x61, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x64,
	0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4b, 0x0a, 0x12, 0x4f, 0x74,
	0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x64, 0x6d,
	0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x11, 0x4f, 0x74, 0x61, 0x54, 0x61,
	0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x18, 0x2e, 0x64,
	0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45, 0x0a,
	0x18, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x4f,
	0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x14,
	0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x46, 0x0a, 0x14, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x64,
	0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x4f,
	0x74, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x44, 0x0a, 0x13,
	0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x6c, 0x65, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x32, 0xa2, 0x04, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x44, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x61, 0x76, 0x65, 0x1a, 0x09, 0x2e, 0x64,
	0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x61,
	0x76, 0x65, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a,
	0x16, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x53, 0x61, 0x76, 0x65, 0x12, 0x3c, 0x0a,
	0x15, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x15, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x09, 0x2e,
	0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x44, 0x1a, 0x09, 0x2e,
	0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x1b, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e,
	0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x13, 0x75,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x12, 0x1a, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xe0, 0x02, 0x0a, 0x11, 0x4f, 0x54, 0x41, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a,
	0x11, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x64,
	0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x42, 0x0a, 0x11, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46,
	0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x13, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x11, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e,
	0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x45, 0x0a, 0x10, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x64,
	0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x42, 0x0a, 0x0f, 0x6f, 0x74, 0x61, 0x46, 0x69, 0x72,
	0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x4f,
	0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x32, 0xdf, 0x03, 0x0a, 0x0c, 0x4f,
	0x54, 0x41, 0x4a, 0x6f, 0x62, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x42, 0x0a, 0x12, 0x6f,
	0x74, 0x61, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4a, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x64, 0x6d,
	0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x48, 0x0a, 0x19, 0x6f, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x4a, 0x6f, 0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x64,
	0x6d, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61,
	0x64, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x1a, 0x6f, 0x74, 0x61,
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4a, 0x6f,
	0x62, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e, 0x44, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x1a, 0x12, 0x2e, 0x64, 0x6d, 0x2e, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x6f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x42,
	0x79, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c,
	0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x46, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64,
	0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4a, 0x0a, 0x13, 0x6f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x42,
	0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x2e, 0x64,
	0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74,
	0x61, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x28, 0x0a, 0x0a, 0x6f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x61, 0x64, 0x12,
	0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x64, 0x6d,
	0x2e, 0x4f, 0x74, 0x61, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2f, 0x0a, 0x16, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x54, 0x41, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x42, 0x79, 0x4a, 0x6f, 0x62, 0x12, 0x0a, 0x2e, 0x64, 0x6d, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x65,
	0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xbb, 0x03, 0x0a,
	0x14, 0x4f, 0x54, 0x41, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x6f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b,
	0x42, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x2e, 0x64, 0x6d, 0x2e,
	0x4f, 0x54, 0x41, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x74, 0x61, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x4a, 0x6f, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x3a, 0x0a, 0x12, 0x6f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x4a, 0x6f, 0x62, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x19, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x54, 0x61,
	0x73, 0x6b, 0x42, 0x79, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x15, 0x6f,
	0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x1c, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x32, 0x0a,
	0x0e, 0x6f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12,
	0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x6f, 0x0a, 0x1e, 0x6f, 0x74, 0x61, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x25, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x55, 0x6e, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x64, 0x6d, 0x2e,
	0x4f, 0x54, 0x41, 0x55, 0x6e, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x36, 0x0a, 0x10, 0x6f, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x32, 0xca, 0x02, 0x0a, 0x0f, 0x4f,
	0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x0f, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x2e,
	0x0a, 0x0f, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x10, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x34,
	0x0a, 0x0f, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x09, 0x2e, 0x64, 0x6d, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x17, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57,
	0x0a, 0x1e, 0x6f, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x15, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x64, 0x6d, 0x2e, 0x4f, 0x54, 0x41,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x42, 0x07, 0x5a, 0x05, 0x70, 0x62, 0x2f, 0x64, 0x6d,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_dm_proto_rawDescOnce sync.Once
	file_proto_dm_proto_rawDescData = file_proto_dm_proto_rawDesc
)

func file_proto_dm_proto_rawDescGZIP() []byte {
	file_proto_dm_proto_rawDescOnce.Do(func() {
		file_proto_dm_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_dm_proto_rawDescData)
	})
	return file_proto_dm_proto_rawDescData
}

var file_proto_dm_proto_msgTypes = make([]protoimpl.MessageInfo, 203)
var file_proto_dm_proto_goTypes = []interface{}{
	(*Empty)(nil),                              // 0: dm.Empty
	(*TimeRange)(nil),                          // 1: dm.TimeRange
	(*PageInfo)(nil),                           // 2: dm.PageInfo
	(*SendOption)(nil),                         // 3: dm.SendOption
	(*WithIDCode)(nil),                         // 4: dm.WithIDCode
	(*WithID)(nil),                             // 5: dm.WithID
	(*ProductInitReq)(nil),                     // 6: dm.ProductInitReq
	(*UserDeviceShareReadReq)(nil),             // 7: dm.UserDeviceShareReadReq
	(*UserDeviceShareIndexReq)(nil),            // 8: dm.UserDeviceShareIndexReq
	(*UserDeviceShareIndexResp)(nil),           // 9: dm.UserDeviceShareIndexResp
	(*UserDeviceShareInfo)(nil),                // 10: dm.UserDeviceShareInfo
	(*UserDeviceCollectSave)(nil),              // 11: dm.UserDeviceCollectSave
	(*ProductCategory)(nil),                    // 12: dm.ProductCategory
	(*ProductCategoryReadReq)(nil),             // 13: dm.ProductCategoryReadReq
	(*ProductCategoryIndexReq)(nil),            // 14: dm.ProductCategoryIndexReq
	(*ProductCategoryIndexResp)(nil),           // 15: dm.ProductCategoryIndexResp
	(*ProtocolInfoIndexReq)(nil),               // 16: dm.ProtocolInfoIndexReq
	(*ProtocolInfoIndexResp)(nil),              // 17: dm.ProtocolInfoIndexResp
	(*ProtocolInfo)(nil),                       // 18: dm.ProtocolInfo
	(*ProtocolConfigField)(nil),                // 19: dm.ProtocolConfigField
	(*ProtocolConfigInfo)(nil),                 // 20: dm.ProtocolConfigInfo
	(*ShadowIndexResp)(nil),                    // 21: dm.ShadowIndexResp
	(*ShadowIndex)(nil),                        // 22: dm.ShadowIndex
	(*PropertyGetReportSendReq)(nil),           // 23: dm.PropertyGetReportSendReq
	(*PropertyGetReportSendResp)(nil),          // 24: dm.PropertyGetReportSendResp
	(*PropertyLogIndexReq)(nil),                // 25: dm.PropertyLogIndexReq
	(*PropertyLogLatestIndexReq)(nil),          // 26: dm.PropertyLogLatestIndexReq
	(*PropertyLogInfo)(nil),                    // 27: dm.PropertyLogInfo
	(*PropertyLogIndexResp)(nil),               // 28: dm.PropertyLogIndexResp
	(*EventLogIndexReq)(nil),                   // 29: dm.EventLogIndexReq
	(*EventLogInfo)(nil),                       // 30: dm.EventLogInfo
	(*EventLogIndexResp)(nil),                  // 31: dm.EventLogIndexResp
	(*HubLogIndexReq)(nil),                     // 32: dm.HubLogIndexReq
	(*HubLogIndexResp)(nil),                    // 33: dm.HubLogIndexResp
	(*HubLogInfo)(nil),                         // 34: dm.HubLogInfo
	(*StatusLogIndexReq)(nil),                  // 35: dm.StatusLogIndexReq
	(*StatusLogIndexResp)(nil),                 // 36: dm.StatusLogIndexResp
	(*StatusLogInfo)(nil),                      // 37: dm.StatusLogInfo
	(*SendLogIndexReq)(nil),                    // 38: dm.SendLogIndexReq
	(*SendLogIndexResp)(nil),                   // 39: dm.SendLogIndexResp
	(*SendLogInfo)(nil),                        // 40: dm.SendLogInfo
	(*SdkLogIndexReq)(nil),                     // 41: dm.SdkLogIndexReq
	(*SdkLogIndexResp)(nil),                    // 42: dm.SdkLogIndexResp
	(*SdkLogInfo)(nil),                         // 43: dm.SdkLogInfo
	(*ActionSendReq)(nil),                      // 44: dm.ActionSendReq
	(*ActionSendResp)(nil),                     // 45: dm.ActionSendResp
	(*RespReadReq)(nil),                        // 46: dm.RespReadReq
	(*PropertyControlSendReq)(nil),             // 47: dm.PropertyControlSendReq
	(*ActionRespReq)(nil),                      // 48: dm.ActionRespReq
	(*PropertyControlSendResp)(nil),            // 49: dm.PropertyControlSendResp
	(*SendMsgReq)(nil),                         // 50: dm.SendMsgReq
	(*SendMsgResp)(nil),                        // 51: dm.SendMsgResp
	(*PropertyControlMultiSendReq)(nil),        // 52: dm.PropertyControlMultiSendReq
	(*PropertyControlSendMsg)(nil),             // 53: dm.PropertyControlSendMsg
	(*PropertyControlMultiSendResp)(nil),       // 54: dm.PropertyControlMultiSendResp
	(*OtaPromptIndexReq)(nil),                  // 55: dm.OtaPromptIndexReq
	(*OtaPromptIndexResp)(nil),                 // 56: dm.OtaPromptIndexResp
	(*ProductRemoteConfig)(nil),                // 57: dm.ProductRemoteConfig
	(*RemoteConfigCreateReq)(nil),              // 58: dm.RemoteConfigCreateReq
	(*RemoteConfigIndexReq)(nil),               // 59: dm.RemoteConfigIndexReq
	(*RemoteConfigIndexResp)(nil),              // 60: dm.RemoteConfigIndexResp
	(*RemoteConfigPushAllReq)(nil),             // 61: dm.RemoteConfigPushAllReq
	(*RemoteConfigLastReadReq)(nil),            // 62: dm.RemoteConfigLastReadReq
	(*RemoteConfigLastReadResp)(nil),           // 63: dm.RemoteConfigLastReadResp
	(*ProductCustomReadReq)(nil),               // 64: dm.ProductCustomReadReq
	(*ProductCustom)(nil),                      // 65: dm.ProductCustom
	(*CustomTopic)(nil),                        // 66: dm.CustomTopic
	(*DeviceGatewayBindDevice)(nil),            // 67: dm.DeviceGatewayBindDevice
	(*DeviceGatewaySign)(nil),                  // 68: dm.DeviceGatewaySign
	(*DeviceGatewayMultiCreateReq)(nil),        // 69: dm.DeviceGatewayMultiCreateReq
	(*DeviceGatewayIndexReq)(nil),              // 70: dm.DeviceGatewayIndexReq
	(*DeviceGatewayIndexResp)(nil),             // 71: dm.DeviceGatewayIndexResp
	(*DeviceGatewayMultiDeleteReq)(nil),        // 72: dm.DeviceGatewayMultiDeleteReq
	(*GroupInfo)(nil),                          // 73: dm.GroupInfo
	(*GroupInfoCreateReq)(nil),                 // 74: dm.GroupInfoCreateReq
	(*GroupInfoIndexReq)(nil),                  // 75: dm.GroupInfoIndexReq
	(*GroupInfoIndexResp)(nil),                 // 76: dm.GroupInfoIndexResp
	(*GroupInfoUpdateReq)(nil),                 // 77: dm.GroupInfoUpdateReq
	(*GroupDeviceMultiSaveReq)(nil),            // 78: dm.GroupDeviceMultiSaveReq
	(*GroupDeviceIndexReq)(nil),                // 79: dm.GroupDeviceIndexReq
	(*GroupDeviceIndexResp)(nil),               // 80: dm.GroupDeviceIndexResp
	(*GroupDeviceMultiDeleteReq)(nil),          // 81: dm.GroupDeviceMultiDeleteReq
	(*Point)(nil),                              // 82: dm.Point
	(*DeviceInfo)(nil),                         // 83: dm.DeviceInfo
	(*ProductInfo)(nil),                        // 84: dm.ProductInfo
	(*ProductInfoDeleteReq)(nil),               // 85: dm.ProductInfoDeleteReq
	(*ProductInfoReadReq)(nil),                 // 86: dm.ProductInfoReadReq
	(*ProductInfoIndexReq)(nil),                // 87: dm.ProductInfoIndexReq
	(*ProductInfoIndexResp)(nil),               // 88: dm.ProductInfoIndexResp
	(*DeviceInfoDeleteReq)(nil),                // 89: dm.DeviceInfoDeleteReq
	(*DeviceCore)(nil),                         // 90: dm.DeviceCore
	(*DeviceInfoReadReq)(nil),                  // 91: dm.DeviceInfoReadReq
	(*DeviceInfoMultiUpdateReq)(nil),           // 92: dm.DeviceInfoMultiUpdateReq
	(*DeviceInfoIndexReq)(nil),                 // 93: dm.DeviceInfoIndexReq
	(*DeviceInfoIndexResp)(nil),                // 94: dm.DeviceInfoIndexResp
	(*RootCheckReq)(nil),                       // 95: dm.RootCheckReq
	(*CommonSchemaUpdateReq)(nil),              // 96: dm.CommonSchemaUpdateReq
	(*CommonSchemaCreateReq)(nil),              // 97: dm.CommonSchemaCreateReq
	(*CommonSchemaIndexReq)(nil),               // 98: dm.CommonSchemaIndexReq
	(*CommonSchemaIndexResp)(nil),              // 99: dm.CommonSchemaIndexResp
	(*CommonSchemaInfo)(nil),                   // 100: dm.CommonSchemaInfo
	(*ProductSchemaUpdateReq)(nil),             // 101: dm.ProductSchemaUpdateReq
	(*ProductSchemaMultiCreateReq)(nil),        // 102: dm.ProductSchemaMultiCreateReq
	(*ProductSchemaCreateReq)(nil),             // 103: dm.ProductSchemaCreateReq
	(*ProductSchemaDeleteReq)(nil),             // 104: dm.ProductSchemaDeleteReq
	(*ProductSchemaIndexReq)(nil),              // 105: dm.ProductSchemaIndexReq
	(*ProductSchemaIndexResp)(nil),             // 106: dm.ProductSchemaIndexResp
	(*ProductSchemaInfo)(nil),                  // 107: dm.ProductSchemaInfo
	(*ProductSchemaTslImportReq)(nil),          // 108: dm.ProductSchemaTslImportReq
	(*ProductSchemaTslReadReq)(nil),            // 109: dm.ProductSchemaTslReadReq
	(*ProductSchemaTslReadResp)(nil),           // 110: dm.ProductSchemaTslReadResp
	(*DeviceCountReq)(nil),                     // 111: dm.DeviceCountReq
	(*DeviceCountResp)(nil),                    // 112: dm.DeviceCountResp
	(*DeviceCountInfo)(nil),                    // 113: dm.DeviceCountInfo
	(*DeviceInfoCountReq)(nil),                 // 114: dm.DeviceInfoCountReq
	(*DeviceTypeCountReq)(nil),                 // 115: dm.DeviceTypeCountReq
	(*DeviceInfoCount)(nil),                    // 116: dm.DeviceInfoCount
	(*DeviceTypeCountResp)(nil),                // 117: dm.DeviceTypeCountResp
	(*Firmware)(nil),                           // 118: dm.Firmware
	(*FirmwareResp)(nil),                       // 119: dm.FirmwareResp
	(*FirmwareInfo)(nil),                       // 120: dm.FirmwareInfo
	(*OtaFirmwareFile)(nil),                    // 121: dm.OtaFirmwareFile
	(*FirmwareInfoDeleteReq)(nil),              // 122: dm.FirmwareInfoDeleteReq
	(*FirmwareInfoDeleteResp)(nil),             // 123: dm.FirmwareInfoDeleteResp
	(*FirmwareInfoIndexReq)(nil),               // 124: dm.FirmwareInfoIndexReq
	(*FirmwareInfoIndexResp)(nil),              // 125: dm.FirmwareInfoIndexResp
	(*FirmwareInfoReadReq)(nil),                // 126: dm.FirmwareInfoReadReq
	(*OtaFirmwareFileReq)(nil),                 // 127: dm.OtaFirmwareFileReq
	(*OtaFirmwareFileInfo)(nil),                // 128: dm.OtaFirmwareFileInfo
	(*OtaFirmwareFileResp)(nil),                // 129: dm.OtaFirmwareFileResp
	(*OtaFirmwareFileIndexReq)(nil),            // 130: dm.OtaFirmwareFileIndexReq
	(*OtaFirmwareFileIndexResp)(nil),           // 131: dm.OtaFirmwareFileIndexResp
	(*FirmwareInfoReadResp)(nil),               // 132: dm.FirmwareInfoReadResp
	(*OtaFirmwareDeviceInfoReq)(nil),           // 133: dm.OtaFirmwareDeviceInfoReq
	(*OtaFirmwareDeviceInfoResp)(nil),          // 134: dm.OtaFirmwareDeviceInfoResp
	(*OtaTaskCreateReq)(nil),                   // 135: dm.OtaTaskCreateReq
	(*OtaTaskCreatResp)(nil),                   // 136: dm.OtaTaskCreatResp
	(*OtaTaskInfo)(nil),                        // 137: dm.OtaTaskInfo
	(*OtaTaskCancleReq)(nil),                   // 138: dm.OtaTaskCancleReq
	(*OtaTaskIndexReq)(nil),                    // 139: dm.OtaTaskIndexReq
	(*OtaTaskIndexResp)(nil),                   // 140: dm.OtaTaskIndexResp
	(*OtaTaskReadReq)(nil),                     // 141: dm.OtaTaskReadReq
	(*OtaTaskReadResp)(nil),                    // 142: dm.OtaTaskReadResp
	(*OtaTaskDeviceIndexReq)(nil),              // 143: dm.OtaTaskDeviceIndexReq
	(*OtaTaskDeviceIndexResp)(nil),             // 144: dm.OtaTaskDeviceIndexResp
	(*OtaTaskDeviceInfo)(nil),                  // 145: dm.OtaTaskDeviceInfo
	(*OtaTaskDeviceReadReq)(nil),               // 146: dm.OtaTaskDeviceReadReq
	(*OtaTaskBatchReq)(nil),                    // 147: dm.OtaTaskBatchReq
	(*OtaTaskBatchResp)(nil),                   // 148: dm.OtaTaskBatchResp
	(*OtaTaskDeviceProcessReq)(nil),            // 149: dm.OtaTaskDeviceProcessReq
	(*OtaTaskDeviceCancleReq)(nil),             // 150: dm.OtaTaskDeviceCancleReq
	(*OtaPageInfo)(nil),                        // 151: dm.OtaPageInfo
	(*OtaCommonResp)(nil),                      // 152: dm.OtaCommonResp
	(*FirmwareFile)(nil),                       // 153: dm.FirmwareFile
	(*OtaFirmwareCreateReq)(nil),               // 154: dm.OtaFirmwareCreateReq
	(*OtaFirmwareResp)(nil),                    // 155: dm.OtaFirmwareResp
	(*OtaFirmwareUpdateReq)(nil),               // 156: dm.OtaFirmwareUpdateReq
	(*OtaFirmwareDeleteReq)(nil),               // 157: dm.OtaFirmwareDeleteReq
	(*OtaFirmwareIndexReq)(nil),                // 158: dm.OtaFirmwareIndexReq
	(*OtaFirmwareIndexResp)(nil),               // 159: dm.OtaFirmwareIndexResp
	(*OtaFirmwareInfo)(nil),                    // 160: dm.OtaFirmwareInfo
	(*OtaFirmwareReadReq)(nil),                 // 161: dm.OtaFirmwareReadReq
	(*OtaFirmwareReadResp)(nil),                // 162: dm.OtaFirmwareReadResp
	(*OtaFirmwareVerifyReq)(nil),               // 163: dm.OtaFirmwareVerifyReq
	(*UpgradeJobResp)(nil),                     // 164: dm.UpgradeJobResp
	(*Tag)(nil),                                // 165: dm.Tag
	(*StaticUpgradeDeviceInfo)(nil),            // 166: dm.StaticUpgradeDeviceInfo
	(*StaticUpgradeJobReq)(nil),                // 167: dm.StaticUpgradeJobReq
	(*DynamicUpgradeJobReq)(nil),               // 168: dm.DynamicUpgradeJobReq
	(*OtaJobByFirmwareIndexReq)(nil),           // 169: dm.OtaJobByFirmwareIndexReq
	(*OtaJobInfo)(nil),                         // 170: dm.OtaJobInfo
	(*OtaJobInfoIndexResp)(nil),                // 171: dm.OtaJobInfoIndexResp
	(*OtaJobByDeviceIndexReq)(nil),             // 172: dm.OtaJobByDeviceIndexReq
	(*JobReq)(nil),                             // 173: dm.JobReq
	(*OTATaskByJobIndexReq)(nil),               // 174: dm.OTATaskByJobIndexReq
	(*OtaUpTaskInfo)(nil),                      // 175: dm.OtaUpTaskInfo
	(*OtaTaskByJobIndexResp)(nil),              // 176: dm.OtaTaskByJobIndexResp
	(*OTATaskByJobCancelReq)(nil),              // 177: dm.OTATaskByJobCancelReq
	(*OTATaskByDeviceCancelReq)(nil),           // 178: dm.OTATaskByDeviceCancelReq
	(*OTATaskByDeviceNameReq)(nil),             // 179: dm.OTATaskByDeviceNameReq
	(*OTATaskConfirmReq)(nil),                  // 180: dm.OTATaskConfirmReq
	(*OTAUnfinishedTaskByDeviceIndexReq)(nil),  // 181: dm.OTAUnfinishedTaskByDeviceIndexReq
	(*OTAUnfinishedTaskByDeviceIndexResp)(nil), // 182: dm.OTAUnfinishedTaskByDeviceIndexResp
	(*OTATaskReUpgradeReq)(nil),                // 183: dm.OTATaskReUpgradeReq
	(*VerifyOtaFirmwareReq)(nil),               // 184: dm.VerifyOtaFirmwareReq
	(*OTAModuleReq)(nil),                       // 185: dm.OTAModuleReq
	(*OTAModuleDeleteReq)(nil),                 // 186: dm.OTAModuleDeleteReq
	(*OTAModuleIndexResp)(nil),                 // 187: dm.OTAModuleIndexResp
	(*OtaModuleInfo)(nil),                      // 188: dm.OtaModuleInfo
	(*OTAModuleIndexReq)(nil),                  // 189: dm.OTAModuleIndexReq
	(*OTAModuleDetail)(nil),                    // 190: dm.OTAModuleDetail
	(*OTAModuleVersionsIndexResp)(nil),         // 191: dm.OTAModuleVersionsIndexResp
	(*PageInfo_OrderBy)(nil),                   // 192: dm.PageInfo.OrderBy
	nil,                                        // 193: dm.ProtocolConfigInfo.ConfigEntry
	nil,                                        // 194: dm.GroupInfo.TagsEntry
	nil,                                        // 195: dm.GroupInfoIndexReq.TagsEntry
	nil,                                        // 196: dm.GroupInfoUpdateReq.TagsEntry
	nil,                                        // 197: dm.DeviceInfo.TagsEntry
	nil,                                        // 198: dm.DeviceInfo.SchemaAliasEntry
	nil,                                        // 199: dm.ProductInfo.TagsEntry
	nil,                                        // 200: dm.ProductInfoIndexReq.TagsEntry
	nil,                                        // 201: dm.DeviceInfoIndexReq.TagsEntry
	nil,                                        // 202: dm.DeviceCountInfo.CountEntry
	(*wrapperspb.StringValue)(nil),             // 203: google.protobuf.StringValue
	(*wrapperspb.Int64Value)(nil),              // 204: google.protobuf.Int64Value
}
var file_proto_dm_proto_depIdxs = []int32{
	192, // 0: dm.PageInfo.orders:type_name -> dm.PageInfo.OrderBy
	90,  // 1: dm.UserDeviceShareReadReq.device:type_name -> dm.DeviceCore
	2,   // 2: dm.UserDeviceShareIndexReq.page:type_name -> dm.PageInfo
	90,  // 3: dm.UserDeviceShareIndexReq.device:type_name -> dm.DeviceCore
	10,  // 4: dm.UserDeviceShareIndexResp.list:type_name -> dm.UserDeviceShareInfo
	90,  // 5: dm.UserDeviceShareInfo.device:type_name -> dm.DeviceCore
	90,  // 6: dm.UserDeviceCollectSave.devices:type_name -> dm.DeviceCore
	203, // 7: dm.ProductCategory.desc:type_name -> google.protobuf.StringValue
	12,  // 8: dm.ProductCategory.children:type_name -> dm.ProductCategory
	2,   // 9: dm.ProductCategoryIndexReq.page:type_name -> dm.PageInfo
	12,  // 10: dm.ProductCategoryIndexResp.list:type_name -> dm.ProductCategory
	2,   // 11: dm.ProtocolInfoIndexReq.page:type_name -> dm.PageInfo
	18,  // 12: dm.ProtocolInfoIndexResp.list:type_name -> dm.ProtocolInfo
	19,  // 13: dm.ProtocolInfo.configFields:type_name -> dm.ProtocolConfigField
	20,  // 14: dm.ProtocolInfo.configInfos:type_name -> dm.ProtocolConfigInfo
	193, // 15: dm.ProtocolConfigInfo.config:type_name -> dm.ProtocolConfigInfo.ConfigEntry
	22,  // 16: dm.ShadowIndexResp.list:type_name -> dm.ShadowIndex
	2,   // 17: dm.PropertyLogIndexReq.page:type_name -> dm.PageInfo
	27,  // 18: dm.PropertyLogIndexResp.list:type_name -> dm.PropertyLogInfo
	2,   // 19: dm.EventLogIndexReq.page:type_name -> dm.PageInfo
	30,  // 20: dm.EventLogIndexResp.list:type_name -> dm.EventLogInfo
	2,   // 21: dm.HubLogIndexReq.page:type_name -> dm.PageInfo
	34,  // 22: dm.HubLogIndexResp.list:type_name -> dm.HubLogInfo
	2,   // 23: dm.StatusLogIndexReq.page:type_name -> dm.PageInfo
	37,  // 24: dm.StatusLogIndexResp.list:type_name -> dm.StatusLogInfo
	2,   // 25: dm.SendLogIndexReq.page:type_name -> dm.PageInfo
	40,  // 26: dm.SendLogIndexResp.list:type_name -> dm.SendLogInfo
	2,   // 27: dm.SdkLogIndexReq.page:type_name -> dm.PageInfo
	43,  // 28: dm.SdkLogIndexResp.list:type_name -> dm.SdkLogInfo
	3,   // 29: dm.ActionSendReq.option:type_name -> dm.SendOption
	90,  // 30: dm.PropertyControlMultiSendReq.devices:type_name -> dm.DeviceCore
	53,  // 31: dm.PropertyControlMultiSendResp.list:type_name -> dm.PropertyControlSendMsg
	2,   // 32: dm.RemoteConfigIndexReq.page:type_name -> dm.PageInfo
	57,  // 33: dm.RemoteConfigIndexResp.list:type_name -> dm.ProductRemoteConfig
	57,  // 34: dm.RemoteConfigLastReadResp.info:type_name -> dm.ProductRemoteConfig
	203, // 35: dm.ProductCustom.transformScript:type_name -> google.protobuf.StringValue
	203, // 36: dm.ProductCustom.loginAuthScript:type_name -> google.protobuf.StringValue
	66,  // 37: dm.ProductCustom.customTopics:type_name -> dm.CustomTopic
	68,  // 38: dm.DeviceGatewayBindDevice.sign:type_name -> dm.DeviceGatewaySign
	67,  // 39: dm.DeviceGatewayMultiCreateReq.list:type_name -> dm.DeviceGatewayBindDevice
	2,   // 40: dm.DeviceGatewayIndexReq.page:type_name -> dm.PageInfo
	90,  // 41: dm.DeviceGatewayIndexReq.gateway:type_name -> dm.DeviceCore
	90,  // 42: dm.DeviceGatewayIndexReq.subDevice:type_name -> dm.DeviceCore
	83,  // 43: dm.DeviceGatewayIndexResp.list:type_name -> dm.DeviceInfo
	90,  // 44: dm.DeviceGatewayMultiDeleteReq.list:type_name -> dm.DeviceCore
	194, // 45: dm.GroupInfo.tags:type_name -> dm.GroupInfo.TagsEntry
	2,   // 46: dm.GroupInfoIndexReq.page:type_name -> dm.PageInfo
	195, // 47: dm.GroupInfoIndexReq.tags:type_name -> dm.GroupInfoIndexReq.TagsEntry
	73,  // 48: dm.GroupInfoIndexResp.list:type_name -> dm.GroupInfo
	196, // 49: dm.GroupInfoUpdateReq.tags:type_name -> dm.GroupInfoUpdateReq.TagsEntry
	90,  // 50: dm.GroupDeviceMultiSaveReq.list:type_name -> dm.DeviceCore
	2,   // 51: dm.GroupDeviceIndexReq.page:type_name -> dm.PageInfo
	83,  // 52: dm.GroupDeviceIndexResp.list:type_name -> dm.DeviceInfo
	90,  // 53: dm.GroupDeviceMultiDeleteReq.list:type_name -> dm.DeviceCore
	203, // 54: dm.DeviceInfo.version:type_name -> google.protobuf.StringValue
	82,  // 55: dm.DeviceInfo.Position:type_name -> dm.Point
	203, // 56: dm.DeviceInfo.address:type_name -> google.protobuf.StringValue
	197, // 57: dm.DeviceInfo.tags:type_name -> dm.DeviceInfo.TagsEntry
	203, // 58: dm.DeviceInfo.deviceAlias:type_name -> google.protobuf.StringValue
	203, // 59: dm.DeviceInfo.phone:type_name -> google.protobuf.StringValue
	203, // 60: dm.DeviceInfo.iccid:type_name -> google.protobuf.StringValue
	198, // 61: dm.DeviceInfo.schemaAlias:type_name -> dm.DeviceInfo.SchemaAliasEntry
	203, // 62: dm.ProductInfo.desc:type_name -> google.protobuf.StringValue
	203, // 63: dm.ProductInfo.devStatus:type_name -> google.protobuf.StringValue
	199, // 64: dm.ProductInfo.tags:type_name -> dm.ProductInfo.TagsEntry
	18,  // 65: dm.ProductInfo.protocol:type_name -> dm.ProtocolInfo
	12,  // 66: dm.ProductInfo.category:type_name -> dm.ProductCategory
	2,   // 67: dm.ProductInfoIndexReq.page:type_name -> dm.PageInfo
	200, // 68: dm.ProductInfoIndexReq.tags:type_name -> dm.ProductInfoIndexReq.TagsEntry
	84,  // 69: dm.ProductInfoIndexResp.list:type_name -> dm.ProductInfo
	90,  // 70: dm.DeviceInfoMultiUpdateReq.devices:type_name -> dm.DeviceCore
	2,   // 71: dm.DeviceInfoIndexReq.page:type_name -> dm.PageInfo
	201, // 72: dm.DeviceInfoIndexReq.tags:type_name -> dm.DeviceInfoIndexReq.TagsEntry
	82,  // 73: dm.DeviceInfoIndexReq.Position:type_name -> dm.Point
	90,  // 74: dm.DeviceInfoIndexReq.devices:type_name -> dm.DeviceCore
	83,  // 75: dm.DeviceInfoIndexResp.list:type_name -> dm.DeviceInfo
	100, // 76: dm.CommonSchemaUpdateReq.info:type_name -> dm.CommonSchemaInfo
	100, // 77: dm.CommonSchemaCreateReq.info:type_name -> dm.CommonSchemaInfo
	2,   // 78: dm.CommonSchemaIndexReq.page:type_name -> dm.PageInfo
	100, // 79: dm.CommonSchemaIndexResp.list:type_name -> dm.CommonSchemaInfo
	203, // 80: dm.CommonSchemaInfo.name:type_name -> google.protobuf.StringValue
	203, // 81: dm.CommonSchemaInfo.desc:type_name -> google.protobuf.StringValue
	203, // 82: dm.CommonSchemaInfo.affordance:type_name -> google.protobuf.StringValue
	107, // 83: dm.ProductSchemaUpdateReq.info:type_name -> dm.ProductSchemaInfo
	107, // 84: dm.ProductSchemaMultiCreateReq.list:type_name -> dm.ProductSchemaInfo
	107, // 85: dm.ProductSchemaCreateReq.info:type_name -> dm.ProductSchemaInfo
	2,   // 86: dm.ProductSchemaIndexReq.page:type_name -> dm.PageInfo
	107, // 87: dm.ProductSchemaIndexResp.list:type_name -> dm.ProductSchemaInfo
	203, // 88: dm.ProductSchemaInfo.name:type_name -> google.protobuf.StringValue
	203, // 89: dm.ProductSchemaInfo.desc:type_name -> google.protobuf.StringValue
	203, // 90: dm.ProductSchemaInfo.affordance:type_name -> google.protobuf.StringValue
	113, // 91: dm.DeviceCountResp.list:type_name -> dm.DeviceCountInfo
	202, // 92: dm.DeviceCountInfo.count:type_name -> dm.DeviceCountInfo.CountEntry
	1,   // 93: dm.DeviceInfoCountReq.timeRange:type_name -> dm.TimeRange
	1,   // 94: dm.DeviceTypeCountReq.timeRange:type_name -> dm.TimeRange
	203, // 95: dm.Firmware.desc:type_name -> google.protobuf.StringValue
	203, // 96: dm.Firmware.extData:type_name -> google.protobuf.StringValue
	121, // 97: dm.Firmware.files:type_name -> dm.OtaFirmwareFile
	203, // 98: dm.FirmwareInfo.desc:type_name -> google.protobuf.StringValue
	203, // 99: dm.FirmwareInfo.extData:type_name -> google.protobuf.StringValue
	121, // 100: dm.FirmwareInfo.files:type_name -> dm.OtaFirmwareFile
	151, // 101: dm.FirmwareInfoIndexReq.page:type_name -> dm.OtaPageInfo
	120, // 102: dm.FirmwareInfoIndexResp.list:type_name -> dm.FirmwareInfo
	151, // 103: dm.OtaFirmwareFileIndexReq.page:type_name -> dm.OtaPageInfo
	204, // 104: dm.OtaFirmwareFileIndexReq.size:type_name -> google.protobuf.Int64Value
	128, // 105: dm.OtaFirmwareFileIndexResp.list:type_name -> dm.OtaFirmwareFileInfo
	203, // 106: dm.FirmwareInfoReadResp.desc:type_name -> google.protobuf.StringValue
	203, // 107: dm.FirmwareInfoReadResp.extData:type_name -> google.protobuf.StringValue
	129, // 108: dm.FirmwareInfoReadResp.files:type_name -> dm.OtaFirmwareFileResp
	203, // 109: dm.OtaTaskCreateReq.deviceList:type_name -> google.protobuf.StringValue
	203, // 110: dm.OtaTaskCreateReq.versionList:type_name -> google.protobuf.StringValue
	203, // 111: dm.OtaTaskInfo.deviceList:type_name -> google.protobuf.StringValue
	203, // 112: dm.OtaTaskInfo.versionList:type_name -> google.protobuf.StringValue
	151, // 113: dm.OtaTaskIndexReq.page:type_name -> dm.OtaPageInfo
	137, // 114: dm.OtaTaskIndexResp.list:type_name -> dm.OtaTaskInfo
	203, // 115: dm.OtaTaskReadResp.deviceList:type_name -> google.protobuf.StringValue
	203, // 116: dm.OtaTaskReadResp.versionList:type_name -> google.protobuf.StringValue
	151, // 117: dm.OtaTaskDeviceIndexReq.page:type_name -> dm.OtaPageInfo
	145, // 118: dm.OtaTaskDeviceIndexResp.list:type_name -> dm.OtaTaskDeviceInfo
	203, // 119: dm.OtaFirmwareCreateReq.firmwareUdi:type_name -> google.protobuf.StringValue
	153, // 120: dm.OtaFirmwareCreateReq.firmwareFiles:type_name -> dm.FirmwareFile
	203, // 121: dm.OtaFirmwareUpdateReq.firmwareUdi:type_name -> google.protobuf.StringValue
	2,   // 122: dm.OtaFirmwareIndexReq.page:type_name -> dm.PageInfo
	160, // 123: dm.OtaFirmwareIndexResp.list:type_name -> dm.OtaFirmwareInfo
	153, // 124: dm.OtaFirmwareReadResp.firmwareFileList:type_name -> dm.FirmwareFile
	165, // 125: dm.OtaFirmwareVerifyReq.tags:type_name -> dm.Tag
	165, // 126: dm.StaticUpgradeJobReq.tag:type_name -> dm.Tag
	166, // 127: dm.StaticUpgradeJobReq.deviceInfo:type_name -> dm.StaticUpgradeDeviceInfo
	165, // 128: dm.DynamicUpgradeJobReq.tag:type_name -> dm.Tag
	166, // 129: dm.DynamicUpgradeJobReq.deviceInfo:type_name -> dm.StaticUpgradeDeviceInfo
	2,   // 130: dm.OtaJobByFirmwareIndexReq.pageInfo:type_name -> dm.PageInfo
	165, // 131: dm.OtaJobInfo.tagList:type_name -> dm.Tag
	170, // 132: dm.OtaJobInfoIndexResp.otaJobInfo:type_name -> dm.OtaJobInfo
	2,   // 133: dm.OtaJobByDeviceIndexReq.pageInfo:type_name -> dm.PageInfo
	2,   // 134: dm.OTATaskByJobIndexReq.pageInfo:type_name -> dm.PageInfo
	175, // 135: dm.OtaTaskByJobIndexResp.otaUpTaskInfo:type_name -> dm.OtaUpTaskInfo
	175, // 136: dm.OTAUnfinishedTaskByDeviceIndexResp.otaUpTaskInfoList:type_name -> dm.OtaUpTaskInfo
	165, // 137: dm.VerifyOtaFirmwareReq.tags:type_name -> dm.Tag
	188, // 138: dm.OTAModuleIndexResp.otaModuleInfoList:type_name -> dm.OtaModuleInfo
	2,   // 139: dm.OTAModuleIndexReq.pageInfo:type_name -> dm.PageInfo
	190, // 140: dm.OTAModuleVersionsIndexResp.otaModuleDetailList:type_name -> dm.OTAModuleDetail
	95,  // 141: dm.DeviceManage.rootCheck:input_type -> dm.RootCheckReq
	83,  // 142: dm.DeviceManage.deviceInfoCreate:input_type -> dm.DeviceInfo
	83,  // 143: dm.DeviceManage.deviceInfoUpdate:input_type -> dm.DeviceInfo
	89,  // 144: dm.DeviceManage.deviceInfoDelete:input_type -> dm.DeviceInfoDeleteReq
	93,  // 145: dm.DeviceManage.deviceInfoIndex:input_type -> dm.DeviceInfoIndexReq
	92,  // 146: dm.DeviceManage.DeviceInfoMultiUpdate:input_type -> dm.DeviceInfoMultiUpdateReq
	91,  // 147: dm.DeviceManage.deviceInfoRead:input_type -> dm.DeviceInfoReadReq
	69,  // 148: dm.DeviceManage.deviceGatewayMultiCreate:input_type -> dm.DeviceGatewayMultiCreateReq
	70,  // 149: dm.DeviceManage.deviceGatewayIndex:input_type -> dm.DeviceGatewayIndexReq
	72,  // 150: dm.DeviceManage.deviceGatewayMultiDelete:input_type -> dm.DeviceGatewayMultiDeleteReq
	114, // 151: dm.DeviceManage.deviceInfoCount:input_type -> dm.DeviceInfoCountReq
	115, // 152: dm.DeviceManage.deviceTypeCount:input_type -> dm.DeviceTypeCountReq
	111, // 153: dm.DeviceManage.deviceCount:input_type -> dm.DeviceCountReq
	6,   // 154: dm.ProductManage.productInit:input_type -> dm.ProductInitReq
	84,  // 155: dm.ProductManage.productInfoCreate:input_type -> dm.ProductInfo
	84,  // 156: dm.ProductManage.productInfoUpdate:input_type -> dm.ProductInfo
	85,  // 157: dm.ProductManage.productInfoDelete:input_type -> dm.ProductInfoDeleteReq
	87,  // 158: dm.ProductManage.productInfoIndex:input_type -> dm.ProductInfoIndexReq
	86,  // 159: dm.ProductManage.productInfoRead:input_type -> dm.ProductInfoReadReq
	101, // 160: dm.ProductManage.productSchemaUpdate:input_type -> dm.ProductSchemaUpdateReq
	103, // 161: dm.ProductManage.productSchemaCreate:input_type -> dm.ProductSchemaCreateReq
	102, // 162: dm.ProductManage.productSchemaMultiCreate:input_type -> dm.ProductSchemaMultiCreateReq
	104, // 163: dm.ProductManage.productSchemaDelete:input_type -> dm.ProductSchemaDeleteReq
	105, // 164: dm.ProductManage.productSchemaIndex:input_type -> dm.ProductSchemaIndexReq
	108, // 165: dm.ProductManage.productSchemaTslImport:input_type -> dm.ProductSchemaTslImportReq
	109, // 166: dm.ProductManage.productSchemaTslRead:input_type -> dm.ProductSchemaTslReadReq
	64,  // 167: dm.ProductManage.productCustomRead:input_type -> dm.ProductCustomReadReq
	65,  // 168: dm.ProductManage.productCustomUpdate:input_type -> dm.ProductCustom
	12,  // 169: dm.ProductManage.productCategoryCreate:input_type -> dm.ProductCategory
	12,  // 170: dm.ProductManage.productCategoryUpdate:input_type -> dm.ProductCategory
	5,   // 171: dm.ProductManage.productCategoryDelete:input_type -> dm.WithID
	14,  // 172: dm.ProductManage.productCategoryIndex:input_type -> dm.ProductCategoryIndexReq
	13,  // 173: dm.ProductManage.productCategoryRead:input_type -> dm.ProductCategoryReadReq
	96,  // 174: dm.SchemaManage.commonSchemaUpdate:input_type -> dm.CommonSchemaUpdateReq
	97,  // 175: dm.SchemaManage.commonSchemaCreate:input_type -> dm.CommonSchemaCreateReq
	5,   // 176: dm.SchemaManage.commonSchemaDelete:input_type -> dm.WithID
	98,  // 177: dm.SchemaManage.commonSchemaIndex:input_type -> dm.CommonSchemaIndexReq
	16,  // 178: dm.ProtocolManage.protocolInfoIndex:input_type -> dm.ProtocolInfoIndexReq
	4,   // 179: dm.ProtocolManage.protocolInfoRead:input_type -> dm.WithIDCode
	18,  // 180: dm.ProtocolManage.protocolInfoCreate:input_type -> dm.ProtocolInfo
	18,  // 181: dm.ProtocolManage.protocolInfoUpdate:input_type -> dm.ProtocolInfo
	5,   // 182: dm.ProtocolManage.protocolInfoDelete:input_type -> dm.WithID
	73,  // 183: dm.DeviceGroup.groupInfoCreate:input_type -> dm.GroupInfo
	75,  // 184: dm.DeviceGroup.groupInfoIndex:input_type -> dm.GroupInfoIndexReq
	5,   // 185: dm.DeviceGroup.groupInfoRead:input_type -> dm.WithID
	73,  // 186: dm.DeviceGroup.groupInfoUpdate:input_type -> dm.GroupInfo
	5,   // 187: dm.DeviceGroup.groupInfoDelete:input_type -> dm.WithID
	78,  // 188: dm.DeviceGroup.groupDeviceMultiCreate:input_type -> dm.GroupDeviceMultiSaveReq
	78,  // 189: dm.DeviceGroup.groupDeviceMultiUpdate:input_type -> dm.GroupDeviceMultiSaveReq
	79,  // 190: dm.DeviceGroup.groupDeviceIndex:input_type -> dm.GroupDeviceIndexReq
	81,  // 191: dm.DeviceGroup.groupDeviceMultiDelete:input_type -> dm.GroupDeviceMultiDeleteReq
	58,  // 192: dm.RemoteConfig.RemoteConfigCreate:input_type -> dm.RemoteConfigCreateReq
	59,  // 193: dm.RemoteConfig.RemoteConfigIndex:input_type -> dm.RemoteConfigIndexReq
	61,  // 194: dm.RemoteConfig.RemoteConfigPushAll:input_type -> dm.RemoteConfigPushAllReq
	62,  // 195: dm.RemoteConfig.RemoteConfigLastRead:input_type -> dm.RemoteConfigLastReadReq
	41,  // 196: dm.DeviceMsg.sdkLogIndex:input_type -> dm.SdkLogIndexReq
	32,  // 197: dm.DeviceMsg.hubLogIndex:input_type -> dm.HubLogIndexReq
	38,  // 198: dm.DeviceMsg.sendLogIndex:input_type -> dm.SendLogIndexReq
	35,  // 199: dm.DeviceMsg.statusLogIndex:input_type -> dm.StatusLogIndexReq
	26,  // 200: dm.DeviceMsg.propertyLogLatestIndex:input_type -> dm.PropertyLogLatestIndexReq
	25,  // 201: dm.DeviceMsg.propertyLogIndex:input_type -> dm.PropertyLogIndexReq
	29,  // 202: dm.DeviceMsg.eventLogIndex:input_type -> dm.EventLogIndexReq
	26,  // 203: dm.DeviceMsg.shadowIndex:input_type -> dm.PropertyLogLatestIndexReq
	55,  // 204: dm.DeviceMsg.otaPromptIndex:input_type -> dm.OtaPromptIndexReq
	44,  // 205: dm.DeviceInteract.actionSend:input_type -> dm.ActionSendReq
	46,  // 206: dm.DeviceInteract.actionRead:input_type -> dm.RespReadReq
	48,  // 207: dm.DeviceInteract.actionResp:input_type -> dm.ActionRespReq
	23,  // 208: dm.DeviceInteract.propertyGetReportSend:input_type -> dm.PropertyGetReportSendReq
	47,  // 209: dm.DeviceInteract.propertyControlSend:input_type -> dm.PropertyControlSendReq
	52,  // 210: dm.DeviceInteract.propertyControlMultiSend:input_type -> dm.PropertyControlMultiSendReq
	46,  // 211: dm.DeviceInteract.propertyControlRead:input_type -> dm.RespReadReq
	50,  // 212: dm.DeviceInteract.sendMsg:input_type -> dm.SendMsgReq
	118, // 213: dm.FirmwareManage.FirmwareInfoCreate:input_type -> dm.Firmware
	120, // 214: dm.FirmwareManage.FirmwareInfoUpdate:input_type -> dm.FirmwareInfo
	122, // 215: dm.FirmwareManage.FirmwareInfoDelete:input_type -> dm.FirmwareInfoDeleteReq
	124, // 216: dm.FirmwareManage.FirmwareInfoIndex:input_type -> dm.FirmwareInfoIndexReq
	126, // 217: dm.FirmwareManage.FirmwareInfoRead:input_type -> dm.FirmwareInfoReadReq
	127, // 218: dm.FirmwareManage.OtaFirmwareFileUpdate:input_type -> dm.OtaFirmwareFileReq
	130, // 219: dm.FirmwareManage.OtaFirmwareFileIndex:input_type -> dm.OtaFirmwareFileIndexReq
	133, // 220: dm.FirmwareManage.OtaFirmwareDeviceInfo:input_type -> dm.OtaFirmwareDeviceInfoReq
	135, // 221: dm.OtaTaskManage.OtaTaskCreate:input_type -> dm.OtaTaskCreateReq
	137, // 222: dm.OtaTaskManage.OtaTaskUpdate:input_type -> dm.OtaTaskInfo
	138, // 223: dm.OtaTaskManage.OtaTaskCancle:input_type -> dm.OtaTaskCancleReq
	139, // 224: dm.OtaTaskManage.OtaTaskIndex:input_type -> dm.OtaTaskIndexReq
	141, // 225: dm.OtaTaskManage.OtaTaskRead:input_type -> dm.OtaTaskReadReq
	143, // 226: dm.OtaTaskManage.OtaTaskDeviceIndex:input_type -> dm.OtaTaskDeviceIndexReq
	146, // 227: dm.OtaTaskManage.OtaTaskDeviceRead:input_type -> dm.OtaTaskDeviceReadReq
	147, // 228: dm.OtaTaskManage.OtaTaskDeviceEnableBatch:input_type -> dm.OtaTaskBatchReq
	149, // 229: dm.OtaTaskManage.OtaTaskDeviceProcess:input_type -> dm.OtaTaskDeviceProcessReq
	150, // 230: dm.OtaTaskManage.OtaTaskDeviceCancle:input_type -> dm.OtaTaskDeviceCancleReq
	11,  // 231: dm.userDevice.userDeviceCollectMultiCreate:input_type -> dm.UserDeviceCollectSave
	11,  // 232: dm.userDevice.userDeviceCollectMultiDelete:input_type -> dm.UserDeviceCollectSave
	0,   // 233: dm.userDevice.userDeviceCollectIndex:input_type -> dm.Empty
	10,  // 234: dm.userDevice.userDeviceShareCreate:input_type -> dm.UserDeviceShareInfo
	10,  // 235: dm.userDevice.userDeviceShareUpdate:input_type -> dm.UserDeviceShareInfo
	5,   // 236: dm.userDevice.userDeviceShareDelete:input_type -> dm.WithID
	8,   // 237: dm.userDevice.userDeviceShareIndex:input_type -> dm.UserDeviceShareIndexReq
	7,   // 238: dm.userDevice.userDeviceShareRead:input_type -> dm.UserDeviceShareReadReq
	154, // 239: dm.OTAFirmwareManage.otaFirmwareCreate:input_type -> dm.OtaFirmwareCreateReq
	156, // 240: dm.OTAFirmwareManage.otaFirmwareUpdate:input_type -> dm.OtaFirmwareUpdateReq
	157, // 241: dm.OTAFirmwareManage.otaFirmwareDelete:input_type -> dm.OtaFirmwareDeleteReq
	158, // 242: dm.OTAFirmwareManage.otaFirmwareIndex:input_type -> dm.OtaFirmwareIndexReq
	161, // 243: dm.OTAFirmwareManage.otaFirmwareRead:input_type -> dm.OtaFirmwareReadReq
	163, // 244: dm.OTAJobManage.otaVerifyJobCreate:input_type -> dm.OtaFirmwareVerifyReq
	167, // 245: dm.OTAJobManage.otaStaticUpgradeJobCreate:input_type -> dm.StaticUpgradeJobReq
	168, // 246: dm.OTAJobManage.otaDynamicUpgradeJobCreate:input_type -> dm.DynamicUpgradeJobReq
	169, // 247: dm.OTAJobManage.otaJobByFirmwareIndex:input_type -> dm.OtaJobByFirmwareIndexReq
	172, // 248: dm.OTAJobManage.otaJobByDeviceIndex:input_type -> dm.OtaJobByDeviceIndexReq
	173, // 249: dm.OTAJobManage.otaJobRead:input_type -> dm.JobReq
	173, // 250: dm.OTAJobManage.cancelOTAStrategyByJob:input_type -> dm.JobReq
	174, // 251: dm.OTAUpgradeTaskManage.otaTaskByJobIndex:input_type -> dm.OTATaskByJobIndexReq
	177, // 252: dm.OTAUpgradeTaskManage.otaTaskByJobCancel:input_type -> dm.OTATaskByJobCancelReq
	178, // 253: dm.OTAUpgradeTaskManage.otaTaskByDeviceCancel:input_type -> dm.OTATaskByDeviceCancelReq
	180, // 254: dm.OTAUpgradeTaskManage.otaTaskConfirm:input_type -> dm.OTATaskConfirmReq
	181, // 255: dm.OTAUpgradeTaskManage.otaUnfinishedTaskByDeviceIndex:input_type -> dm.OTAUnfinishedTaskByDeviceIndexReq
	183, // 256: dm.OTAUpgradeTaskManage.otaTaskReUpgrade:input_type -> dm.OTATaskReUpgradeReq
	185, // 257: dm.OTAModuleManage.otaModuleCreate:input_type -> dm.OTAModuleReq
	185, // 258: dm.OTAModuleManage.otaModuleUpdate:input_type -> dm.OTAModuleReq
	186, // 259: dm.OTAModuleManage.otaModuleDelete:input_type -> dm.OTAModuleDeleteReq
	189, // 260: dm.OTAModuleManage.otaModuleByProductIndex:input_type -> dm.OTAModuleIndexReq
	189, // 261: dm.OTAModuleManage.otaModuleVersionsByDeviceIndex:input_type -> dm.OTAModuleIndexReq
	0,   // 262: dm.DeviceManage.rootCheck:output_type -> dm.Empty
	0,   // 263: dm.DeviceManage.deviceInfoCreate:output_type -> dm.Empty
	0,   // 264: dm.DeviceManage.deviceInfoUpdate:output_type -> dm.Empty
	0,   // 265: dm.DeviceManage.deviceInfoDelete:output_type -> dm.Empty
	94,  // 266: dm.DeviceManage.deviceInfoIndex:output_type -> dm.DeviceInfoIndexResp
	0,   // 267: dm.DeviceManage.DeviceInfoMultiUpdate:output_type -> dm.Empty
	83,  // 268: dm.DeviceManage.deviceInfoRead:output_type -> dm.DeviceInfo
	0,   // 269: dm.DeviceManage.deviceGatewayMultiCreate:output_type -> dm.Empty
	71,  // 270: dm.DeviceManage.deviceGatewayIndex:output_type -> dm.DeviceGatewayIndexResp
	0,   // 271: dm.DeviceManage.deviceGatewayMultiDelete:output_type -> dm.Empty
	116, // 272: dm.DeviceManage.deviceInfoCount:output_type -> dm.DeviceInfoCount
	117, // 273: dm.DeviceManage.deviceTypeCount:output_type -> dm.DeviceTypeCountResp
	112, // 274: dm.DeviceManage.deviceCount:output_type -> dm.DeviceCountResp
	0,   // 275: dm.ProductManage.productInit:output_type -> dm.Empty
	0,   // 276: dm.ProductManage.productInfoCreate:output_type -> dm.Empty
	0,   // 277: dm.ProductManage.productInfoUpdate:output_type -> dm.Empty
	0,   // 278: dm.ProductManage.productInfoDelete:output_type -> dm.Empty
	88,  // 279: dm.ProductManage.productInfoIndex:output_type -> dm.ProductInfoIndexResp
	84,  // 280: dm.ProductManage.productInfoRead:output_type -> dm.ProductInfo
	0,   // 281: dm.ProductManage.productSchemaUpdate:output_type -> dm.Empty
	0,   // 282: dm.ProductManage.productSchemaCreate:output_type -> dm.Empty
	0,   // 283: dm.ProductManage.productSchemaMultiCreate:output_type -> dm.Empty
	0,   // 284: dm.ProductManage.productSchemaDelete:output_type -> dm.Empty
	106, // 285: dm.ProductManage.productSchemaIndex:output_type -> dm.ProductSchemaIndexResp
	0,   // 286: dm.ProductManage.productSchemaTslImport:output_type -> dm.Empty
	110, // 287: dm.ProductManage.productSchemaTslRead:output_type -> dm.ProductSchemaTslReadResp
	65,  // 288: dm.ProductManage.productCustomRead:output_type -> dm.ProductCustom
	0,   // 289: dm.ProductManage.productCustomUpdate:output_type -> dm.Empty
	5,   // 290: dm.ProductManage.productCategoryCreate:output_type -> dm.WithID
	0,   // 291: dm.ProductManage.productCategoryUpdate:output_type -> dm.Empty
	0,   // 292: dm.ProductManage.productCategoryDelete:output_type -> dm.Empty
	15,  // 293: dm.ProductManage.productCategoryIndex:output_type -> dm.ProductCategoryIndexResp
	12,  // 294: dm.ProductManage.productCategoryRead:output_type -> dm.ProductCategory
	0,   // 295: dm.SchemaManage.commonSchemaUpdate:output_type -> dm.Empty
	0,   // 296: dm.SchemaManage.commonSchemaCreate:output_type -> dm.Empty
	0,   // 297: dm.SchemaManage.commonSchemaDelete:output_type -> dm.Empty
	99,  // 298: dm.SchemaManage.commonSchemaIndex:output_type -> dm.CommonSchemaIndexResp
	17,  // 299: dm.ProtocolManage.protocolInfoIndex:output_type -> dm.ProtocolInfoIndexResp
	18,  // 300: dm.ProtocolManage.protocolInfoRead:output_type -> dm.ProtocolInfo
	5,   // 301: dm.ProtocolManage.protocolInfoCreate:output_type -> dm.WithID
	0,   // 302: dm.ProtocolManage.protocolInfoUpdate:output_type -> dm.Empty
	0,   // 303: dm.ProtocolManage.protocolInfoDelete:output_type -> dm.Empty
	5,   // 304: dm.DeviceGroup.groupInfoCreate:output_type -> dm.WithID
	76,  // 305: dm.DeviceGroup.groupInfoIndex:output_type -> dm.GroupInfoIndexResp
	73,  // 306: dm.DeviceGroup.groupInfoRead:output_type -> dm.GroupInfo
	0,   // 307: dm.DeviceGroup.groupInfoUpdate:output_type -> dm.Empty
	0,   // 308: dm.DeviceGroup.groupInfoDelete:output_type -> dm.Empty
	0,   // 309: dm.DeviceGroup.groupDeviceMultiCreate:output_type -> dm.Empty
	0,   // 310: dm.DeviceGroup.groupDeviceMultiUpdate:output_type -> dm.Empty
	80,  // 311: dm.DeviceGroup.groupDeviceIndex:output_type -> dm.GroupDeviceIndexResp
	0,   // 312: dm.DeviceGroup.groupDeviceMultiDelete:output_type -> dm.Empty
	0,   // 313: dm.RemoteConfig.RemoteConfigCreate:output_type -> dm.Empty
	60,  // 314: dm.RemoteConfig.RemoteConfigIndex:output_type -> dm.RemoteConfigIndexResp
	0,   // 315: dm.RemoteConfig.RemoteConfigPushAll:output_type -> dm.Empty
	63,  // 316: dm.RemoteConfig.RemoteConfigLastRead:output_type -> dm.RemoteConfigLastReadResp
	42,  // 317: dm.DeviceMsg.sdkLogIndex:output_type -> dm.SdkLogIndexResp
	33,  // 318: dm.DeviceMsg.hubLogIndex:output_type -> dm.HubLogIndexResp
	39,  // 319: dm.DeviceMsg.sendLogIndex:output_type -> dm.SendLogIndexResp
	36,  // 320: dm.DeviceMsg.statusLogIndex:output_type -> dm.StatusLogIndexResp
	28,  // 321: dm.DeviceMsg.propertyLogLatestIndex:output_type -> dm.PropertyLogIndexResp
	28,  // 322: dm.DeviceMsg.propertyLogIndex:output_type -> dm.PropertyLogIndexResp
	31,  // 323: dm.DeviceMsg.eventLogIndex:output_type -> dm.EventLogIndexResp
	21,  // 324: dm.DeviceMsg.shadowIndex:output_type -> dm.ShadowIndexResp
	56,  // 325: dm.DeviceMsg.otaPromptIndex:output_type -> dm.OtaPromptIndexResp
	45,  // 326: dm.DeviceInteract.actionSend:output_type -> dm.ActionSendResp
	45,  // 327: dm.DeviceInteract.actionRead:output_type -> dm.ActionSendResp
	0,   // 328: dm.DeviceInteract.actionResp:output_type -> dm.Empty
	24,  // 329: dm.DeviceInteract.propertyGetReportSend:output_type -> dm.PropertyGetReportSendResp
	49,  // 330: dm.DeviceInteract.propertyControlSend:output_type -> dm.PropertyControlSendResp
	54,  // 331: dm.DeviceInteract.propertyControlMultiSend:output_type -> dm.PropertyControlMultiSendResp
	49,  // 332: dm.DeviceInteract.propertyControlRead:output_type -> dm.PropertyControlSendResp
	51,  // 333: dm.DeviceInteract.sendMsg:output_type -> dm.SendMsgResp
	119, // 334: dm.FirmwareManage.FirmwareInfoCreate:output_type -> dm.FirmwareResp
	152, // 335: dm.FirmwareManage.FirmwareInfoUpdate:output_type -> dm.OtaCommonResp
	123, // 336: dm.FirmwareManage.FirmwareInfoDelete:output_type -> dm.FirmwareInfoDeleteResp
	125, // 337: dm.FirmwareManage.FirmwareInfoIndex:output_type -> dm.FirmwareInfoIndexResp
	132, // 338: dm.FirmwareManage.FirmwareInfoRead:output_type -> dm.FirmwareInfoReadResp
	129, // 339: dm.FirmwareManage.OtaFirmwareFileUpdate:output_type -> dm.OtaFirmwareFileResp
	131, // 340: dm.FirmwareManage.OtaFirmwareFileIndex:output_type -> dm.OtaFirmwareFileIndexResp
	134, // 341: dm.FirmwareManage.OtaFirmwareDeviceInfo:output_type -> dm.OtaFirmwareDeviceInfoResp
	136, // 342: dm.OtaTaskManage.OtaTaskCreate:output_type -> dm.OtaTaskCreatResp
	152, // 343: dm.OtaTaskManage.OtaTaskUpdate:output_type -> dm.OtaCommonResp
	152, // 344: dm.OtaTaskManage.OtaTaskCancle:output_type -> dm.OtaCommonResp
	140, // 345: dm.OtaTaskManage.OtaTaskIndex:output_type -> dm.OtaTaskIndexResp
	142, // 346: dm.OtaTaskManage.OtaTaskRead:output_type -> dm.OtaTaskReadResp
	144, // 347: dm.OtaTaskManage.OtaTaskDeviceIndex:output_type -> dm.OtaTaskDeviceIndexResp
	145, // 348: dm.OtaTaskManage.OtaTaskDeviceRead:output_type -> dm.OtaTaskDeviceInfo
	148, // 349: dm.OtaTaskManage.OtaTaskDeviceEnableBatch:output_type -> dm.OtaTaskBatchResp
	152, // 350: dm.OtaTaskManage.OtaTaskDeviceProcess:output_type -> dm.OtaCommonResp
	152, // 351: dm.OtaTaskManage.OtaTaskDeviceCancle:output_type -> dm.OtaCommonResp
	0,   // 352: dm.userDevice.userDeviceCollectMultiCreate:output_type -> dm.Empty
	0,   // 353: dm.userDevice.userDeviceCollectMultiDelete:output_type -> dm.Empty
	11,  // 354: dm.userDevice.userDeviceCollectIndex:output_type -> dm.UserDeviceCollectSave
	5,   // 355: dm.userDevice.userDeviceShareCreate:output_type -> dm.WithID
	0,   // 356: dm.userDevice.userDeviceShareUpdate:output_type -> dm.Empty
	0,   // 357: dm.userDevice.userDeviceShareDelete:output_type -> dm.Empty
	9,   // 358: dm.userDevice.userDeviceShareIndex:output_type -> dm.UserDeviceShareIndexResp
	10,  // 359: dm.userDevice.userDeviceShareRead:output_type -> dm.UserDeviceShareInfo
	155, // 360: dm.OTAFirmwareManage.otaFirmwareCreate:output_type -> dm.OtaFirmwareResp
	155, // 361: dm.OTAFirmwareManage.otaFirmwareUpdate:output_type -> dm.OtaFirmwareResp
	0,   // 362: dm.OTAFirmwareManage.otaFirmwareDelete:output_type -> dm.Empty
	159, // 363: dm.OTAFirmwareManage.otaFirmwareIndex:output_type -> dm.OtaFirmwareIndexResp
	162, // 364: dm.OTAFirmwareManage.otaFirmwareRead:output_type -> dm.OtaFirmwareReadResp
	164, // 365: dm.OTAJobManage.otaVerifyJobCreate:output_type -> dm.UpgradeJobResp
	164, // 366: dm.OTAJobManage.otaStaticUpgradeJobCreate:output_type -> dm.UpgradeJobResp
	164, // 367: dm.OTAJobManage.otaDynamicUpgradeJobCreate:output_type -> dm.UpgradeJobResp
	171, // 368: dm.OTAJobManage.otaJobByFirmwareIndex:output_type -> dm.OtaJobInfoIndexResp
	171, // 369: dm.OTAJobManage.otaJobByDeviceIndex:output_type -> dm.OtaJobInfoIndexResp
	170, // 370: dm.OTAJobManage.otaJobRead:output_type -> dm.OtaJobInfo
	0,   // 371: dm.OTAJobManage.cancelOTAStrategyByJob:output_type -> dm.Empty
	176, // 372: dm.OTAUpgradeTaskManage.otaTaskByJobIndex:output_type -> dm.OtaTaskByJobIndexResp
	0,   // 373: dm.OTAUpgradeTaskManage.otaTaskByJobCancel:output_type -> dm.Empty
	0,   // 374: dm.OTAUpgradeTaskManage.otaTaskByDeviceCancel:output_type -> dm.Empty
	0,   // 375: dm.OTAUpgradeTaskManage.otaTaskConfirm:output_type -> dm.Empty
	182, // 376: dm.OTAUpgradeTaskManage.otaUnfinishedTaskByDeviceIndex:output_type -> dm.OTAUnfinishedTaskByDeviceIndexResp
	0,   // 377: dm.OTAUpgradeTaskManage.otaTaskReUpgrade:output_type -> dm.Empty
	0,   // 378: dm.OTAModuleManage.otaModuleCreate:output_type -> dm.Empty
	0,   // 379: dm.OTAModuleManage.otaModuleUpdate:output_type -> dm.Empty
	0,   // 380: dm.OTAModuleManage.otaModuleDelete:output_type -> dm.Empty
	187, // 381: dm.OTAModuleManage.otaModuleByProductIndex:output_type -> dm.OTAModuleIndexResp
	191, // 382: dm.OTAModuleManage.otaModuleVersionsByDeviceIndex:output_type -> dm.OTAModuleVersionsIndexResp
	262, // [262:383] is the sub-list for method output_type
	141, // [141:262] is the sub-list for method input_type
	141, // [141:141] is the sub-list for extension type_name
	141, // [141:141] is the sub-list for extension extendee
	0,   // [0:141] is the sub-list for field type_name
}

func init() { file_proto_dm_proto_init() }
func file_proto_dm_proto_init() {
	if File_proto_dm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_dm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithIDCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInitReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceShareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeviceCollectSave); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategoryReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategoryIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCategoryIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolConfigField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProtocolConfigInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShadowIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShadowIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyGetReportSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyGetReportSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyLogLatestIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HubLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HubLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HubLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkLogIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkLogIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkLogInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RespReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyControlSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionRespReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyControlSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMsgResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyControlMultiSendReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyControlSendMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyControlMultiSendResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaPromptIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaPromptIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductRemoteConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigPushAllReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigLastReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteConfigLastReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCustomReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCustom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayBindDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewaySign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayMultiCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceGatewayMultiDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupInfoUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDeviceMultiSaveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDeviceIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDeviceIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupDeviceMultiDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfoDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfoReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoMultiUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootCheckReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSchemaUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSchemaCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSchemaIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSchemaIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSchemaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaMultiCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaTslImportReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaTslReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductSchemaTslReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTypeCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfoCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceTypeCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Firmware); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoDeleteResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFileReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFileResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFileIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareFileIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareInfoReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareDeviceInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareDeviceInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskCreatResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskCancleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskDeviceIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskDeviceIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskDeviceReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskBatchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskBatchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskDeviceProcessReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskDeviceCancleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaPageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaCommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FirmwareFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareReadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareReadResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaFirmwareVerifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpgradeJobResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticUpgradeDeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticUpgradeJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicUpgradeJobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaJobByFirmwareIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaJobInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaJobInfoIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaJobByDeviceIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTATaskByJobIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaUpTaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaTaskByJobIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTATaskByJobCancelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTATaskByDeviceCancelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTATaskByDeviceNameReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTATaskConfirmReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTAUnfinishedTaskByDeviceIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTAUnfinishedTaskByDeviceIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTATaskReUpgradeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyOtaFirmwareReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTAModuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTAModuleDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTAModuleIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtaModuleInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTAModuleIndexReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTAModuleDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OTAModuleVersionsIndexResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dm_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo_OrderBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_dm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   203,
			NumExtensions: 0,
			NumServices:   15,
		},
		GoTypes:           file_proto_dm_proto_goTypes,
		DependencyIndexes: file_proto_dm_proto_depIdxs,
		MessageInfos:      file_proto_dm_proto_msgTypes,
	}.Build()
	File_proto_dm_proto = out.File
	file_proto_dm_proto_rawDesc = nil
	file_proto_dm_proto_goTypes = nil
	file_proto_dm_proto_depIdxs = nil
}
