// Code generated by goctl. DO NOT EDIT.
// Source: dm.proto

package server

import (
	"context"

	"github.com/i-Things/things/service/dmsvr/internal/logic/otajobmanage"
	"github.com/i-Things/things/service/dmsvr/internal/svc"
	"github.com/i-Things/things/service/dmsvr/pb/dm"
)

type OTAJobManageServer struct {
	svcCtx *svc.ServiceContext
	dm.UnimplementedOTAJobManageServer
}

func NewOTAJobManageServer(svcCtx *svc.ServiceContext) *OTAJobManageServer {
	return &OTAJobManageServer{
		svcCtx: svcCtx,
	}
}

// 验证升级包
func (s *OTAJobManageServer) OtaVerifyJobCreate(ctx context.Context, in *dm.OtaFirmwareVerifyReq) (*dm.UpgradeJobResp, error) {
	l := otajobmanagelogic.NewOtaVerifyJobCreateLogic(ctx, s.svcCtx)
	return l.OtaVerifyJobCreate(in)
}

// 创建静态升级批次
func (s *OTAJobManageServer) OtaStaticUpgradeJobCreate(ctx context.Context, in *dm.StaticUpgradeJobReq) (*dm.UpgradeJobResp, error) {
	l := otajobmanagelogic.NewOtaStaticUpgradeJobCreateLogic(ctx, s.svcCtx)
	return l.OtaStaticUpgradeJobCreate(in)
}

// 创建动态升级批次
func (s *OTAJobManageServer) OtaDynamicUpgradeJobCreate(ctx context.Context, in *dm.DynamicUpgradeJobReq) (*dm.UpgradeJobResp, error) {
	l := otajobmanagelogic.NewOtaDynamicUpgradeJobCreateLogic(ctx, s.svcCtx)
	return l.OtaDynamicUpgradeJobCreate(in)
}

// 获取升级包下的升级任务批次列表
func (s *OTAJobManageServer) OtaJobByFirmwareIndex(ctx context.Context, in *dm.OtaJobByFirmwareIndexReq) (*dm.OtaJobInfoIndexResp, error) {
	l := otajobmanagelogic.NewOtaJobByFirmwareIndexLogic(ctx, s.svcCtx)
	return l.OtaJobByFirmwareIndex(in)
}

// 获取设备所在的升级包升级批次列表
func (s *OTAJobManageServer) OtaJobByDeviceIndex(ctx context.Context, in *dm.OtaJobByDeviceIndexReq) (*dm.OtaJobInfoIndexResp, error) {
	l := otajobmanagelogic.NewOtaJobByDeviceIndexLogic(ctx, s.svcCtx)
	return l.OtaJobByDeviceIndex(in)
}

// 查询指定升级批次的详情
func (s *OTAJobManageServer) OtaJobRead(ctx context.Context, in *dm.JobReq) (*dm.OtaJobInfo, error) {
	l := otajobmanagelogic.NewOtaJobReadLogic(ctx, s.svcCtx)
	return l.OtaJobRead(in)
}

// 取消动态升级策略
func (s *OTAJobManageServer) CancelOTAStrategyByJob(ctx context.Context, in *dm.JobReq) (*dm.Empty, error) {
	l := otajobmanagelogic.NewCancelOTAStrategyByJobLogic(ctx, s.svcCtx)
	return l.CancelOTAStrategyByJob(in)
}
