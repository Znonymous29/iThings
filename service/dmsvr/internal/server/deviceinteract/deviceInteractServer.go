// Code generated by goctl. DO NOT EDIT.
// Source: dm.proto

package server

import (
	"context"

	"github.com/i-Things/things/service/dmsvr/internal/logic/deviceinteract"
	"github.com/i-Things/things/service/dmsvr/internal/svc"
	"github.com/i-Things/things/service/dmsvr/pb/dm"
)

type DeviceInteractServer struct {
	svcCtx *svc.ServiceContext
	dm.UnimplementedDeviceInteractServer
}

func NewDeviceInteractServer(svcCtx *svc.ServiceContext) *DeviceInteractServer {
	return &DeviceInteractServer{
		svcCtx: svcCtx,
	}
}

// 调用设备行为
func (s *DeviceInteractServer) SendAction(ctx context.Context, in *dm.SendActionReq) (*dm.SendActionResp, error) {
	l := deviceinteractlogic.NewSendActionLogic(ctx, s.svcCtx)
	return l.SendAction(in)
}

// 获取异步调用设备行为的结果
func (s *DeviceInteractServer) ActionRead(ctx context.Context, in *dm.RespReadReq) (*dm.SendActionResp, error) {
	l := deviceinteractlogic.NewActionReadLogic(ctx, s.svcCtx)
	return l.ActionRead(in)
}

// 回复调用设备行为
func (s *DeviceInteractServer) RespAction(ctx context.Context, in *dm.RespActionReq) (*dm.Response, error) {
	l := deviceinteractlogic.NewRespActionLogic(ctx, s.svcCtx)
	return l.RespAction(in)
}

// 请求设备获取设备最新属性
func (s *DeviceInteractServer) GetPropertyLatestReply(ctx context.Context, in *dm.GetPropertyLatestReplyReq) (*dm.GetPropertyLatestReplyResp, error) {
	l := deviceinteractlogic.NewGetPropertyLatestReplyLogic(ctx, s.svcCtx)
	return l.GetPropertyLatestReply(in)
}

// 调用设备属性
func (s *DeviceInteractServer) SendPropertyControl(ctx context.Context, in *dm.SendPropertyControlReq) (*dm.SendPropertyControlResp, error) {
	l := deviceinteractlogic.NewSendPropertyControlLogic(ctx, s.svcCtx)
	return l.SendPropertyControl(in)
}

// 批量调用设备属性
func (s *DeviceInteractServer) MultiSendPropertyControl(ctx context.Context, in *dm.MultiSendPropertyControlReq) (*dm.MultiSendPropertyControlResp, error) {
	l := deviceinteractlogic.NewMultiSendPropertyControlLogic(ctx, s.svcCtx)
	return l.MultiSendPropertyControl(in)
}

// 获取异步调用设备属性的结果
func (s *DeviceInteractServer) PropertyControlRead(ctx context.Context, in *dm.RespReadReq) (*dm.SendPropertyControlResp, error) {
	l := deviceinteractlogic.NewPropertyControlReadLogic(ctx, s.svcCtx)
	return l.PropertyControlRead(in)
}

// 发送消息给设备
func (s *DeviceInteractServer) SendMsg(ctx context.Context, in *dm.SendMsgReq) (*dm.SendMsgResp, error) {
	l := deviceinteractlogic.NewSendMsgLogic(ctx, s.svcCtx)
	return l.SendMsg(in)
}
