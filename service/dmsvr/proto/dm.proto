syntax = "proto3";
option go_package = "pb/dm";

//import "proto/schemaInfo.proto";
package dm;

import "google/protobuf/wrappers.proto";

message Empty {
}

message TimeRange{
  int64 start = 1;
  int64 end = 2;
}

message PageInfo{
  int64 page = 1;
  int64 size = 2;
  //排序信息
  repeated OrderBy orders = 3;
  message OrderBy {
    //排序的字段名
    string filed = 1;
    //排序方式：0 aes, 1 desc
    int64 sort = 2;
  }
}

message SendOption {
  int64  timeoutToFail = 1;//超时失败时间
  int64  requestTimeout = 2;//请求超时,超时后会进行重试
  int64  retryInterval = 3;//重试间隔
}

message WithID{
  int64 id = 1;
}

//设备管理
service DeviceManage {
  //鉴定是否是root账号(提供给mqtt broker)
  rpc rootCheck(RootCheckReq)           returns (Empty);
  //新增设备
  rpc deviceInfoCreate(DeviceInfo)     returns (Empty);
  //更新设备
  rpc deviceInfoUpdate(DeviceInfo)     returns (Empty);
  //删除设备
  rpc deviceInfoDelete(DeviceInfoDeleteReq)     returns (Empty);
  //获取设备信息列表
  rpc deviceInfoIndex(DeviceInfoIndexReq)     returns (DeviceInfoIndexResp);
  //批量更新设备状态
  rpc DeviceInfoMultiUpdate(DeviceInfoMultiUpdateReq)     returns (Empty);
  //获取设备信息详情
  rpc deviceInfoRead(DeviceInfoReadReq)     returns (DeviceInfo);

  //绑定网关下子设备设备
  rpc deviceGatewayMultiCreate(DeviceGatewayMultiCreateReq)     returns (Empty);
  //获取绑定信息的设备信息列表
  rpc deviceGatewayIndex(DeviceGatewayIndexReq)     returns (DeviceGatewayIndexResp);
  //删除网关下子设备
  rpc deviceGatewayMultiDelete(DeviceGatewayMultiDeleteReq)     returns (Empty);

  //设备计数
  rpc deviceInfoCount(DeviceInfoCountReq) returns (DeviceInfoCount);
  //设备类型
  rpc deviceTypeCount(DeviceTypeCountReq) returns (DeviceTypeCountResp);

  rpc deviceCount(DeviceCountReq) returns (DeviceCountResp);
}

//产品管理
service ProductManage{
  /*产品管理*/
  //新增产品
  rpc productInfoCreate(ProductInfo)     returns (Empty);
  //更新产品
  rpc productInfoUpdate(ProductInfo)     returns (Empty);
  //删除产品
  rpc productInfoDelete(ProductInfoDeleteReq)     returns (Empty);
  //获取产品信息列表
  rpc productInfoIndex(ProductInfoIndexReq)     returns (ProductInfoIndexResp);
  //获取产品信息详情
  rpc productInfoRead(ProductInfoReadReq)     returns (ProductInfo);

  /*物模型管理*/
  //更新产品物模型
  rpc productSchemaUpdate(ProductSchemaUpdateReq)returns (Empty);
  //新增产品
  rpc productSchemaCreate(ProductSchemaCreateReq)     returns (Empty);
  //删除产品
  rpc productSchemaDelete(ProductSchemaDeleteReq)     returns (Empty);
  //获取产品信息列表
  rpc productSchemaIndex(ProductSchemaIndexReq)     returns (ProductSchemaIndexResp);
  //删除产品
  rpc productSchemaTslImport(ProductSchemaTslImportReq)     returns (Empty);
  //获取产品信息列表
  rpc productSchemaTslRead(ProductSchemaTslReadReq)     returns (ProductSchemaTslReadResp);

  /*脚本管理*/
  rpc productCustomRead(ProductCustomReadReq) returns (ProductCustom);
  rpc productCustomUpdate(ProductCustom) returns (Empty);


  /*产品类型*/
  //新增产品
  rpc productCategoryCreate(ProductCategory)     returns (WithID);
  //更新产品
  rpc productCategoryUpdate(ProductCategory)     returns (Empty);
  //删除产品
  rpc productCategoryDelete(WithID)     returns (Empty);
  //获取产品信息列表
  rpc productCategoryIndex(ProductCategoryIndexReq)     returns (ProductCategoryIndexResp);
  //获取产品信息详情
  rpc productCategoryRead(WithID)     returns (ProductCategory);


}


//公共物模型管理
service SchemaManage{
  //更新产品物模型
  rpc commonSchemaUpdate(CommonSchemaUpdateReq)returns (Empty);
  //新增产品
  rpc commonSchemaCreate(CommonSchemaCreateReq)     returns (Empty);
  //删除产品
  rpc commonSchemaDelete(WithID)     returns (Empty);
  //获取产品信息列表
  rpc commonSchemaIndex(CommonSchemaIndexReq)     returns (CommonSchemaIndexResp);

}

service ProtocolManage {
  //协议列表
  rpc protocolInfoIndex(ProtocolInfoIndexReq)     returns (ProtocolInfoIndexResp);
//  //协议详情
//  rpc protocolRead(ProtocolReadReq)     returns (Protocol);
//  //协议创建
//  rpc protocolCreate(ProtocolCreateReq)     returns (Response);
//  //协议更新
//  rpc protocolUpdate(ProtocolUpdateReq)     returns (Response);
//  //协议删除
//  rpc protocolDelete(ProtocolDeleteReq)     returns (Response);
}

service DeviceGroup {
  //创建分组
  rpc groupInfoCreate(GroupInfo)     returns (WithID);
  //获取分组信息列表
  rpc groupInfoIndex(GroupInfoIndexReq)     returns (GroupInfoIndexResp);
  //获取分组信息详情
  rpc groupInfoRead(WithID)     returns (GroupInfo);
  //更新分组
  rpc groupInfoUpdate(GroupInfo)     returns (Empty);
  //删除分组
  rpc groupInfoDelete(WithID)     returns (Empty);
  //创建分组设备
  rpc groupDeviceMultiCreate(GroupDeviceMultiSaveReq)     returns (Empty);
  //更新分组设备
  rpc groupDeviceMultiUpdate(GroupDeviceMultiSaveReq)     returns (Empty);
  //获取分组设备信息列表
  rpc groupDeviceIndex(GroupDeviceIndexReq)     returns (GroupDeviceIndexResp);
  //删除分组设备
  rpc groupDeviceMultiDelete(GroupDeviceMultiDeleteReq)     returns (Empty);
}

service RemoteConfig {
  rpc RemoteConfigCreate(RemoteConfigCreateReq) returns (Empty);
  rpc RemoteConfigIndex(RemoteConfigIndexReq) returns (RemoteConfigIndexResp);
  rpc RemoteConfigPushAll(RemoteConfigPushAllReq) returns (Empty);
  rpc RemoteConfigLastRead(RemoteConfigLastReadReq) returns (RemoteConfigLastReadResp);
}

//设备消息
service DeviceMsg {
  //获取设备sdk调试日志
  rpc sdkLogIndex(SdkLogIndexReq) returns (SdkLogIndexResp);
  //获取设备调试信息记录登入登出,操作
  rpc hubLogIndex(HubLogIndexReq)   returns (HubLogIndexResp);
  //获取设备数据信息
  rpc propertyLatestIndex(PropertyLatestIndexReq)     returns (PropertyIndexResp);
  //获取设备数据信息
  rpc propertyLogIndex(PropertyLogIndexReq)     returns (PropertyIndexResp);
  //获取设备数据信息
  rpc eventLogIndex(EventLogIndexReq)     returns (EventIndexResp);
  //获取设备影子列表
  rpc shadowIndex(PropertyLatestIndexReq)     returns (ShadowIndexResp);

  //主动触发单个设备ota升级推送
  rpc otaPromptIndex(OtaPromptIndexReq) returns (OtaPromptIndexResp);
}

//设备交互
service DeviceInteract {
  //调用设备行为
  rpc actionSend(ActionSendReq)         returns(ActionSendResp);
  //获取异步调用设备行为的结果
  rpc actionRead(RespReadReq)         returns(ActionSendResp);

  //回复调用设备行为
  rpc actionResp(ActionRespReq)         returns(Empty);

  //请求设备获取设备最新属性
  rpc propertyGetReportSend(PropertyGetReportSendReq) returns(PropertyGetReportSendResp);

  //调用设备属性
  rpc propertyControlSend(PropertyControlSendReq)     returns(PropertyControlSendResp);
  //批量调用设备属性
  rpc propertyControlMultiSend(PropertyControlMultiSendReq)     returns(PropertyControlMultiSendResp);
  //获取异步调用设备属性的结果
  rpc propertyControlRead(RespReadReq)  returns(PropertyControlSendResp);
  //发送消息给设备 -- 调试使用
  rpc sendMsg(SendMsgReq)     returns(SendMsgResp);
}


//ota固件管理
service FirmwareManage {
  //新增固件升级包
  rpc FirmwareInfoCreate(Firmware) returns (FirmwareResp);

  rpc FirmwareInfoUpdate(FirmwareInfo) returns (OtaCommonResp);

  rpc FirmwareInfoDelete(FirmwareInfoDeleteReq) returns (FirmwareInfoDeleteResp);

  rpc FirmwareInfoIndex(FirmwareInfoIndexReq) returns (FirmwareInfoIndexResp);

  rpc FirmwareInfoRead(FirmwareInfoReadReq) returns (FirmwareInfoReadResp);
  //附件信息更新
  rpc OtaFirmwareFileUpdate(OtaFirmwareFileReq) returns (OtaFirmwareFileResp);
  //附件列表搜索
  rpc OtaFirmwareFileIndex(OtaFirmwareFileIndexReq) returns (OtaFirmwareFileIndexResp);
  //获取固件包对应设备版本列表
  rpc OtaFirmwareDeviceInfo(OtaFirmwareDeviceInfoReq) returns (OtaFirmwareDeviceInfoResp);
}

//ota升级任务管理
service OtaTaskManage {
  //创建批量升级任务
  rpc OtaTaskCreate(OtaTaskCreateReq) returns (OtaTaskCreatResp);

  rpc OtaTaskUpdate(OtaTaskInfo) returns (OtaCommonResp);
  //批量取消升级任务
  rpc OtaTaskCancle(OtaTaskCancleReq) returns (OtaCommonResp);

  rpc OtaTaskIndex(OtaTaskIndexReq) returns (OtaTaskIndexResp);
  //升级任务详情
  rpc OtaTaskRead(OtaTaskReadReq) returns (OtaTaskReadResp);
  //升级批次详情列表
  rpc OtaTaskDeviceIndex(OtaTaskDeviceIndexReq) returns (OtaTaskDeviceIndexResp);
  //设备升级状态详情
  rpc OtaTaskDeviceRead(OtaTaskDeviceReadReq) returns (OtaTaskDeviceInfo);
  //获取当前可执行批次信息
  rpc OtaTaskDeviceEnableBatch(OtaTaskBatchReq) returns (OtaTaskBatchResp);
  //升级进度上报
  rpc OtaTaskDeviceProcess(OtaTaskDeviceProcessReq) returns (OtaCommonResp);
  //取消单个设备的升级
  rpc OtaTaskDeviceCancle(OtaTaskDeviceCancleReq) returns (OtaCommonResp);
}

service userDevice{
  //用户收藏的设备
  rpc userDeviceCollectMultiCreate(UserDeviceCollectSave)returns(Empty);
  rpc userDeviceCollectMultiDelete(UserDeviceCollectSave)returns(Empty);
  rpc userDeviceCollectIndex(Empty)returns(UserDeviceCollectSave);

  //分享设备
  rpc userDeviceShareCreate(UserDeviceShareInfo)returns(WithID);
  //更新权限
  rpc userDeviceShareUpdate(UserDeviceShareInfo)returns(Empty);
  //取消分享设备
  rpc userDeviceShareDelete(WithID)returns(Empty);
  //获取设备分享列表(只有设备的所有者才能获取)
  rpc userDeviceShareIndex(UserDeviceShareIndexReq)returns(UserDeviceShareIndexResp);
  //获取设备分享的详情
  rpc userDeviceShareRead(UserDeviceShareReadReq)returns(UserDeviceShareInfo);
}
message UserDeviceShareReadReq{
  int64 id = 1;
  DeviceCore device = 2;//设备信息
}

message UserDeviceShareIndexReq{
  PageInfo page = 1;
  DeviceCore device = 2;//设备信息
}

message UserDeviceShareIndexResp{
  repeated UserDeviceShareInfo list = 1;
  int64 total = 2;
}

message UserDeviceShareInfo{
  int64 id = 1;
  DeviceCore device = 2;//设备信息
  int64 userID = 3;//分享的对象
  repeated string schemaPerm = 4;//物模型权限,只需要填写需要授权并授权的物模型id
  repeated string accessPerm = 5;//操作权限 hubLog:设备消息记录,ota:ota升级权限,deviceTiming:设备定时
}


message UserDeviceCollectSave{
  repeated DeviceCore devices = 1;
}


message ProductCategory{
  int64 id = 1;
  string name = 2;
  string headImg =3;
  bool isUpdateHeadImg = 4;//只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
  google.protobuf.StringValue desc = 5;
}

message ProductCategoryIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  string  name = 2; //过滤名字
}

message ProductCategoryIndexResp{
  repeated ProductCategory list = 1;//产品信息
  int64  total = 2;//总数(只有分页的时候会返回)
}


message ProtocolInfoIndexReq{
  PageInfo page = 1;
  string protocol = 2;
}

message ProtocolInfoIndexResp{
  repeated ProtocolInfo list = 1;
  int64 total = 2;
}

message ProtocolInfo{
  int64  id = 1;
  string  name = 2;
  string  protocol = 3;
  string  protocolType = 4;
  string  desc = 5;
  repeated string  endpoints = 6;
  string  etcdKey = 7;
}

message ShadowIndexResp{
  repeated ShadowIndex  list = 1;
}
/*设备的日志数据*/
message ShadowIndex{
  string dataID = 1;//属性id
  string value = 2;//获取到的值
  int64 updatedDeviceTime = 3;//更新到设备的时间
}

message PropertyGetReportSendReq{
  string productID = 1; //产品id (必填)
  string deviceName = 2; //设备名(必填)
  repeated string dataIDs = 3; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
}

message PropertyGetReportSendResp{
  int64   code = 1;//设备返回状态码
  string  msg = 2;//返回状态
  string msgToken = 3;//调用id
  int64 timestamp = 4;//上报时间戳(毫秒时间戳)
  string params = 5;//获取到的值
}

/*获取对应日志信息*/
message PropertyLogIndexReq{
  PageInfo page = 1;//使用了聚合函数及间隔的时候无效
  repeated string deviceNames = 3; //设备名(不填获取产品下所有设备)
  string productID = 4; //产品id (必填)
  string dataID = 5; //获取的具体标识符的数据(必填)
  int64 timeStart = 6;//获取时间的开始(毫秒时间戳)
  int64 timeEnd = 7;//时间的结束(毫秒时间戳)
  int64 interval = 8;//间隔(单位毫秒) 如果这个值不为零值 则时间的开始和结束必须有效及聚合函数不应该为空
  string argFunc = 9;//聚合函数 avg:平均值 first:第一个参数 last:最后一个参数 count:总数 twa: 时间加权平均函数 参考:https://docs.taosdata.com/taos-sql/function
  //  /*
  //  FILL 语句指定某一窗口区间数据缺失的情况下的填充模式。填充模式包括以下几种：
  //    不进行填充：NONE（默认填充模式）。
  //    VALUE 填充：固定值填充，此时需要指定填充的数值。例如：FILL(VALUE, 1.23)。
  //    PREV 填充：使用前一个非 NULL 值填充数据。例如：FILL(PREV)。
  //    NULL 填充：使用 NULL 填充数据。例如：FILL(NULL)。
  //    LINEAR 填充：根据前后距离最近的非 NULL 值做线性插值填充。例如：FILL(LINEAR)。
  //    NEXT 填充：使用下一个非 NULL 值填充数据。例如：FILL(NEXT)。
  //  */
  string fill = 10; //填充模式 参考:https://docs.taosdata.com/taos-sql/distinguished/
  int32 order = 11; //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
}

/*获取对应日志信息*/
message PropertyLatestIndexReq{
  string productID = 2; //产品id (必填)
  string deviceName = 1; //设备名(必填)
  repeated string dataIDs = 3; //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

/*设备的日志数据*/
message PropertyIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string dataID = 3;//属性id
  string value = 4;//获取到的值
}

/*获取对应日志信息*/
message PropertyIndexResp{
  int64 total = 1; //总数
  repeated PropertyIndex list = 2;
}

/*获取对应日志信息*/
message EventLogIndexReq{
  PageInfo page = 1;//使用了聚合函数及间隔的时候无效
  string productID = 2; //产品id (必填)
  repeated string deviceNames = 3; //设备名(不填获取产品下所有设备)
  string dataID = 4; //获取的具体标识符的数据(必填)
  int64 timeStart = 5;//获取时间的开始(毫秒时间戳)
  int64 timeEnd = 6;//时间的结束(毫秒时间戳)
  repeated string types = 7; //类型 事件类型: 信息:info  告警alert  故障:fault
}

/*设备的日志数据*/
message EventIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string type = 2 ;// 事件类型: 信息:info  告警alert  故障:fault
  string dataID = 3;//属性id
  string params = 4;//获取到的值
}

/*获取对应日志信息*/
message EventIndexResp{
  int64 total = 1; //总数
  repeated EventIndex list = 2;
}

/*实时获取对应信息*/
message HubLogIndexReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始(毫秒时间戳)
  int64   timeEnd = 4;//时间的结束(毫秒时间戳)
  PageInfo   page = 5;//分页信息
  repeated string actions = 6;//过滤操作类型 connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
  repeated string topics = 7;//过滤主题
  string content = 8;//过滤内容
  string requestID = 9;//过滤请求ID
}

/*实时获取对应信息*/
message HubLogIndexResp{
  int64 total = 1; //总数
  repeated HubLogIndex list = 2;
}

/*设备的日志数据*/
message HubLogIndex{
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  string action = 2 ;//操作类型;connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
  string requestID = 3;//请求ID
  string tranceID = 4;//服务器端事务id
  string topic = 5;//主题
  string content = 6;//具体内容
  int64 resultType = 7;//请求结果状态
}

/*获取sdk调试日志信息*/
message SdkLogIndexReq {
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  int64   timeStart = 3;//获取时间的开始
  int64   timeEnd = 4;//时间的结束
  int64   logLevel = 5; //日志等级
  PageInfo page = 6;//分页信息 只获取一个则不填
}
/*sdk调试日志信息*/
message SdkLogIndexResp {
  int64 total = 1; //总数
  repeated SdkLogIndex list = 2;
}
message SdkLogIndex {
  int64 timestamp = 1;//发生时间戳(毫秒时间戳)
  int64 loglevel = 2 ;//操作类型;显示相应的操作名称、API名称、服务的method
  string content = 3;//具体内容
}


message ActionSendReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string actionID = 3;//产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
  string inputParams = 4;//输入参数
  bool isAsync = 5;//是否异步获取
  SendOption option = 6;//异步选项
}

message ActionSendResp{
  string msgToken = 1;//调用id
  string outputParams = 2;//输出参数 注意：此字段可能返回 null，表示取不到有效值。
  string  msg = 3;//返回状态
  int64   code = 4;//设备返回状态码
}

//获取异步消息的请求
message RespReadReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  string  msgToken = 3;//调用id
}

message PropertyControlSendReq{
  string  productID = 1; //产品id
  string  deviceName = 2; //设备名
  string data = 3;//属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
  int64 shadowControl = 4;//设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
  bool isAsync = 6;//是否异步操作 异步情况通过获取接口来获取
}

message ActionRespReq{
  string  productID = 1; //产品id 获取产品id下的所有设备信息
  string  deviceName = 2; //设备名
  string msgToken = 3;//调用id
  string outputParams = 4;//输出参数 注意：此字段可能返回 null，表示取不到有效值。
  string  msg = 5;//返回状态
  int64   code = 6;//设备返回状态码
}


message PropertyControlSendResp{
  int64   code = 1;//设备返回状态码
  string  msg = 2;//返回状态
  string msgToken = 3;//调用id
}

message SendMsgReq{
  string topic = 1; //发送的topic
  bytes payload = 2;//发送的数据
}

message SendMsgResp{

}



message PropertyControlMultiSendReq{
  string  productID = 1; //产品id
  repeated string deviceNames = 2; //设备名
  repeated DeviceCore devices =3;//如果是不同的产品,则传这个字段,上面两个参数填了优先使用
  int64 shadowControl = 4;//设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
  string data = 5;//属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
}
message PropertyControlSendMsg{
  string productID =1;
  string  deviceName = 2; //设备名
  int64   code = 3;//设备返回状态码
  string  msg = 4;//返回状态
  string msgToken = 5;//调用id
  string sysMsg = 6;//系统错误信息
  int64  sysCode = 7;//系统错误码
}

message PropertyControlMultiSendResp{
  repeated PropertyControlSendMsg list = 1; //批量设备返回结果列表
}

message OtaPromptIndexReq {
  int64 id = 1;
  string version = 2;
  string module = 3;
  string productID = 4;
  string deviceName = 5;
}
message OtaPromptIndexResp {
  int64 id = 1;
  string taskUid = 2;
  int64 firmwareID = 3;
}


message ProductRemoteConfig{
  int64 id = 1;
  string productID = 2;
  string content = 3;
  int64 createdTime = 4;
}

message RemoteConfigCreateReq{
  string productID = 1;
  string content = 2;
}

message RemoteConfigIndexReq{
  PageInfo page = 1;
  string productID = 2;
}

message RemoteConfigIndexResp{
  repeated ProductRemoteConfig list = 1;
  int64 total = 2;
}

message RemoteConfigPushAllReq{
  string productID = 1;
}

message RemoteConfigLastReadReq{
  string productID = 1;
}

message RemoteConfigLastReadResp{
  ProductRemoteConfig info = 1;
}

message ProductCustomReadReq{
  string productID = 1;
}

message ProductCustom{
  string productID = 1;
  int64 scriptLang = 3;//脚本语言类型（默认JavaScript） 1:JavaScript 2:lua 3:python
  google.protobuf.StringValue transformScript = 2;//协议转换脚本
  google.protobuf.StringValue loginAuthScript = 5;//登录认证脚本
  repeated CustomTopic customTopics = 4;//自定义topic信息 只有mqtt协议有用
}

message CustomTopic{
  string topic = 1;//自定义主题需要以$custom 并包含设备名称{deviceName}及产品名称{productID}
  int64 direction = 2; //1:上行 2:下行 3:双向
}

message DeviceGatewayBindDevice{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
  DeviceGatewaySign sign = 3;//签名
}

message DeviceGatewaySign{
  /*
     子设备绑定签名串。 签名算法：
     1. 签名原串，将产品 ID 设备名称，随机数，时间戳拼接：text=${product_id}${device_name};${random};${expiration_time}
     2. 使用设备 Psk 密钥，或者证书的 Sha1 摘要，进行签名：hmac_sha1(device_secret, text)
   */
  string signature = 3;
  int64  random = 4; //随机数。
  int64 timestamp = 5; //时间戳，单位：秒。
  string    signMethod = 6; //签名算法。支持 hmacsha1、hmacsha256
}

message DeviceGatewayMultiCreateReq{
  string gatewayProductID = 1;
  string gatewayDeviceName = 2;
  bool isAuthSign = 3;//是否校验设备签名
  repeated DeviceGatewayBindDevice list = 4;
}


message DeviceGatewayIndexReq{
  PageInfo page = 1;
  DeviceCore gateway = 2;//获取网关下子设备列表
  DeviceCore subDevice = 3; //获取子设备绑定的网关列表
}

message DeviceGatewayIndexResp{
  repeated DeviceInfo list = 1;
  int64 total = 2;
}

message DeviceGatewayMultiDeleteReq{
  string gatewayProductID = 1;
  string gatewayDeviceName = 2;
  repeated DeviceCore list = 3;
}

message GroupInfo{
  int64 areaID = 10;//分组可以属于某个区域下
  int64 projectID = 3;
  int64 id = 1;
  int64 parentID = 2;
  string name = 4;
  string desc = 5;
  int64 createdTime = 6;
  map<string, string> tags = 7;
  string productID = 8;
  string productName = 9;
//  DeviceInfoCount deviceInfoCount =11;
}

message GroupInfoCreateReq{
  int64 areaID = 5;//分组可以属于某个区域下
  string name = 1;
  int64 parentID = 2;
  string productID = 3;
  string desc = 4;
}

message GroupInfoIndexReq{
  int64 areaID = 5;//分组可以属于某个区域下
  PageInfo page = 1;
  string name = 2;
  int64 parentID = 3;
  map<string, string> tags = 4;
}
message GroupInfoIndexResp{
  repeated GroupInfo list = 1;
  int64 total = 2;
 // repeated GroupInfo listAll = 3;
}



message GroupInfoUpdateReq{
  int64 id = 1;
  string name = 2;
  string desc = 3;
  map<string, string> tags = 4;
  string productID = 5;
}



message GroupDeviceMultiSaveReq{
  int64 groupID = 1;
  repeated DeviceCore list = 2;
}

message GroupDeviceIndexReq{
  PageInfo page = 1;
  int64 groupID = 2;
  string productID = 3;
  string deviceName = 4;
}

message GroupDeviceIndexResp{
  repeated DeviceInfo list = 1;
  int64 total = 2;
}

message GroupDeviceMultiDeleteReq{
  int64 groupID = 1;
  repeated DeviceCore list = 2;
}

message Point{
  double  longitude = 1;//经度
  double  latitude = 2;//纬度
}

message DeviceInfo {
  string productID = 1; //产品id 只读
  int64 projectID = 2; //项目id 只读
  int64 areaID = 3; //项目区域id
  string productName = 4; //产品名称 只读
  string deviceName = 5; //设备名称 读写
  int64 createdTime = 6; //创建时间 只读
  string secret = 7; //设备秘钥 只读
  string cert = 8;// 设备证书  只读
  string imei = 9; //IMEI号信息 只读
  string mac = 10; //MAC号信息 只读
  google.protobuf.StringValue version = 11; // 固件版本  读写
  string hardInfo = 12; //模组硬件型号 只读
  string softInfo = 13; //模组软件版本 只读
  Point Position = 14;   //设备定位,默认百度坐标系
  google.protobuf.StringValue address = 15; // 所在地址 读写
  map<string, string> tags = 16;//设备标签
  int64 isOnline = 17; //在线状态  1离线 2在线 只读
  int64 firstLogin = 18; //激活时间 只读
  int64 lastLogin = 19; //最后上线时间 只读
  int64 logLevel = 20; // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
  google.protobuf.StringValue  deviceAlias = 21; //设备别名 读写
  int64 mobileOperator = 22;//移动运营商:1)移动 2)联通 3)电信 4)广电
  google.protobuf.StringValue phone = 23;//手机号
  google.protobuf.StringValue iccid = 24;//SIM卡卡号
}

message ProductInfo{
  int64   createdTime = 1; //创建时间 只读
  string   productID = 2; //产品id 只读
  string  productName = 3; //产品名称
  int64   authMode = 4;//认证方式:1:账密认证,2:秘钥认证
  int64   deviceType = 5;//设备类型:1:设备,2:网关,3:子设备
  int64   categoryID = 6;//产品品类
  int64   netType = 7;//通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
  int64   dataProto = 8;//数据协议:1:自定义,2:数据模板
  int64   autoRegister = 9;//动态注册:1:关闭,2:打开,3:打开并自动创建设备
  string   secret = 10;//动态注册产品秘钥 只读
  google.protobuf.StringValue   desc = 11;//描述
  google.protobuf.StringValue   devStatus = 12; // 产品状态
  map<string, string> tags = 13; //产品标签
  string productImg = 14; //产品图片
  bool isUpdateProductImg = 15;//只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
}

message ProductInfoDeleteReq{
  string   productID = 1; //产品id
}

message ProductInfoReadReq{
  string   productID = 1; //产品id
}

message ProductInfoIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  int64  deviceType = 2; //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
  string  productName = 3; //过滤条件: 产品名称
  repeated string   productIDs = 4; //过滤产品id列表
  map<string, string> tags = 5;//key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
}

message ProductInfoIndexResp{
  repeated ProductInfo list = 1;//产品信息
  int64  total = 2;//总数(只有分页的时候会返回)
}

message DeviceInfoDeleteReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceCore{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceInfoReadReq{
  string   productID = 1; //产品id
  string  deviceName = 2; //设备名称
}

message DeviceInfoMultiUpdateReq{
  repeated DeviceCore   devices = 1; //产品id
  int64 areaID = 2; //项目区域id
}

message DeviceInfoIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  string  productID = 2; //过滤条件: 产品id
  string deviceName = 3;//过滤条件:模糊查询 设备名
  repeated string deviceNames = 4;//过滤条件:精准查询 设备名
  map<string, string> tags = 5;//key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
  int64 range = 6; //过滤条件:取距离坐标点固定范围内的设备
  Point Position = 7;   //设备定位,默认百度坐标系
  repeated int64 areaIDs = 8;//区域ids
  string deviceAlias = 9; //过滤条件:模糊查询 设备别名
  int64 isOnline = 10; //在线状态过滤  1离线 2在线
  int64  productCategoryID = 11;//产品品类id
  repeated DeviceCore devices =12;
  int64 isShared = 13;//过滤分享的设备(这里只获取分享的设备)
}

message DeviceInfoIndexResp{
  repeated DeviceInfo list = 1;//设备信息
  int64  total = 2;//总数(只有分页的时候会返回)
}




/*
上面是设备管理模块的消息
*/




/*
下面是设备管理模块的消息
*/


message RootCheckReq{
  string username = 1;//用户名
  string password = 2;//密码
  string clientID = 3;//clientID
  string ip = 4;//访问的ip地址
  bytes certificate = 5;//客户端证书
}

message CommonSchemaUpdateReq{
  CommonSchemaInfo info = 1;//物模型信息

}



message CommonSchemaCreateReq{
  CommonSchemaInfo info = 1;//物模型信息
}



message CommonSchemaIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  repeated string productIDs = 2; //有这个属性的产品id列表
  int64  type = 3; //物模型类型 1:property属性 2:event事件 3:action行为
  repeated string   identifiers = 5; //过滤标识符列表
}

message CommonSchemaIndexResp{
  repeated CommonSchemaInfo list = 1;
  int64  total = 2;//总数(只有分页的时候会返回)
}


message CommonSchemaInfo{
  int64 id =1;
  int64 type = 2;         //物模型类型 1:property属性 2:event事件 3:action行为
  string identifier = 4;           //标识符
  google.protobuf.StringValue name = 5;       //功能名称
  google.protobuf.StringValue desc = 6;       //描述
  int64 required = 7;  //是否必须 1:是 2:否
  int64 isCanSceneLinkage =8;//是否支持场景联动控制
  int64 isShareAuthPerm = 9;// 分享是否需要校验权限
  int64 isHistory = 10;// 是否存储历史记录
  google.protobuf.StringValue affordance = 11;//各功能类型的详细参数定义
  string extendConfig = 12; //拓展参数
  int64 order =13;//排序
}

/*********************************/


message ProductSchemaUpdateReq{
  ProductSchemaInfo info = 1;//物模型信息

}



message ProductSchemaCreateReq{
  ProductSchemaInfo info = 1;//物模型信息
}

message ProductSchemaDeleteReq{
  string productID = 1; //产品id  如果为空返回所有产品的信息
  string identifier = 2;           //标识符

}

message ProductSchemaIndexReq{
  PageInfo page = 1;//分页信息 只获取一个则不填
  string productID = 2; //产品id  必填
  int64  type = 3; //物模型类型 1:property属性 2:event事件 3:action行为
  int64  tag = 4; //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
  repeated string   identifiers = 5; //过滤标识符列表
}

message ProductSchemaIndexResp{
  repeated ProductSchemaInfo list = 1;
  int64  total = 2;//总数(只有分页的时候会返回)
}

message ProductSchemaInfo{
  string productID = 1; //产品id  必填
  int64 type = 2;         //物模型类型 1:property属性 2:event事件 3:action行为
  int64 tag = 3;         //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
  string identifier = 4;           //标识符
  google.protobuf.StringValue name = 5;       //功能名称
  google.protobuf.StringValue desc = 6;       //描述
  int64 required = 7;  //是否必须 1:是 2:否
  int64 isCanSceneLinkage =8;//是否支持场景联动控制
  int64 isShareAuthPerm = 9;// 分享是否需要校验权限
  int64 isHistory = 10;// 是否存储历史记录
  google.protobuf.StringValue affordance = 11;//各功能类型的详细参数定义
  string extendConfig = 12; //拓展参数
  int64 order =13;//排序
}



message ProductSchemaTslImportReq{
  string   productID = 1; //产品id
  string   tsl = 2;//物模型tsl
}

message ProductSchemaTslReadReq{
  string   productID = 1; //产品id
}

message ProductSchemaTslReadResp{
  string   tsl = 1;//物模型tsl
}

message DeviceCountReq {
  repeated string countTypes =1;//在线设备数:status,设备类型: deviceType
  int64  rangeType =2;//0:全部 1:area 2:group
  repeated int64  rangeIDs =3;////统计的id列表, areaID或者groupID
}

message DeviceCountResp{
  repeated DeviceCountInfo list = 1;
}

message DeviceCountInfo{
    int64 rangeID =1;
    map<string,int64> count=2;
}

message DeviceInfoCountReq {
    TimeRange timeRange =1;
    repeated int64  areaIDs =2;
    repeated int64  groupIDs =3;
}

message DeviceTypeCountReq{
  TimeRange timeRange =1;
  repeated int64  areaIDs =2;
  repeated int64  groupIDs =3;
}

message DeviceInfoCount{
  int64 online = 1;
  int64 offline = 2;
  int64 inactive = 3;
  int64 unknown = 4;
  int64 total =5;
}

message DeviceTypeCountResp{
  int64 device = 1;
  int64 gateway = 2;
  int64 subset = 3;
  int64 unknown = 4;
}



//----------------------------------------------------------------------------------------------


/*
下面是ota固件管理模块的消息
*/
message Firmware {
  int64   createdTime = 1; //创建时间 只读
  int64 firmwareID = 2;
  string productID = 3;
  string name = 4; //升级包名称
  string version = 5; //升级包版本
  int32 isDiff = 6; //是否差分包,1:整包,2:差分
  string signMethod = 7; //签名方法 MD5/SHA
  google.protobuf.StringValue   desc = 8;//描述
  google.protobuf.StringValue   extData = 9;//自定义数据
  repeated OtaFirmwareFile files = 10;//产品信息
}
message FirmwareResp{
  int64 firmwareID = 1;
}
message FirmwareInfo {
  int64   createdTime = 1; //创建时间 只读
  int64 firmwareID = 2;
  string productID = 3;
  string productName = 4;
  string name = 5; //升级包名称
  string version = 6; //升级包版本
  int32 isDiff = 7; //是否差分包,1:整包,2:差分
  string signMethod = 8; //签名方法 MD5/SHA
  google.protobuf.StringValue   desc = 9;//描述
  google.protobuf.StringValue   extData = 10;//自定义数据
  repeated OtaFirmwareFile files = 11;//产品信息
}
message OtaFirmwareFile {
  string filePath = 1;
  string name = 2;
}
message FirmwareInfoDeleteReq {
  int64 firmwareID = 1;
}
message FirmwareInfoDeleteResp {
  repeated string path = 1;
}
message FirmwareInfoIndexReq {
  OtaPageInfo page = 1;//分页信息 只获取一个则不填
  int64 firmwareID = 2;
  string productID = 3;
}
message FirmwareInfoIndexResp {
  repeated FirmwareInfo list = 1;//固件信息
  int64  total = 2;//总数(只有分页的时候会返回)
}
message FirmwareInfoReadReq {
  int64 firmwareID = 1;
}
message OtaFirmwareFileReq{
  int64 fileID = 1;
  string name = 2;
  string host = 3;
  string filePath = 4;
  int64 size = 5;
  string storage = 6;
  string signMethod = 7;
  string signature = 8;
}
message OtaFirmwareFileInfo{
  int64 fileID = 1;
  int64 firmwareID = 2;
  string name = 3;
  string host = 4;
  string filePath = 5;
  int64 size = 6;
  string storage = 7;
  string signMethod = 8;
  string signature = 9;
}
message OtaFirmwareFileResp{
  int64 fileID = 1;
  string name = 2;
  string host = 3;
  string filePath = 4;
  int64 size = 5;
  string storage = 6;
  //string signMethod = 7;
  string signature = 7;
}
message OtaFirmwareFileIndexReq{
  OtaPageInfo page = 1;
  int64 firmwareID = 2;
  google.protobuf.Int64Value size = 3;
}
message OtaFirmwareFileIndexResp{
  repeated OtaFirmwareFileInfo list = 1;
  int64 total = 2;
}
message FirmwareInfoReadResp{
  int64   createdTime = 1; //创建时间 只读
  int64 firmwareID = 2;
  string productID = 3;
  string productName = 4;
  string name = 5; //升级包名称
  string version = 6; //升级包版本
  int32 isDiff = 7; //是否差分包,1:整包,2:差分
  string signMethod = 8;
  google.protobuf.StringValue   desc = 10;//描述
  google.protobuf.StringValue   extData = 11;//自定义数据
  repeated OtaFirmwareFileResp files = 12;//产品信息
}
message OtaFirmwareDeviceInfoReq{
  int64 firmwareID = 1;
}
message OtaFirmwareDeviceInfoResp{
  string versions = 1;
}
/*
下面是ota升级任务管理模块的消息
*/
message OtaTaskCreateReq {
  int64 firmwareID = 1;
  string taskUid = 2;
  int32 type = 3;
  int32 upgradeType = 4;
  int32 autoRepeat = 5;
  google.protobuf.StringValue deviceList = 6;
  google.protobuf.StringValue versionList = 7;
}
message OtaTaskCreatResp{
  int64 taskID = 1;
}
message OtaTaskInfo {
  int64 taskID = 1;
  int64 firmwareID = 2;
  string productID = 3;
  string taskUid = 4;
  int32 type = 5;
  int32 upgradeType = 6;
  int32 autoRepeat = 7;
  int32 status = 8; //升级状态:1未升级2升级中3完成4已取消
  google.protobuf.StringValue deviceList = 9;
  google.protobuf.StringValue versionList = 10;
  int64   createdTime = 11; //创建时间 只读
}
message OtaTaskCancleReq{
  int64 taskID = 1;
}
message OtaTaskIndexReq{
  OtaPageInfo page = 1;
  int64 firmwareID = 2;
  int64 productID = 3;
}
message OtaTaskIndexResp{
  repeated OtaTaskInfo list = 1;
  int64 total = 2;
}
message OtaTaskReadReq{
  int64 taskID = 1;
}
message OtaTaskReadResp{
  int64 taskID = 1;
  int64 firmwareID = 2;
  string taskUid = 3; //批次号
  int32 type = 4; //升级范围1全部设备2定向升级
  int32 upgradeType = 5; //升级策略:1静态升级2动态升级
  int32 autoRepeat = 6; //是否自动重试,1:不,2自动重试
  int32 status = 7; //升级状态:1未升级2升级中3完成4已取消
  google.protobuf.StringValue deviceList = 8;
  google.protobuf.StringValue versionList = 9;
  int64   createdTime = 10;
}

message OtaTaskDeviceIndexReq {
  OtaPageInfo page = 1;
  int64 firmwareID = 2;
  string taskUid = 3; //批次号
  string deviceName = 4; //设备
  int32 status = 5; //状态
}
message OtaTaskDeviceIndexResp {
  repeated OtaTaskDeviceInfo list = 1;
  int64 total = 2;
}
message OtaTaskDeviceInfo {
  int64 ID = 1;
  int64 firmwareID = 2;
  string deviceName = 3;
  string productID = 4;
  string productName = 5;
  string taskUid = 6; //批次号
  int32 status = 7; //升级状态:101待确认 201/202/203待推送 301已推送 401升级中 501升级成功 601升级失败 701已取消
  string version = 8; //当前版本号
  string desc = 9; //状态详情
  int64   retryCount = 10; //重试次数,计划最多20次
  int64   updatedTime = 11; //创建时间 只读
}
message OtaTaskDeviceReadReq {
  int64 ID = 1;
}
message OtaTaskBatchReq {
  int64 ID = 1;
  string productID = 2;
  string deviceName = 3;
  string version = 4;
  string module = 5;
}
message OtaTaskBatchResp {
  int64 ID = 1;
  string taskUid = 2;
  int64 firmwareID = 3;
}
message OtaTaskDeviceProcessReq {
  int64 ID = 1;
  int64 step = 2;
  string module = 3;
  string desc = 4;
  string productId = 5;
  string deviceName = 6;
}
message OtaTaskDeviceCancleReq {
  int64 ID = 1;
}
message OtaPageInfo{
  int64 page = 1;
  int64 size = 2;
}
message OtaCommonResp {
}

//新的ota功能实现
service OTAFirmwareManage{
  //添加升级包
  rpc otaFirmwareCreate(OtaFirmwareCreateReq) returns (OtaFirmwareResp);
  //修改升级包
  rpc otaFirmwareUpdate(OtaFirmwareUpdateReq) returns (OtaFirmwareResp);
  //删除升级包
  rpc otaFirmwareDelete(OtaFirmwareDeleteReq) returns(Empty);
  //升级包列表
  rpc otaFirmwareIndex(OtaFirmwareIndexReq) returns(OtaFirmwareIndexResp);
  //查询升级包
  rpc otaFirmwareRead(OtaFirmwareReadReq) returns(OtaFirmwareReadResp);
}

message FirmwareFile {
  string name = 1;
  int64 size = 2;
  string filePath = 3;
  string signature = 4;
  string fileMd5 = 5;
}

message OtaFirmwareCreateReq {
  string productID = 2; //产品id
  string firmwareName = 3; //固件升级包名称
  /**
  当前OTA升级包的版本号，仅支持英文字母、数字、半角句号（.）、短划线（-）和下划线（_）。长度限制为1~64个字符。
   */
  string destVersion = 4; //版本号
  /**
  OTA升级包签名方法。取值：
  MD5（默认）：MD5签名。
  SHA256：SHA256签名。
   */
  string signMethod = 6; //签名方法
  string firmwareDesc = 9; //文件描述
  /**
  OTA升级包类型。可选：
  0：整包升级包，您上传的升级包文件包含完整的升级包，将推送整包升级包给设备进行升级。
  1：差分升级包，您上传的升级包文件仅包含新版本升级包与之前版本的差异部分，仅推送差异部分给设备进行升级。
  不传入此参数，则默认值为0。
   */
  int64 isDiff = 10; //升级包类型
  string module = 11; //模块名称
  string srcVersion = 12;
  bool needToVerify = 13;//是否需要验证
  google.protobuf.StringValue firmwareUdi = 14;//自定义数据
  repeated FirmwareFile firmwareFiles = 15;
}
message OtaFirmwareResp{
  int64 firmwareID = 1;
}

message OtaFirmwareUpdateReq {
  int64 firmwareId = 1; //固件id
  string firmwareName = 2; //固件升级包名称
  string firmwareDesc = 3; //文件描述
  google.protobuf.StringValue firmwareUdi = 14;//推送设备端的信息
}

message OtaFirmwareDeleteReq {
  int64 firmwareId = 1; //固件id
}

message OtaFirmwareIndexReq{
  PageInfo page = 1; //分页
  string productID = 2; //产品id
  string firmwareName = 3; //产品名称
  string moduleName = 4; //模块名称
}

message OtaFirmwareIndexResp{
  repeated OtaFirmwareInfo list = 1;
  int64 total = 2;
}
message OtaFirmwareInfo{
  int64 firmwareId = 1; //固件id
  string firmwareName = 2; //固件升级包名称
  string destVersion = 3; //版本号
  string productID = 4;//产品id
  string productName = 5; //产品名称
  int64 status = 6; //状态
  int64 createdTime = 7; //添加时间
}

message OtaFirmwareReadReq {
  int64 firmwareId = 1; //固件id
}

message OtaFirmwareReadResp{
  int64 firmwareId = 1; //固件id
  string firmwareName = 2; //固件升级包名称
  string destVersion = 3; //版本号
  string productID = 4;//产品id
  string productName = 5; //产品名称
  int64 status = 6; //状态
  int64 createdTime = 7; //添加时间
  string signMethod = 8; //签名方法
  string firmwareDesc = 9; //文件描述
  string firmwareUdi = 10; //推给设备端端消息
  repeated FirmwareFile firmwareFileList = 11; //文件列表
  int64 isDiff = 12; //整包or差包
  string module = 13;
}
service OTAJobManage{
  //验证升级包
  rpc otaVerifyJobCreate(OtaFirmwareVerifyReq) returns (UpgradeJobResp);
  //创建静态升级批次
  rpc otaStaticUpgradeJobCreate(StaticUpgradeJobReq) returns(UpgradeJobResp);
  //创建动态升级批次
  rpc otaDynamicUpgradeJobCreate(DynamicUpgradeJobReq) returns (UpgradeJobResp);
  //获取升级包下的升级任务批次列表
  rpc otaJobByFirmwareIndex(OtaJobByFirmwareIndexReq) returns(OtaJobInfoIndexResp);
  //获取设备所在的升级包升级批次列表
  rpc otaJobByDeviceIndex(OtaJobByDeviceIndexReq) returns(OtaJobInfoIndexResp);
  //查询指定升级批次的详情
  rpc otaJobRead(JobReq) returns(OtaJobInfo);
  //取消动态升级策略
  rpc cancelOTAStrategyByJob(JobReq) returns (Empty);
}

message OtaFirmwareVerifyReq{
  int64 firmwareId = 1; //固件id
  string productID = 2;//产品id
  repeated Tag tags = 3; //标签
  repeated string deviceNames = 4; //产品名称
  repeated string srcVersion = 5;
  int64 timeoutInMinutes = 6; //超时时间
  int64 needConfirm = 8; //是否需要自主控制
  string downloadProtocol = 9; //下载协议
}
message UpgradeJobResp{
  int64 jobId = 1; //jobId
  string UtcCreate = 2; //OTA升级包验证任务的创建时间，UTC格式。
}
message Tag{
  string key = 1; //标签key
  string value = 2; //标签value
}
message StaticUpgradeDeviceInfo{
  string deviceName = 1;
  string srcVersion = 2;
  string productId = 3;
}
message StaticUpgradeJobReq{
  int64 firmwareId = 1;
  string productId = 2;
  Tag tag = 3;
  int64 targetSelection = 4;
  int64 scheduleTime = 5;
  int64 retryInterval = 6;
  int64 retryCount = 7;
  int64 timeoutInMinutes = 8;
  int64 maximumPerMinute = 9;
  int64 grayPercent = 10;
  int64 scheduleFinishTime = 11;
  int64 overwriteMode = 12;
  int64 needPush = 13;
  int64 needConfirm = 14;
  int64 groupId = 15;
  string groupType = 16;
  string downloadProtocol = 17;
  string multiModuleMode = 18;
  repeated StaticUpgradeDeviceInfo deviceInfo = 19;
}

message DynamicUpgradeJobReq{
  int64 firmwareId = 1;
  string productId = 2;
  Tag tag = 3;
  repeated string srcVersion = 4;
  int64 retryInterval = 5;
  int64 retryCount = 6;
  int64 timeoutInMinutes = 7;
  int64 maximumPerMinute = 8;
  int64 overwriteMode = 9;
  int64 dynamicMode = 10;
  int64 needPush = 11;
  int64 needConfirm = 12;
  int64 groupId = 13;
  string groupType = 14;
  string downloadProtocol = 15;
  string multiModuleMode = 16;
  int64 targetSelection = 17;
  repeated StaticUpgradeDeviceInfo deviceInfo = 18;
}
message OtaJobByFirmwareIndexReq{
  PageInfo pageInfo = 1;
  int64 firmwareId = 2;
}
message OtaJobInfo{
  int64 firmwareId = 1;
  int64 jobId = 2 ;
  string jobStatus = 3;
  string jobType = 4;
  int64 productId = 5;
  string upgradeType = 6;
  repeated Tag tagList = 7;
  string targetSelection = 8;
  string utcCreate = 9;
  string utcEndTime = 10;
  string utcModified = 11;
  string utcStartTime = 12;
}
message OtaJobInfoIndexResp{
  repeated OtaJobInfo otaJobInfo = 1;
  int64 total = 2;
}

message OtaJobByDeviceIndexReq{
  PageInfo pageInfo = 1;
  int64 firmwareId = 2;
  string productId = 3;
  string deviceName = 4;
}
message JobReq{
  int64 jobId = 1;
}

service OTAUpgradeTaskManage{
  //查询指定升级批次下的设备升级作业列表
  rpc otaTaskByJobIndex(OTATaskByJobIndexReq) returns(OtaTaskByJobIndexResp);
  //取消指定批次下的设备升级作业
  rpc otaTaskByJobCancel(OTATaskByJobCancelReq) returns(Empty);
  //取消指定OTA升级包下状态为待确认、待推送、已推送、升级中状态的设备升级作业
  rpc otaTaskByDeviceCancel(OTATaskByDeviceCancelReq) returns(Empty);
  //批量确认，处于待确认状态的设备升级作业
  rpc otaTaskConfirm(OTATaskConfirmReq) returns(Empty);
  //查询指定设备下，未完成状态的设备升级作业
  rpc otaUnfinishedTaskByDeviceIndex(OTAUnfinishedTaskByDeviceIndexReq) returns(OTAUnfinishedTaskByDeviceIndexResp);
  //重新升级指定批次下升级失败或升级取消的设备升级作业
  rpc otaTaskReUpgrade(OTATaskReUpgradeReq) returns(Empty);
}
message OTATaskByJobIndexReq{
  PageInfo pageInfo = 1;
  int64 jobId = 2;
  int64 taskStatus = 3;
  repeated string deviceName = 4;
}
message OtaUpTaskInfo{
  int64 firmwareId = 1;
  int64 jobId =2 ;
  int64 taskId = 3;
  string productId = 4;
  string productName = 5;
  string progress = 6;
  string srcVersion = 7;
  string destVersion = 8;
  string deviceName = 9;
  string taskDesc = 10;
  string taskStatus = 11;
  string timeout = 12;
  string utcCreate = 13;
  string utcModified = 14;
}
message OtaTaskByJobIndexResp{
  repeated OtaUpTaskInfo otaUpTaskInfo = 1;
  int64 total=2;
}

message OTATaskByJobCancelReq{
  int64 jobId = 1;
  int64 cancelScheduledTask =2;
  int64 cancelQueuedTask =3;
  int64 cancelInProgressTask = 4;
  int64 cancelNotifiedTask = 5;
  int64 cancelUnconfirmedTask = 6;
}
message OTATaskByDeviceCancelReq{
  string productId = 1;
  int64 firmwareId = 2;
  repeated string deviceName = 3;
  int64 jobId = 4;
}

message OTATaskByDeviceNameReq{
  string productId = 1;
  string deviceName = 2;
  string moduleName = 3;
}

message OTATaskConfirmReq{
  repeated int64 taskId = 1;
}

message OTAUnfinishedTaskByDeviceIndexReq{
  string moduleName = 1;
  repeated string taskStatusList = 2;
  string productId = 3;
  string deviceName = 4;
}
message OTAUnfinishedTaskByDeviceIndexResp{
  repeated OtaUpTaskInfo otaUpTaskInfoList = 1;
}

message OTATaskReUpgradeReq{
  int64 jobId = 1;
  repeated int64 taskId = 2;
}
message VerifyOtaFirmwareReq{
  int64 firmwareId = 1; //固件id
  string productID = 2;//产品id
  repeated Tag tags = 3; //标签
  repeated string deviceNames = 4; //产品名称
  int64 timeoutInMinutes = 5; //超时时间
  int64 needPush = 6; //是否需要主动推送
  int64 needConfirm = 7; //是否需要自主控制
  string downloadProtocol = 8; //下载协议
}

service OTAModuleManage{
  //创建产品的OTA模块
  rpc otaModuleCreate(OTAModuleReq) returns(Empty);
  //修改OTA模块别名、描述
  rpc otaModuleUpdate(OTAModuleReq) returns(Empty);
  //删除自定义OTA模块
  rpc otaModuleDelete(OTAModuleDeleteReq) returns(Empty);
  //查询产品下的OTA模块列表
  rpc otaModuleByProductIndex(OTAModuleIndexReq) returns(OTAModuleIndexResp);
  //查询设备上报过的OTA模块版本列表
  rpc otaModuleVersionsByDeviceIndex(OTAModuleIndexReq) returns(OTAModuleVersionsIndexResp);
}

message OTAModuleReq{
  string moduleName = 1;
  string productId = 2;
  string aliasName = 3;
  string desc = 4;
}

message OTAModuleDeleteReq{
  string moduleName = 1;
  string productId = 2;
}

message OTAModuleIndexResp{
  repeated OtaModuleInfo otaModuleInfoList = 1;
  int64 total=2;
}

message OtaModuleInfo{
  string aliasName = 1;
  string desc = 2;
  string gmtCreate = 3;
  string gmtModified = 4;
  string moduleName = 5;
  string productId = 6;
}

message OTAModuleIndexReq{
  PageInfo pageInfo = 1;
  string productId = 2;
  string deviceName = 3;
}

message OTAModuleDetail{
  string deviceName = 1;
  string moduleName = 2;
  string moduleVersion = 3;
  string productId = 4;
}

message OTAModuleVersionsIndexResp{
  repeated OTAModuleDetail otaModuleDetailList=1;
  int64 total = 2;
}







