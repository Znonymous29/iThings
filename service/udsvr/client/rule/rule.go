// Code generated by goctl. DO NOT EDIT.
// Source: ud.proto

package rule

import (
	"context"

	"github.com/i-Things/things/service/udsvr/internal/svc"
	"github.com/i-Things/things/service/udsvr/pb/ud"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeviceCore            = ud.DeviceCore
	Empty                 = ud.Empty
	OpsWorkOrder          = ud.OpsWorkOrder
	OpsWorkOrderIndexReq  = ud.OpsWorkOrderIndexReq
	OpsWorkOrderIndexResp = ud.OpsWorkOrderIndexResp
	PageInfo              = ud.PageInfo
	SceneInfo             = ud.SceneInfo
	SceneInfoIndexReq     = ud.SceneInfoIndexReq
	SceneInfoIndexResp    = ud.SceneInfoIndexResp
	TimeRange             = ud.TimeRange
	UserCollectDeviceSave = ud.UserCollectDeviceSave
	WithID                = ud.WithID

	Rule interface {
		// 场景
		SceneInfoCreate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*WithID, error)
		SceneInfoUpdate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*Empty, error)
		SceneInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
		SceneInfoIndex(ctx context.Context, in *SceneInfoIndexReq, opts ...grpc.CallOption) (*SceneInfoIndexResp, error)
		SceneInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*SceneInfo, error)
		SceneManuallyTrigger(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultRule struct {
		cli zrpc.Client
	}

	directRule struct {
		svcCtx *svc.ServiceContext
		svr    ud.RuleServer
	}
)

func NewRule(cli zrpc.Client) Rule {
	return &defaultRule{
		cli: cli,
	}
}

func NewDirectRule(svcCtx *svc.ServiceContext, svr ud.RuleServer) Rule {
	return &directRule{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

// 场景
func (m *defaultRule) SceneInfoCreate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*WithID, error) {
	client := ud.NewRuleClient(m.cli.Conn())
	return client.SceneInfoCreate(ctx, in, opts...)
}

// 场景
func (d *directRule) SceneInfoCreate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*WithID, error) {
	return d.svr.SceneInfoCreate(ctx, in)
}

func (m *defaultRule) SceneInfoUpdate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*Empty, error) {
	client := ud.NewRuleClient(m.cli.Conn())
	return client.SceneInfoUpdate(ctx, in, opts...)
}

func (d *directRule) SceneInfoUpdate(ctx context.Context, in *SceneInfo, opts ...grpc.CallOption) (*Empty, error) {
	return d.svr.SceneInfoUpdate(ctx, in)
}

func (m *defaultRule) SceneInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	client := ud.NewRuleClient(m.cli.Conn())
	return client.SceneInfoDelete(ctx, in, opts...)
}

func (d *directRule) SceneInfoDelete(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	return d.svr.SceneInfoDelete(ctx, in)
}

func (m *defaultRule) SceneInfoIndex(ctx context.Context, in *SceneInfoIndexReq, opts ...grpc.CallOption) (*SceneInfoIndexResp, error) {
	client := ud.NewRuleClient(m.cli.Conn())
	return client.SceneInfoIndex(ctx, in, opts...)
}

func (d *directRule) SceneInfoIndex(ctx context.Context, in *SceneInfoIndexReq, opts ...grpc.CallOption) (*SceneInfoIndexResp, error) {
	return d.svr.SceneInfoIndex(ctx, in)
}

func (m *defaultRule) SceneInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*SceneInfo, error) {
	client := ud.NewRuleClient(m.cli.Conn())
	return client.SceneInfoRead(ctx, in, opts...)
}

func (d *directRule) SceneInfoRead(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*SceneInfo, error) {
	return d.svr.SceneInfoRead(ctx, in)
}

func (m *defaultRule) SceneManuallyTrigger(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	client := ud.NewRuleClient(m.cli.Conn())
	return client.SceneManuallyTrigger(ctx, in, opts...)
}

func (d *directRule) SceneManuallyTrigger(ctx context.Context, in *WithID, opts ...grpc.CallOption) (*Empty, error) {
	return d.svr.SceneManuallyTrigger(ctx, in)
}
