// Code generated by goctl. DO NOT EDIT.
package types

type CodeReq struct {
	Code string `json:"code"`
}

type CommonResp struct {
	ID int64 `json:"id,optional"` // id
}

type CommonSchemaCreateReq struct {
	*CommonSchemaInfo
}

type CommonSchemaDeleteReq struct {
	ID int64 `json:"id"` //产品id
}

type CommonSchemaIndexReq struct {
	Page        *PageInfo `json:"page,optional"`        //分页信息,只获取一个则不填
	Type        int64     `json:"type,optional"`        //物模型类型 1:property属性 2:event事件 3:action行为
	Identifiers []string  `json:"identifiers,optional"` //过滤标识符列表
	ProductIDs  []string  `json:"productIDs,optional"`  //提取产品共有的物模型
}

type CommonSchemaIndexResp struct {
	List  []*CommonSchemaInfo `json:"list"`  //分页信息,只获取一个则不填
	Total int64               `json:"total"` //总数(只有分页的时候会返回)
}

type CommonSchemaInfo struct {
	ID                int64   `json:"id,optional"`                //产品id
	Type              int64   `json:"type,optional"`              //物模型类型 1:property属性 2:event事件 3:action行为
	Identifier        string  `json:"identifier,optional"`        //标识符
	ExtendConfig      string  `json:"extendConfig,optional"`      //拓展参数
	Name              *string `json:"name,optional"`              //功能名称
	Desc              *string `json:"desc,optional"`              //描述
	Required          int64   `json:"required,optional"`          //是否必须 1:是 2:否
	Affordance        *string `json:"affordance,optional"`        //各功能类型的详细参数定义
	IsCanSceneLinkage int64   `json:"isCanSceneLinkage,optional"` //是否可以场景联动
	IsShareAuthPerm   int64   `json:"isShareAuthPerm,optional"`   // 分享是否需要校验权限
	IsHistory         int64   `json:"isHistory,optional"`         // 是否存储历史记录
	Order             int64   `json:"order,optional"`             // 排序
}

type CommonSchemaUpdateReq struct {
	*CommonSchemaInfo
}

type DateRange struct {
	Start string `json:"start,optional"` //开始时间 格式：yyyy-mm-dd
	End   string `json:"end,optional"`   //结束时间 格式：yyyy-mm-dd
}

type DeviceAuth5AccessReq struct {
	Username string `json:"username,omitempty"` //用户名
	Topic    string `json:"topic,omitempty"`    //主题
	ClientID string `json:"clientID,omitempty"` //clientID
	Action   string `json:"action,omitempty"`   //操作
	Ip       string `json:"ip,omitempty"`       //访问的ip地址
}

type DeviceAuth5AccessResp struct {
	Result string `json:"result"` //验证结果 "allow" | "deny" | "ignore"
}

type DeviceAuth5LoginReq struct {
	Username    string `json:"username"`                       //用户名
	Password    string `json:"password,optional"`              //密码
	ClientID    string `json:"clientID"`                       //clientID
	Ip          string `json:"ip"`                             //访问的ip地址
	Certificate string `json:"certificate,optional,omitempty"` //客户端证书 base64后传过来
}

type DeviceAuth5LoginResp struct {
	Result      string `json:"result"`                //验证结果 "allow" | "deny" | "ignore"
	IsSuperuser bool   `json:"is_superuser,optional"` //是否为超级用户，可选 true | false，该项为空时默认为 false
}

type DeviceAuthAccessReq struct {
	Username string `json:"username,omitempty"` //用户名
	Topic    string `json:"topic,omitempty"`    //主题
	ClientID string `json:"clientID,omitempty"` //clientID
	Access   string `json:"access,omitempty"`   //操作
	Ip       string `json:"ip,omitempty"`       //访问的ip地址
}

type DeviceAuthLoginReq struct {
	Username    string `json:"username"`                       //用户名
	Password    string `json:"password,optional"`              //密码
	ClientID    string `json:"clientID"`                       //clientID
	Ip          string `json:"ip"`                             //访问的ip地址
	Certificate string `json:"certificate,optional,omitempty"` //客户端证书 base64后传过来
}

type DeviceAuthRootCheckReq struct {
	Username    string `json:"username,omitempty"`             //用户名
	Password    string `json:"password,optional,omitempty"`    //密码
	ClientID    string `json:"clientID,omitempty"`             //clientID
	Ip          string `json:"ip,omitempty"`                   //访问的ip地址
	Certificate []byte `json:"certificate,optional,omitempty"` //客户端证书
}

type DeviceCore struct {
	ProductID  string `json:"productID"`  //产品ID
	DeviceName string `json:"deviceName"` //设备名称
}

type DeviceCountInfo struct {
	RangeID int64            `json:"rangeID,string"`
	Count   map[string]int64 `json:"count"`
}

type DeviceCountReq struct {
	CountTypes []string `json:"countTypes"`       //总数:total,在线设备数:status,设备类型: deviceType
	RangeType  int64    `json:"rangeType,string"` //0:全部 1:area 2:group
	RangeIDs   []int64  `json:"rangeIDs,string"`  //统计的id列表, areaID或者groupID
}

type DeviceCountResp struct {
	List []*DeviceCountInfo `json:"list"`
}

type DeviceGateWayIndexReq struct {
	Page              *PageInfo `json:"page,optional"`     //分页信息 只获取一个则不填
	GateWayProductID  string    `json:"gateWayProductID"`  //产品ID
	GateWayDeviceName string    `json:"gateWaydeviceName"` //设备名称
}

type DeviceGateWayIndexResp struct {
	List  []*DeviceInfo `json:"list"`  //分组信息
	Total int64         `json:"total"` //总数(只有分页的时候会返回)
}

type DeviceGateWayMultiCreateReq struct {
	GateWayProductID  string        `json:"gateWayProductID"`  //产品ID
	GateWayDeviceName string        `json:"gateWaydeviceName"` //设备名称
	List              []*DeviceCore `json:"list,optional"`     //分组tag
}

type DeviceGateWayMultiDeleteReq struct {
	GateWayProductID  string        `json:"gateWayProductID"`  //产品ID
	GateWayDeviceName string        `json:"gateWaydeviceName"` //设备名称
	List              []*DeviceCore `json:"list,optional"`     //分组tag
}

type DeviceInfo struct {
	ProductID      string                             `json:"productID"`                           //产品id 只读
	ProjectID      int64                              `json:"projectID,string,optional"`           //项目id 只读
	AreaID         int64                              `json:"areaID,string,optional"`              //项目区域id 只读
	DeviceName     string                             `json:"deviceName"`                          //设备名称 读写
	DeviceAlias    *string                            `json:"deviceAlias,optional"`                //设备别名 读写
	Secret         string                             `json:"secret,optional"`                     //设备秘钥 只读
	Cert           string                             `json:"cert,optional"`                       // 设备证书  只读
	Imei           string                             `json:"imei,optional"`                       // IMEI号信息 只读
	Mac            string                             `json:"mac,optional"`                        // MAC号信息 只读
	Version        *string                            `json:"version,optional"`                    // 固件版本  读写
	HardInfo       string                             `json:"hardInfo,optional"`                   // 模组硬件型号 只读
	SoftInfo       string                             `json:"softInfo,optional"`                   // 模组软件版本 只读
	MobileOperator int64                              `json:"mobileOperator,optional,range=[0:4]"` //移动运营商:1)移动 2)联通 3)电信 4)广电
	Phone          *string                            `json:"phone,optional"`                      //手机号
	Iccid          *string                            `json:"iccid,optional"`                      //SIM卡卡号
	Position       *Point                             `json:"position,optional"`                   //设备定位,默认百度坐标系
	Address        *string                            `json:"address,optional"`                    //所在地址
	Tags           []*Tag                             `json:"tags,optional"`                       // 设备tag
	IsOnline       int64                              `json:"isOnline,optional,range=[0:2]"`       // 在线状态  1离线 2在线 只读
	FirstLogin     int64                              `json:"firstLogin,optional,string"`          //激活时间 只读
	LastLogin      int64                              `json:"lastLogin,optional,string"`           //最后上线时间 只读
	LogLevel       int64                              `json:"logLevel,optional,range=[0:5]"`       // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	CreatedTime    int64                              `json:"createdTime,optional,string"`         //创建时间 只读
	WithProperties map[string]*DeviceInfoWithProperty `json:"withProperties,optional,omitempty"`   //获取的属性列表,如果不传withProperty,则不会返回
}

type DeviceInfoDeleteReq struct {
	ProductID  string `json:"productID"`  //产品id 只读
	DeviceName string `json:"deviceName"` //设备名称 读写
}

type DeviceInfoIndexReq struct {
	Page              *PageInfo `json:"page,optional"`                 //分页信息 只获取一个则不填
	ProductID         string    `json:"productID,optional"`            //产品id 为空时获取所有产品
	DeviceName        string    `json:"deviceName,optional"`           //过滤条件:模糊查询 设备名
	DeviceAlias       string    `json:"deviceAlias,optional"`          //过滤条件:模糊查询 设备别名
	Position          *Point    `json:"position,optional"`             //设备定位,默认百度坐标系，用于获取以该点为中心，Range范围内的设备列表，与Range连用
	Range             int64     `json:"range,optional"`                //过滤条件:距离坐标点固定范围内的设备 单位：米
	Tags              []*Tag    `json:"tags,optional"`                 // key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
	WithProperties    []string  `json:"withProperties,optional"`       //如果不为nil,如果为空,获取设备所有最新属性 如果传了属性列表,则会返回属性列表,如果没有匹配的则不会返回
	AreaIDs           []int64   `json:"areaIDs,optional"`              //项目区域ids
	IsOnline          int64     `json:"isOnline,optional,range=[0:2]"` // 在线状态过滤  1离线 2在线
	ProductCategoryID int64     `json:"productCategoryID,optional"`
	IsShared          int64     `json:"isShared,optional,range=[0:2]"` // 是否共享  1:是 2:否
}

type DeviceInfoIndexResp struct {
	List  []*DeviceInfo `json:"list"`  //设备信息
	Total int64         `json:"total"` //总数(只有分页的时候会返回)
	Num   int64         `json:"num"`   //返回的数量
}

type DeviceInfoMultiUpdateReq struct {
	Devices []*DeviceCore `json:"devices"`
	AreaID  int64         `json:"areaID,string,optional"`
}

type DeviceInfoReadReq struct {
	ProductID      string   `json:"productID,optional"`      //产品id 为空时获取所有产品
	DeviceName     string   `json:"deviceName"`              //设备名称 读写
	WithProperties []string `json:"withProperties,optional"` //如果不为nil,如果为空,获取设备所有最新属性 如果传了属性列表,则会返回属性列表
}

type DeviceInfoSaveReq struct {
	ProductID      string  `json:"productID"`                           //产品id 只读
	DeviceName     string  `json:"deviceName"`                          //设备名称 读写
	DeviceAlias    *string `json:"deviceAlias,optional"`                //设备别名 读写
	LogLevel       int64   `json:"logLevel,optional,range=[0:5]"`       // 日志级别:1)关闭 2)错误 3)告警 4)信息 5)调试  读写
	Address        *string `json:"address,optional"`                    //所在地址
	Position       *Point  `json:"position,optional"`                   //设备定位,默认百度坐标系
	Tags           []*Tag  `json:"tags,optional"`                       // 设备tag
	Phone          *string `json:"phone,optional"`                      //手机号
	Iccid          *string `json:"iccid,optional"`                      //SIM卡卡号
	UserID         int64   `json:"userID,string,optional"`              // 用户id
	MobileOperator int64   `json:"mobileOperator,optional,range=[0:4]"` //移动运营商:1)移动 2)联通 3)电信 4)广电
	AreaID         int64   `json:"areaID,string,optional"`              //项目区域id 只读（1: root节点 2: 未分类节点 其他:子节点）
}

type DeviceInfoWithProperty struct {
	Value     string `json:"value"`            //获取到的值
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
}

type DeviceInteractMultiSendPropertyMsg struct {
	ProductID  string `json:"productID"`  //产品id
	DeviceName string `json:"deviceName"` //设备名
	Code       int64  `json:"code"`       //设备返回状态码
	Msg        string `json:"msg"`        //返回状态
	MsgToken   string `json:"msgToken"`   //调用id
	SysCode    int64  `json:"sysCode"`    //系统错误码
	SysMsg     string `json:"sysMsg"`     //系统错误信息
}

type DeviceInteractMultiSendPropertyReq struct {
	AreaID        int64         `json:"areaID,string,optional"`  //项目区域id,传了优先从项目区域中获取设备列表
	GroupID       int64         `json:"groupID,string,optional"` //分组ID,传了会从分组下获取设备
	ProductID     string        `json:"productID,optional"`      //产品id
	DeviceNames   []string      `json:"deviceNames,optional"`    //设备名列表
	Devices       []*DeviceCore `json:"devices"`                 //如果是不同的产品,则传这个字段,上面两个参数填了优先使用
	ShadowControl int64         `json:"shadowControl,optional"`  //设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
	Data          string        `json:"data"`                    //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
}

type DeviceInteractMultiSendPropertyResp struct {
	List []*DeviceInteractMultiSendPropertyMsg `json:"list"` //批量设备返回结果列表
}

type DeviceInteractPropertyGetReportSendReq struct {
	ProductID  string   `json:"productID"`        //产品id (必填)
	DeviceName string   `json:"deviceName"`       //设备名(必填)
	DataIDs    []string `json:"dataIDs,optional"` //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条
}

type DeviceInteractPropertyGetReportSendResp struct {
	Code      int64  `json:"code"`      //设备返回状态码
	Msg       string `json:"msg"`       //返回状态
	MsgToken  string `json:"msgToken"`  //调用id
	Timestamp int64  `json:"timestamp"` //上报时间戳(毫秒时间戳)
	Params    string `json:"params"`    //获取到的值
}

type DeviceInteractRespReadReq struct {
	ProductID  string `json:"productID"`  //产品id
	DeviceName string `json:"deviceName"` //设备名
	MsgToken   string `json:"msgToken"`   //调用id
}

type DeviceInteractSendActionReq struct {
	ProductID   string      `json:"productID"`        //产品id
	DeviceName  string      `json:"deviceName"`       //设备名
	ActionID    string      `json:"actionID"`         //产品数据模板中行为功能的标识符，由开发者自行根据设备的应用场景定义
	InputParams string      `json:"inputParams"`      //输入参数
	IsAsync     bool        `json:"isAsync,optional"` //是否异步操作 异步情况通过获取接口来获取
	Option      *SendOption `json:"option,optional"`  //异步重试选项
}

type DeviceInteractSendActionResp struct {
	MsgToken     string `json:"msgToken"`     //调用id
	OutputParams string `json:"outputParams"` //输出参数 注意：此字段可能返回 null，表示取不到有效值。
	Msg          string `json:"msg"`          //返回状态
	Code         int64  `json:"code"`         //设备返回状态码
}

type DeviceInteractSendMsgReq struct {
	Topic   string `json:"topic"`   //发送的topic
	Payload string `json:"payload"` //发送的数据
}

type DeviceInteractSendPropertyReq struct {
	ProductID     string `json:"productID"`              //产品id
	DeviceName    string `json:"deviceName"`             //设备名
	Data          string `json:"data"`                   //属性数据, JSON格式字符串, 注意字段需要在物模型属性里定义
	IsAsync       bool   `json:"isAsync,optional"`       //是否异步操作 异步情况通过获取接口来获取
	ShadowControl int64  `json:"shadowControl,optional"` //设备影子控制 0:自动,当设备不在线的时候设置设备影子,设备在线时直接下发给设备 1:只实时下发,不在线报错 2:如果有设备影子只修改影子,没有的也不下发
}

type DeviceInteractSendPropertyResp struct {
	Code     int64  `json:"code"`     //设备返回状态码
	Msg      string `json:"msg"`      //返回状态
	MsgToken string `json:"msgToken"` //调用id
}

type DeviceMsgEventIndex struct {
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
	Type      string `json:"type,omitempty"`   //类型 事件类型: 信息:info  告警alert  故障:fault
	DataID    string `json:"dataID"`           //获取的具体属性值
	Params    string `json:"params,omitempty"` //获取到的值
}

type DeviceMsgEventIndexResp struct {
	List  []*DeviceMsgEventIndex `json:"list"`  //数据
	Total int64                  `json:"total"` //总数
}

type DeviceMsgEventLogIndexReq struct {
	DeviceNames []string  `json:"deviceNames,optional"`                //设备名(不填获取产品下所有设备)
	ProductID   string    `json:"productID,optional"`                  //产品id 获取产品id下的所有设备信息
	DataID      string    `json:"dataID,optional,omitempty"`           //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
	TimeStart   int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd     int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page        *PageInfo `json:"page,optional"`                       //分页信息
	Types       []string  `json:"types,optional"`                      //类型 事件类型: 信息:info  告警alert  故障:fault
}

type DeviceMsgHubLogIndex struct {
	Timestamp  int64  `json:"timestamp,string"`
	Action     string `json:"action"` //connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
	RequestID  string `json:"requestID"`
	TranceID   string `json:"tranceID"`
	Topic      string `json:"topic"`
	Content    string `json:"content"`
	ResultType int64  `json:"resultType,string"`
}

type DeviceMsgHubLogIndexReq struct {
	DeviceName string    `json:"deviceName,omitempty"`                //设备名
	ProductID  string    `json:"productID,omitempty"`                 //产品id 获取产品id下的所有设备信息
	TimeStart  int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd    int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page       *PageInfo `json:"page,optional"`                       //分页信息
	Actions    []string  `json:"actions,optional"`                    //过滤操作类型 connected:上线 disconnected:下线  property:属性 event:事件 action:操作 thing:物模型提交的操作为匹配的日志
	Topics     []string  `json:"topics,optional"`                     //过滤主题
	Content    string    `json:"content,optional"`                    //过滤内容
	RequestID  string    `json:"requestID,optional"`                  //过滤请求ID
}

type DeviceMsgHubLogIndexResp struct {
	List  []*DeviceMsgHubLogIndex `json:"list"`  //数据
	Total int64                   `json:"total"` //总数
}

type DeviceMsgPropertyIndex struct {
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
	DataID    string `json:"dataID"`           //获取的具体属性值
	Value     string `json:"value,omitempty"`  //获取到的值
}

type DeviceMsgPropertyIndexResp struct {
	List  []*DeviceMsgPropertyIndex `json:"list"`  //数据
	Total int64                     `json:"total"` //总数
}

type DeviceMsgPropertyLatestIndexReq struct {
	DeviceName string   `json:"deviceName,omitempty"`       //设备名
	ProductID  string   `json:"productID,omitempty"`        //产品id 获取产品id下的所有设备信息
	DataIDs    []string `json:"dataIDs,optional,omitempty"` //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
}

type DeviceMsgPropertyLogIndexReq struct {
	DeviceNames []string  `json:"deviceNames,omitempty"`               //设备名(不填获取产品下所有设备)
	ProductID   string    `json:"productID,omitempty"`                 //产品id 获取产品id下的所有设备信息
	DataID      string    `json:"dataID,optional,omitempty"`           //获取的具体标识符的数据 如果不指定则获取所有属性数据,一个属性一条,如果没有获取到的不会返回值
	TimeStart   int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd     int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page        *PageInfo `json:"page,optional"`                       //分页信息
	Interval    int64     `json:"interval,optional"`                   //分页信息
	ArgFunc     string    `json:"argFunc,optional"`                    //分页信息
	Fill        string    `json:"fill,optional"`                       //填充模式 参考:https://docs.taosdata.com/taos-sql/distinguished/
	Order       int32     `json:"order,optional"`                      //时间排序 0:aes(默认,从久到近排序) 1:desc(时间从近到久排序)
}

type DeviceMsgSdkIndex struct {
	Timestamp int64  `json:"timestamp,string"` //发生时间戳
	Loglevel  int64  `json:"loglevel"`         //日志级别 1)关闭 2)错误 3)告警 4)信息 5)调试
	Content   string `json:"content"`          //具体内容
}

type DeviceMsgSdkIndexResp struct {
	List  []*DeviceMsgSdkIndex `json:"list"`  //数据
	Total int64                `json:"total"` //总数
}

type DeviceMsgSdkLogIndexReq struct {
	DeviceName string    `json:"deviceName,omitempty"`                //设备名
	ProductID  string    `json:"productID,omitempty"`                 //产品id 获取产品id下的所有设备信息
	TimeStart  int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd    int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	LogLevel   int       `json:"logLevel,optional"`                   //等级
	Page       *PageInfo `json:"page,optional"`                       //分页信息
}

type DeviceMsgShadowIndex struct {
	DataID            string `json:"dataID"`            //属性id
	Value             string `json:"value"`             //获取到的值
	UpdatedDeviceTime int64  `json:"updatedDeviceTime"` //更新到设备的时间
}

type DeviceMsgShadowIndexResp struct {
	List []*DeviceMsgShadowIndex `json:"list"`
}

type DeviceMultiImportErrdata struct {
	Row int64  `json:"row"` //错误所在表格行
	Msg string `json:"msg"` //详细错误信息
}

type DeviceMultiImportReq struct {
	File []byte `form:"file,optional"` //csv文件(实际必填)
}

type DeviceMultiImportResp struct {
	Total   int64                   `json:"total"`   //当前表格数据量
	Headers *DeviceMultiImportRow   `json:"headers"` //表格表头信息
	Errdata []*DeviceMultiImportRow `json:"errdata"` //批量导入错误清单
}

type DeviceMultiImportRow struct {
	Row         int64  `json:"row"`         //【提示】数据所在表格行
	ProductName string `json:"productName"` //【必填】产品名称
	DeviceName  string `json:"deviceName"`  //【必填】设备名称
	DeviceAlias string `json:"deviceAlias"` //【选填】设备别名
	Secret      string `json:"secret"`      //【选填】设备秘钥
	LogLevel    string `json:"logLevel"`    //【选填】日志级别（关闭/错误/告警/信息/调试）
	Tags        string `json:"tags"`        //【选填】设备标签（格式k1:v1;k2:v2;...）
	Position    string `json:"position"`    //【选填】设备位置百度坐标（格式:经,纬）
	Address     string `json:"address"`     //【选填】设备所在详细地址
	Tips        string `json:"tips"`        //【提示】模板使用提示
}

type DeviceRegisterReq struct {
	ProductID  string `json:"productID"`  //产品id 只读
	DeviceName string `json:"deviceName"` //设备名称 读写
	Nonce      int64  `json:"nonce"`      //随机数
	Timestamp  int64  `json:"timestamp"`  //秒级时间戳
	Signature  string `json:"signature"`  //签名信息
}

type DeviceRegisterResp struct {
	Len     int64  `json:"len"` //payload加密前信息的长度
	Payload string `json:"payload"`
}

type DynamicUpgradeJobReq struct {
	FirmwareID       int64    `json:"firmwareId"`       // 固件ID
	ProductID        string   `json:"productId"`        // 产品ID
	Tag              Tag      `json:"tag"`              // 标签
	SrcVersions      []string `json:"srcVersion"`       // 源版本列表
	RetryInterval    int64    `json:"retryInterval"`    // 重试间隔
	RetryCount       int64    `json:"retryCount"`       // 重试次数
	TimeoutInMinutes int64    `json:"timeoutInMinutes"` // 超时时间（分钟）
	MaximumPerMinute int64    `json:"maximumPerMinute"` // 每分钟最大升级数
	OverwriteMode    int64    `json:"overwriteMode"`    // 覆盖模式
	DynamicMode      int64    `json:"dynamicMode"`      // 动态模式
	NeedPush         int64    `json:"needPush"`         // 是否需要主动推送
	NeedConfirm      int64    `json:"needConfirm"`      // 是否需要自主控制
	GroupID          int64    `json:"groupId"`          // 分组ID
	GroupType        string   `json:"groupType"`        // 分组类型
	DownloadProtocol string   `json:"downloadProtocol"` // 下载协议
	MultiModuleMode  string   `json:"multiModuleMode"`  // 多模块模式
	TargetSelection  int64    `json:"targetSelection"`  // 目标选择
}

type FirmwareCreateReq struct {
	ProductID     string          `json:"productID"`
	FirmwareName  string          `json:"firmwareName"`
	DestVersion   string          `json:"destVersion"`
	SignMethod    string          `json:"signMethod"`
	FirmwareDesc  string          `json:"firmwareDesc"`
	IsDiff        int64           `json:"isDiff"`
	Module        string          `json:"module"`
	SrcVersion    string          `json:"srcVersion"`
	NeedToVerify  bool            `json:"needToVerify"`
	FirmwareUdi   string          `json:"firmwareUdi"`
	FirmwareFiles []*FirmwareFile `json:"firmwareFiles"`
}

type FirmwareDeleteReq struct {
	FirmwareID int64 `json:"firmwareId"`
}

type FirmwareFile struct {
	Name     string `json:"name"`
	FilePath string `json:"filePath"`
}

type FirmwareIndexReq struct {
	Page         *PageInfo `json:"page"`
	ProductID    string    `json:"productID"`
	FirmwareName string    `json:"firmwareName"`
	ModuleName   string    `json:"moduleName"`
}

type FirmwareIndexResp struct {
	List  []FirmwareInfo `json:"list"`
	Total int64          `json:"total"`
}

type FirmwareInfo struct {
	FirmwareID   int64  `json:"firmwareId"`
	FirmwareName string `json:"firmwareName"`
	DestVersion  string `json:"destVersion"`
	ProductID    string `json:"productID"`
	ProductName  string `json:"productName"`
	Status       int    `json:"status"`
	CreatedTime  int64  `json:"createdTime"`
}

type FirmwareReadReq struct {
	FirmwareID int64 `json:"firmwareId"`
}

type FirmwareReadResp struct {
	FirmwareID       int64           `json:"firmwareId"`
	FirmwareName     string          `json:"firmwareName"`
	DestVersion      string          `json:"destVersion"`
	ProductID        string          `json:"productID"`
	ProductName      string          `json:"productName"`
	Status           int             `json:"status"`
	CreatedTime      int64           `json:"createdTime"`
	SignMethod       string          `json:"signMethod"`
	FirmwareDesc     string          `json:"firmwareDesc"`
	FirmwareUdi      string          `json:"firmwareUdi"`
	FirmwareFileList []*FirmwareFile `json:"firmwareFileList"`
}

type FirmwareResp struct {
	FirmwareID int64 `json:"firmwareID"`
}

type FirmwareUpdateReq struct {
	FirmwareID   int64  `json:"firmwareId"`
	FirmwareName string `json:"firmwareName"`
	FirmwareDesc string `json:"firmwareDesc"`
	FirmwareUdi  string `json:"firmwareUdi"`
}

type GroupDeviceIndexReq struct {
	Page           *PageInfo `json:"page,optional"`           //分页信息 只获取一个则不填
	GroupID        int64     `json:"groupID"`                 //分组ID
	ProductID      string    `json:"productID,optional"`      //产品ID
	DeviceName     string    `json:"deviceName,optional"`     //设备名称
	WithProperties []string  `json:"withProperties,optional"` //如果不为nil,如果为空,获取设备所有最新属性 如果传了属性列表,则会返回属性列表
}

type GroupDeviceIndexResp struct {
	List  []*DeviceInfo `json:"list"`  //分组信息
	Total int64         `json:"total"` //总数(只有分页的时候会返回)
}

type GroupDeviceMultiDeleteReq struct {
	GroupID int64         `json:"groupID"`       //分组ID
	List    []*DeviceCore `json:"list,optional"` //分组tag
}

type GroupDeviceMultiSaveReq struct {
	GroupID int64         `json:"groupID"`       //分组ID
	List    []*DeviceCore `json:"list,optional"` //分组tag
}

type GroupInfo struct {
	ID          int64  `json:"id,optional"`                 //分组ID
	ParentID    int64  `json:"parentID,optional"`           //父组ID
	ProjectID   int64  `json:"projectID,string,optional"`   //项目ID
	AreaID      int64  `json:"areaID,string,optional"`      //区域ID
	Name        string `json:"name,optional"`               //分组名称
	ProductID   string `json:"productID,optional"`          //产品ID
	ProductName string `json:"productName,optional"`        //产品ID
	CreatedTime int64  `json:"createdTime,string,optional"` //创建时间
	Desc        string `json:"desc,optional"`               //分组描述
	Tags        []*Tag `json:"tags,optional"`               //分组tag
}

type GroupInfoIndexReq struct {
	Page      *PageInfo `json:"page,optional"`          //分页信息 只获取一个则不填
	AreaID    int64     `json:"areaID,string,optional"` //区域ID
	ParentID  int64     `json:"parentID,optional"`      //父组ID
	ProductID string    `json:"productID,optional"`     //产品ID
	Name      string    `json:"name,optional"`          //分组名称
	Tags      []*Tag    `json:"tags,optional"`          //分组tag
}

type GroupInfoIndexResp struct {
	List  []*GroupInfo `json:"list"`  //分组信息
	Total int64        `json:"total"` //总数(只有分页的时候会返回)
}

type JobReq struct {
	JobID int64 `json:"jobId"` // 作业ID
}

type OTAModuleDeleteReq struct {
	ModuleName string `json:"moduleName"` // 模块名称
	ProductID  string `json:"productId"`  // 产品ID
}

type OTAModuleDetail struct {
	DeviceName    string `json:"deviceName"`    // 设备名称
	ModuleName    string `json:"moduleName"`    // 模块名称
	ModuleVersion string `json:"moduleVersion"` // 模块版本
	ProductID     string `json:"productId"`     // 产品ID
}

type OTAModuleIndexReq struct {
	PageInfo   PageInfo `json:"pageInfo"`   // 分页信息
	ProductID  string   `json:"productId"`  // 产品ID
	DeviceName string   `json:"deviceName"` // 设备名称
}

type OTAModuleIndexResp struct {
	OtaModuleInfoList []OtaModuleInfo `json:"otaModuleInfoList"` // OTA模块信息列表
	Total             int64           `json:"total"`             // 总数
}

type OTAModuleReq struct {
	ModuleName string `json:"moduleName"` // 模块名称
	ProductID  string `json:"productId"`  // 产品ID
	AliasName  string `json:"aliasName"`  // 别名
	Desc       string `json:"desc"`       // 描述
}

type OTAModuleVersionsIndexResp struct {
	OtaModuleDetailList []OTAModuleDetail `json:"otaModuleDetailList"` // OTA模块详细信息列表
	Total               int64             `json:"total"`               // 总数
}

type OTATaskByDeviceCancelReq struct {
	ProductID  string   `json:"productId"`  // 产品ID
	FirmwareID int64    `json:"firmwareId"` // 固件ID
	DeviceName []string `json:"deviceName"` // 设备名称列表
	JobID      int64    `json:"jobId"`      // 作业ID
}

type OTATaskByJobCancelReq struct {
	JobID                 int64 `json:"jobId"`                 // 作业ID
	CancelScheduledTask   int64 `json:"cancelScheduledTask"`   // 取消已计划的任务
	CancelQueuedTask      int64 `json:"cancelQueuedTask"`      // 取消排队中的任务
	CancelInProgressTask  int64 `json:"cancelInProgressTask"`  // 取消进行中的任务
	CancelNotifiedTask    int64 `json:"cancelNotifiedTask"`    // 取消已通知的任务
	CancelUnconfirmedTask int64 `json:"cancelUnconfirmedTask"` // 取消未确认的任务
}

type OTATaskByJobIndexReq struct {
	PageInfo   PageInfo `json:"pageInfo"`   // 分页信息
	JobID      int64    `json:"jobId"`      // 作业ID
	TaskStatus int64    `json:"taskStatus"` // 任务状态
	DeviceName []string `json:"deviceName"` // 设备名称列表
}

type OTATaskConfirmReq struct {
	TaskIDList []int64 `json:"taskId"` // 任务ID列表
}

type OTATaskReUpgradeReq struct {
	JobID      int64   `json:"jobId"`  // 作业ID
	TaskIDList []int64 `json:"taskId"` // 任务ID列表
}

type OTAUnfinishedTaskByDeviceIndexReq struct {
	ModuleName     string   `json:"moduleName"`     // 模块名称
	TaskStatusList []string `json:"taskStatusList"` // 任务状态列表
	ProductID      string   `json:"productId"`      // 产品ID
	DeviceName     string   `json:"deviceName"`     // 设备名称
}

type OTAUnfinishedTaskByDeviceIndexResp struct {
	OtaUpTaskInfoList []OtaUpTaskInfo `json:"otaUpTaskInfoList"` // 未完成OTA任务信息列表
}

type OpsWorkOrder struct {
	ID          int64  `json:"id,optional"`
	Number      string `json:"number,optional"`                           //编号
	RaiseUserID int64  `json:"raiseUserID,string,optional"`               //问题提出的用户
	AreaID      int64  `json:"areaID,string,optional"`                    //项目区域id
	Type        string `json:"type,optional,options=[deviceMaintenance]"` //工单类型: deviceMaintenance:设备维修工单
	Params      string `json:"params,optional"`                           //参数 json格式
	IssueDesc   string `json:"issueDesc,optional"`                        //问题描述
	Status      int64  `json:"status,optional,range=[0:3]"`               // 状态（1 待处理 2:处理中 3:已完成）
	CreatedTime int64  `json:"createdTime,optional"`                      //创建时间
}

type OpsWorkOrderIndexReq struct {
	Page   *PageInfo `json:"page,optional"` // 分页信息,只获取一个则不填
	Status int64     `json:"status,optional"`
	Type   string    `json:"type"` //工单类型: deviceMaintenance:设备维修工单
}

type OpsWorkOrderIndexResp struct {
	Total int64           `json:"total"` //总数
	List  []*OpsWorkOrder `json:"list"`  //菜单列表
}

type OtaFirmwareCreateReq struct {
	Name       string             `json:"name"`               //升级包名称
	ProductID  string             `json:"productID"`          //产品id
	Version    string             `json:"version"`            //升级包版本
	IsDiff     int32              `json:"isDiff" enums:"1,2"` //是否差分包,1:整包,2:差分
	SignMethod string             `json:"signMethod"`         //签名方法 MD5/SHA@256
	Desc       *string            `json:"desc"`               //描述
	ExtData    *string            `json:"extData"`            //自定义数据
	Files      []*OtaFirmwareFile `json:"files"`              //升级包附件列表，最多支持上传20个文件，总文件大小不能超过1,000 MB。
}

type OtaFirmwareDelReq struct {
	FirmwareID int64 `json:"firmwareID"` //固件升级包编号
}

type OtaFirmwareDeviceInfoReq struct {
	FirmwareID int64 `json:"firmwareID"` //固件升级包编号
}

type OtaFirmwareDeviceInfoResp struct {
	Versions string `json:"versions"`
}

type OtaFirmwareFile struct {
	Filepath string `json:"filePath"` //附件地址，上传附件后接口应该返回
	Name     string `json:"name"`     //附件原名，上传附件后接口应该返回
}

type OtaFirmwareFileInfo struct {
	Uri       string `json:"uri"`       //附件地址
	Name      string `json:"name"`      //附件原名
	Size      int64  `json:"size"`      //文件大小
	Signature string `json:"signature"` //签名值
}

type OtaFirmwareIndex struct {
	FirmwareID  int64  `json:"firmwareID"`         //固件升级包编号
	Name        string `json:"name"`               //升级包名称
	Version     string `json:"version"`            //升级包版本
	ProductID   string `json:"productID"`          //产品id
	ProductName string `json:"productName"`        //产品名称
	IsDiff      int32  `json:"isDiff" enums:"1,2"` //是否差分包,1:整包,2:差分
	CreatedTime int64  `json:"createdTime"`        //创建时间 只读
	SignMethod  string `json:"signMethod"`         //签名方法
}

type OtaFirmwareIndexReq struct {
	ProductID string    `json:"productID,optional,omitempty"`        //产品id 获取产品id下的所有升级包
	TimeStart int64     `json:"timeStart,string,optional,omitempty"` //获取时间的开始
	TimeEnd   int64     `json:"timeEnd,string,optional,omitempty"`   //时间的结束
	Page      *PageInfo `json:"page,optional"`                       //分页信息
}

type OtaFirmwareIndexResp struct {
	List  []*OtaFirmwareIndex `json:"list"`  //数据
	Total int64               `json:"total"` //总数
}

type OtaFirmwareInfo struct {
	FirmwareID  int64   `json:"firmwareID"`         //固件升级包编号
	Name        string  `json:"name"`               //升级包名称
	Version     string  `json:"version"`            //升级包版本
	ProductID   string  `json:"productID"`          //产品id
	ProductName string  `json:"productName"`        //产品名称
	IsDiff      int32   `json:"isDiff" enums:"1,2"` //是否差分包,1:整包,2:差分
	CreatedTime int64   `json:"createdTime"`        //创建时间 只读
	SignMethod  string  `json:"signMethod"`         //签名方法
	Desc        *string `json:"desc"`               //描述
	ExtData     *string `json:"extData"`            //自定义数据
}

type OtaFirmwareInfoUpdateReq struct {
	FirmwareID int64   `json:"firmwareID"` //固件升级包编号
	Name       string  `json:"name"`       //升级包名称
	Desc       *string `json:"desc"`       //描述
	ExtData    *string `json:"extData"`    //自定义数据
}

type OtaFirmwareReadReq struct {
	FirmwareID int64 `json:"firmwareID"` //固件升级包编号
}

type OtaFirmwareReadResp struct {
	FirmwareID  int64                  `json:"firmwareID"`         //固件升级包编号
	Name        string                 `json:"name"`               //升级包名称
	Version     string                 `json:"version"`            //升级包版本
	ProductID   string                 `json:"productID"`          //产品id
	ProductName string                 `json:"productName"`        //产品名称
	IsDiff      int32                  `json:"isDiff" enums:"1,2"` //是否差分包,1:整包,2:差分
	CreatedTime int64                  `json:"createdTime"`        //创建时间 只读
	SignMethod  string                 `json:"signMethod"`         //签名方法
	Desc        *string                `json:"desc"`               //描述
	ExtData     *string                `json:"extData"`            //自定义数据
	Files       []*OtaFirmwareFileInfo `json:"files"`
}

type OtaFirmwareVerifyReq struct {
	FirmwareID       int64    `json:"firmwareId"`       // 固件ID
	ProductID        string   `json:"productID"`        // 产品ID
	Tags             []Tag    `json:"tags"`             // 标签列表
	DeviceNames      []string `json:"deviceNames"`      // 设备名称列表
	SrcVersions      []string `json:"srcVersion"`       // 源版本列表
	TimeoutInMinutes int64    `json:"timeoutInMinutes"` // 超时时间（分钟）
	NeedPush         int64    `json:"needPush"`         // 是否需要主动推送
	NeedConfirm      int64    `json:"needConfirm"`      // 是否需要自主控制
	DownloadProtocol string   `json:"downloadProtocol"` // 下载协议
}

type OtaJobByDeviceIndexReq struct {
	PageInfo   PageInfo `json:"pageInfo"`   // 分页信息
	FirmwareID int64    `json:"firmwareId"` // 固件ID
	ProductID  string   `json:"productId"`  // 产品ID
	DeviceName string   `json:"deviceName"` // 设备名称
}

type OtaJobByFirmwareIndexReq struct {
	PageInfo   PageInfo `json:"pageInfo"`   // 分页信息
	FirmwareID int64    `json:"firmwareId"` // 固件ID
}

type OtaJobInfo struct {
	FirmwareID      int64  `json:"firmwareId"`      // 固件ID
	JobID           int64  `json:"jobId"`           // 作业ID
	JobStatus       string `json:"jobStatus"`       // 作业状态
	JobType         string `json:"jobType"`         // 作业类型
	ProductID       int64  `json:"productId"`       // 产品ID
	UpgradeType     string `json:"upgradeType"`     // 升级类型
	TagList         []Tag  `json:"tagList"`         // 标签列表
	TargetSelection string `json:"targetSelection"` // 目标选择
	UtcCreate       string `json:"utcCreate"`       // 作业创建时间
	UtcEndTime      string `json:"utcEndTime"`      // 作业结束时间
	UtcModified     string `json:"utcModified"`     // 作业修改时间
	UtcStartTime    string `json:"utcStartTime"`    // 作业开始时间
}

type OtaJobInfoIndexResp struct {
	OtaJobInfoList []OtaJobInfo `json:"otaJobInfo"` // OTA作业信息列表
	Total          int64        `json:"total"`      // 总数
}

type OtaModuleInfo struct {
	AliasName   string `json:"aliasName"`   // 别名
	Desc        string `json:"desc"`        // 描述
	GmtCreate   string `json:"gmtCreate"`   // 创建时间
	GmtModified string `json:"gmtModified"` // 修改时间
	ModuleName  string `json:"moduleName"`  // 模块名称
	ProductID   string `json:"productId"`   // 产品ID
}

type OtaTaskAnalysisReq struct {
	TaskUid string `json:"taskUid"`
}

type OtaTaskAnalysisResp struct {
	Result string `json:"result"` //统计结果,json格式
}

type OtaTaskByJobIndexResp struct {
	OtaUpTaskInfoList []OtaUpTaskInfo `json:"otaUpTaskInfo"` // OTA任务信息列表
	Total             int64           `json:"total"`         // 总数
}

type OtaTaskCancleReq struct {
	TaskID int64 `json:"taskID"`
}

type OtaTaskCreateReq struct {
	FirmwareID  int64  `json:"firmwareID"`  //固件升级包编号
	Type        int32  `json:"type"`        //升级范围1全部设备2定向升级
	UpgradeType int32  `json:"upgradeType"` //升级策略:1静态升级2动态升级
	DeviceList  string `json:"deviceList"`  //待升级设备列表,["device1","device2",...]
	VersionList string `json:"versionList"` //待升级版本,["version1","version2",...]
}

type OtaTaskDeviceCancleReq struct {
	ID int64 `json:"id"` //特定设备的升级id
}

type OtaTaskDeviceIndexReq struct {
	TaskUid    string    `json:"taskUid"`
	DeviceName string    `json:"deviceName,optional"` //设备编号
	Status     int32     `json:"status,optional"`     //升级状态:101待确认 201/202/203待推送 301已推送 401升级中 501升级成功 601升级失败 701已取消
	Page       *PageInfo `json:"page,optional"`       //分页信息
}

type OtaTaskDeviceIndexResp struct {
	List  []*OtaTaskDeviceInfo `json:"list"`
	Total int64                `json:"total"` //总数
}

type OtaTaskDeviceInfo struct {
	ID          int64  `json:"id"` //
	TaskUid     string `json:"taskUid"`
	DeviceName  string `json:"deviceName"`  //设备编号
	Version     string `json:"version"`     //当前版本
	Status      int32  `json:"status"`      //升级状态:101待确认 201/202/203待推送 301已推送 401升级中 501升级成功 601升级失败 701已取消
	UpdatedTime int64  `json:"updatedTime"` //状态更新时间 只读
}

type OtaTaskDeviceRetryReq struct {
	ID int64 `json:"id"` //特定设备的升级id
}

type OtaTaskIndexReq struct {
	FirmwareID int64     `json:"firmwareID"` //固件升级包编号
	TaskUid    string    `json:"taskUid,optional"`
	Page       *PageInfo `json:"page,optional"` //分页信息
}

type OtaTaskIndexResp struct {
	Total int64          `json:"total"` //总数
	List  []*OtaTaskInfo `json:"list"`
}

type OtaTaskInfo struct {
	TaskID      int64  `json:"taskID"`
	TaskUid     string `json:"taskUid"`                 //批次号
	Type        int32  `json:"type" enums:"1,2"`        //升级范围1全部设备2定向升级
	UpgradeType int32  `json:"upgradeType" enums:"1,2"` //升级策略:1静态升级2动态升级
	Status      int32  `json:"status"  enums:"1,2,3"`   //升级状态:1未升级2升级中3完成
	CreatedTime int64  `json:"createdTime"`             //创建时间 只读
}

type OtaTaskReadReq struct {
	TaskID int64 `json:"taskID"`
}

type OtaTaskReadResp struct {
	TaskID      int64  `json:"taskID"`
	TaskUid     string `json:"taskUid"`
	Type        int32  `json:"type"  enums:"1,2"`       //升级范围1全部设备2定向升级
	UpgradeType int32  `json:"upgradeType" enums:"1,2"` //升级策略:1静态升级2动态升级
	Version     string `json:"version"`                 //升级包版本
	SrcVersion  string `json:"srcVersion"`              //待升级版本号
	SrcDevice   string `json:"srcDevice"`               //待升级设备
	ProductID   string `json:"productID"`               //产品id
	ProductName string `json:"productName"`             //产品名称
	Status      int32  `json:"status" enums:"1,2,3"`    //升级状态:1未升级2升级中3完成
	AutoRepeat  int32  `json:"autoRepeat"`              //是否自动重试,1:不,2自动重试,最多重试10次
	CreatedTime int64  `json:"createdTime"`             //创建时间 只读
}

type OtaUpTaskInfo struct {
	FirmwareID  int64  `json:"firmwareId"`  // 固件ID
	JobID       int64  `json:"jobId"`       // 作业ID
	TaskID      int64  `json:"taskId"`      // 任务ID
	ProductID   string `json:"productId"`   // 产品ID
	ProductName string `json:"productName"` // 产品名称
	Progress    string `json:"progress"`    // 进度
	SrcVersion  string `json:"srcVersion"`  // 源版本
	DestVersion string `json:"destVersion"` // 目标版本
	DeviceName  string `json:"deviceName"`  // 设备名称
	TaskDesc    string `json:"taskDesc"`    // 任务描述
	TaskStatus  string `json:"taskStatus"`  // 任务状态
	Timeout     string `json:"timeout"`     // 超时时间
	UtcCreate   string `json:"utcCreate"`   // 创建时间（UTC格式）
	UtcModified string `json:"utcModified"` // 修改时间（UTC格式）
}

type PageInfo struct {
	Page int64 `json:"page,optional" form:"page,optional"` // 页码
	Size int64 `json:"size,optional" form:"size,optional"` // 每页大小
}

type Point struct {
	Longitude float64 `json:"longitude,range=[0:180]"` //经度
	Latitude  float64 `json:"latitude,range=[0:90]"`   //纬度
}

type ProductCategory struct {
	ID              int64   `json:"id,optional"`
	Name            string  `json:"name,optional"`
	Desc            *string `json:"desc,optional"`                      //描述
	HeadImg         string  `json:"headImg,optional"`                   // 用户头像
	IsUpdateHeadImg bool    `json:"isUpdateHeadImg,omitempty,optional"` // 用户头像
}

type ProductCategoryIndexReq struct {
	Page *PageInfo `json:"page,optional"` //分页信息,只获取一个则不填
	Name string    `json:"name,optional"` //过滤产品名称
}

type ProductCategoryIndexResp struct {
	List  []*ProductCategory `json:"list"`           //产品信息
	Total int64              `json:"total,optional"` //拥有的总数
	Num   int64              `json:"num,optional"`   //返回的数量
}

type ProductCustom struct {
	ProductID       string                `json:"productID"`
	TransformScript *string               `json:"transformScript,optional"` //协议转换脚本
	LoginAuthScript *string               `json:"loginAuthScript,optional"` //登录认证脚本
	ScriptLang      int64                 `json:"scriptLang,optional"`      //脚本语言类型（默认JavaScript） 1:JavaScript 2:lua 3:python
	CustomTopics    []*ProductCustomTopic `json:"customTopics,optional"`    //自定义topic数组
}

type ProductCustomReadReq struct {
	ProductID string `json:"productID"` //产品id 只读
}

type ProductCustomTopic struct {
	Topic     string `json:"topic"`     //自定义主题需要以$custom 并包含设备名称{deviceName}及产品名称{productID}
	Direction int64  `json:"direction"` //1:上行 2:下行 3:双向
}

type ProductInfo struct {
	CreatedTime        int64   `json:"createdTime,optional,string"`           //创建时间 只读
	ProductID          string  `json:"productID,optional"`                    //产品id 只读
	ProductName        string  `json:"productName,optional"`                  //产品名称
	ProductImg         string  `json:"productImg,optional"`                   //产品图片
	IsUpdateProductImg bool    `json:"isUpdateProductImg,omitempty,optional"` //只有这个参数为true的时候才会更新产品图片,传参为产品图片的file path
	AuthMode           int64   `json:"authMode,optional,range=[0:2]"`         //认证方式:1:账密认证,2:秘钥认证
	DeviceType         int64   `json:"deviceType,optional,range=[0:3]"`       //设备类型:1:设备,2:网关,3:子设备
	CategoryID         int64   `json:"categoryID,optional"`                   //产品品类
	NetType            int64   `json:"netType,optional,range=[0:6]"`          //通讯方式:1:其他,2:wi-fi,3:2G/3G/4G,4:5G,5:BLE,6:LoRaWAN
	DataProto          int64   `json:"dataProto,optional,range=[0:2]"`        //数据协议:1:自定义,2:数据模板
	AutoRegister       int64   `json:"autoRegister,optional,range=[0:3]"`     //动态注册:1:关闭,2:打开,3:打开并自动创建设备
	Secret             string  `json:"secret,optional"`                       //动态注册产品秘钥 只读
	Desc               *string `json:"desc,optional"`                         //描述
	Tags               []*Tag  `json:"tags,optional"`                         // 产品tag
}

type ProductInfoDeleteReq struct {
	ProductID string `json:"productID"` //产品id 只读
}

type ProductInfoIndexReq struct {
	Page        *PageInfo `json:"page,optional"`                   //分页信息,只获取一个则不填
	ProductName string    `json:"productName,optional"`            //过滤产品名称
	DeviceType  int64     `json:"deviceType,optional,range=[0:3]"` //过滤设备类型:0:全部,1:设备,2:网关,3:子设备
	ProductIDs  []string  `json:"productIDs,optional"`             //过滤产品id列表
	Tags        []*Tag    `json:"tags,optional"`                   // key tag过滤查询,非模糊查询 为tag的名,value为tag对应的值
}

type ProductInfoIndexResp struct {
	List  []*ProductInfo `json:"list"`           //产品信息
	Total int64          `json:"total,optional"` //拥有的总数
	Num   int64          `json:"num,optional"`   //返回的数量
}

type ProductInfoReadReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductRemoteConfig struct {
	ID         int64  `json:"id"`         //配置编号
	Content    string `json:"content"`    //配置内容
	CreateTime string `json:"createTime"` //创建时间
}

type ProductRemoteConfigCreateReq struct {
	ProductID string `json:"productID"` //产品id
	Content   string `json:"content"`   //配置内容
}

type ProductRemoteConfigIndexReq struct {
	ProductID string    `json:"productID"`     //产品id
	Page      *PageInfo `json:"page,optional"` //分页信息
}

type ProductRemoteConfigIndexResp struct {
	List  []*ProductRemoteConfig `json:"list"`  //产品信息
	Total int64                  `json:"total"` //拥有的总数
}

type ProductRemoteConfigLastestReadReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductRemoteConfigLastestReadResp struct {
	ProductRemoteConfig
}

type ProductRemoteConfigPushAllReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductSchemaCreateReq struct {
	*ProductSchemaInfo
}

type ProductSchemaDeleteReq struct {
	ProductID  string `json:"productID"`  //产品id
	Identifier string `json:"identifier"` //标识符
}

type ProductSchemaIndexReq struct {
	Page        *PageInfo `json:"page,optional"`        //分页信息,只获取一个则不填
	ProductID   string    `json:"productID"`            //产品id
	Type        int64     `json:"type,optional"`        //物模型类型 1:property属性 2:event事件 3:action行为
	Tag         int64     `json:"tag,optional"`         //过滤条件: 物模型标签 1:自定义 2:可选 3:必选
	Identifiers []string  `json:"identifiers,optional"` //过滤标识符列表
}

type ProductSchemaIndexResp struct {
	List  []*ProductSchemaInfo `json:"list"`  //分页信息,只获取一个则不填
	Total int64                `json:"total"` //总数(只有分页的时候会返回)
}

type ProductSchemaInfo struct {
	ProductID         string  `json:"productID"`                  //产品id 只读
	Type              int64   `json:"type"`                       //物模型类型 1:property属性 2:event事件 3:action行为
	Tag               int64   `json:"tag"`                        //物模型标签 1:自定义 2:可选 3:必选  必选不可删除
	Identifier        string  `json:"identifier"`                 //标识符
	ExtendConfig      string  `json:"extendConfig,optional"`      //拓展参数
	Name              *string `json:"name,optional"`              //功能名称
	Desc              *string `json:"desc,optional"`              //描述
	Required          int64   `json:"required,optional"`          //是否必须 1:是 2:否
	Affordance        *string `json:"affordance,optional"`        //各功能类型的详细参数定义
	IsCanSceneLinkage int64   `json:"isCanSceneLinkage,optional"` //是否可以场景联动
	IsShareAuthPerm   int64   `json:"isShareAuthPerm,optional"`   // 分享是否需要校验权限
	IsHistory         int64   `json:"isHistory,optional"`         // 是否存储历史记录
	Order             int64   `json:"order,optional"`             // 排序
}

type ProductSchemaTslImportReq struct {
	ProductID string `json:"productID"` //产品id 只读
	Tsl       string `json:"tsl"`       //物模型tsl
}

type ProductSchemaTslReadReq struct {
	ProductID string `json:"productID"` //产品id
}

type ProductSchemaTslReadResp struct {
	Tsl string `json:"tsl"` //物模型tsl
}

type ProductSchemaUpdateReq struct {
	*ProductSchemaInfo
}

type SceneInfo struct {
	ID              int64   `json:"id,optional"`
	Name            string  `json:"name,optional"`
	AreaIDs         []int64 `json:"areaIDs,string,optional"`
	Status          int64   `json:"status,optional"` //状态: 1启用 2禁用
	Tag             string  `json:"tag,optional"`    //标签 admin: 管理员 normal: 普通
	Desc            string  `json:"desc,optional"`
	CreatedTime     int64   `json:"createdTime,optional"`
	Trigger         string  `json:"trigger,optional"`
	When            string  `json:"when,optional"`
	Then            string  `json:"then,optional"`
	HeadImg         string  `json:"headImg,optional"`                   // 用户头像
	IsUpdateHeadImg bool    `json:"isUpdateHeadImg,omitempty,optional"` // 用户头像
}

type SceneInfoCreateReq struct {
	SceneInfo
}

type SceneInfoIndexReq struct {
	Page        *PageInfo `json:"page,optional"` //分页信息 只获取一个则不填
	Name        string    `json:"name,optional"` //场景名模糊查询
	Tag         string    `json:"tag,optional"`  //标签 admin: 管理员 normal: 普通
	AreaID      int64     `json:"areaID,optional"`
	TriggerType string    `json:"triggerType,optional"` //触发类型 device: 设备触发 timer: 定时触发 manual:手动触发
	Status      int64     `json:"status,optional"`      //状态: 1启用 2禁用
	AlarmID     int64     `json:"alarmID,optional"`     //告警id
}

type SceneInfoIndexResp struct {
	List  []*SceneInfo `json:"list"`  //场景信息
	Total int64        `json:"total"` //总数(只有分页的时候会返回)
	Num   int64        `json:"num"`   //返回的数量
}

type SceneInfoUpdateReq struct {
	SceneInfo
}

type SchemaAction struct {
	Input  []*SchemaParam `json:"input,optional"`  //调用参数
	Output []*SchemaParam `json:"output,optional"` //返回参数
}

type SchemaDefine struct {
	Type      string            `json:"type"`                //参数类型: bool int string  float timestamp array enum
	Mapping   map[string]string `json:"mapping,omitempty"`   //枚举及bool类型:bool enum
	Min       string            `json:"min,omitempty"`       //数值最小值:int  float
	Max       string            `json:"max,omitempty"`       //数值最大值:int string float
	Start     string            `json:"start,omitempty"`     //初始值:int float
	Step      string            `json:"step,omitempty"`      //步长:int float
	Unit      string            `json:"unit,omitempty"`      //单位:int float
	Specs     []*SchemaSpec     `json:"specs,omitempty"`     //结构体:
	ArrayInfo *SchemaDefine     `json:"arrayInfo,omitempty"` //数组:array
}

type SchemaEvent struct {
	Type   string         `json:"type"`            //事件类型: 信息:info  告警alert  故障:fault
	Params []*SchemaParam `json:"params,optional"` //事件参数
}

type SchemaParam struct {
	Identifier string        `json:"identifier"`       //参数标识符
	Name       string        `json:"name"`             //参数名称
	Define     *SchemaDefine `json:"define,omitempty"` //参数定义
}

type SchemaProperty struct {
	Mode   string        `json:"mode,optional"` //读写类型: r(只读) rw(可读可写)
	Define *SchemaDefine `json:"define"`        //参数定义
}

type SchemaSpec struct {
	Identifier string        `json:"identifier"` //参数标识符
	Name       string        `json:"name"`       //参数名称
	DataType   *SchemaDefine `json:"dataType"`   //参数定义
}

type SendOption struct {
	TimeoutToFail  int64 `json:"timeoutToFail,optional"`  //超时失败时间
	RequestTimeout int64 `json:"requestTimeout,optional"` //请求超时,超时后会进行重试
	RetryInterval  int64 `json:"retryInterval,optional"`  //重试间隔
}

type SlotAreaSaveReq struct {
	ProjectID    int64 `json:"projectID,string,optional"`    //项目id（只读）
	AreaID       int64 `json:"areaID,string,optional"`       //项目区域id（只读）
	ParentAreaID int64 `json:"parentAreaID,string,optional"` //上级项目区域id（只读）
}

type StaticUpgradeDeviceInfo struct {
	DeviceName string `json:"deviceName"` // 设备名称
	SrcVersion string `json:"srcVersion"` // 源版本
	ProductID  string `json:"productId"`  // 产品ID
}

type StaticUpgradeJobReq struct {
	FirmwareID         int64                     `json:"firmwareId"`         // 固件ID
	ProductID          string                    `json:"productId"`          // 产品ID
	Tag                Tag                       `json:"tag"`                // 标签
	TargetSelection    int64                     `json:"targetSelection"`    // 目标选择
	ScheduleTime       int64                     `json:"scheduleTime"`       // 计划时间
	RetryInterval      int64                     `json:"retryInterval"`      // 重试间隔
	RetryCount         int64                     `json:"retryCount"`         // 重试次数
	TimeoutInMinutes   int64                     `json:"timeoutInMinutes"`   // 超时时间（分钟）
	MaximumPerMinute   int64                     `json:"maximumPerMinute"`   // 每分钟最大升级数
	GrayPercent        int64                     `json:"grayPercent"`        // 灰度升级百分比
	ScheduleFinishTime int64                     `json:"scheduleFinishTime"` // 计划完成时间
	OverwriteMode      int64                     `json:"overwriteMode"`      // 覆盖模式
	NeedPush           int64                     `json:"needPush"`           // 是否需要主动推送
	NeedConfirm        int64                     `json:"needConfirm"`        // 是否需要自主控制
	GroupID            int64                     `json:"groupId"`            // 分组ID
	GroupType          string                    `json:"groupType"`          // 分组类型
	DownloadProtocol   string                    `json:"downloadProtocol"`   // 下载协议
	MultiModuleMode    string                    `json:"multiModuleMode"`    // 多模块模式
	DeviceInfo         []StaticUpgradeDeviceInfo `json:"deviceInfo"`         // 设备信息列表
}

type Tag struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

type TimeRange struct {
	Start int64 `json:"start,optional"` //开始时间 unix时间戳
	End   int64 `json:"end,optional"`   //结束时间 unix时间戳
}

type UpgradeJobResp struct {
	JobID     int64  `json:"jobId"`     // 任务ID
	UtcCreate string `json:"UtcCreate"` // 任务创建时间（UTC格式）
}

type UserCollectDeviceInfo struct {
	Devices []*DeviceInfo `json:"devices"`
}

type UserCollectDeviceSave struct {
	Devices []*DeviceCore `json:"devices"`
}

type UserDeviceShareIndexReq struct {
	Page   *PageInfo   `json:"page,optional"`
	Device *DeviceCore `json:"device,optional"` //设备信息
}

type UserDeviceShareIndexResp struct {
	List  []*UserDeviceShareInfo `json:"list,optional"`
	Total int64                  `json:"total,optional"`
}

type UserDeviceShareInfo struct {
	ID         int64      `json:"id,optional"`
	Device     DeviceCore `json:"device,optional"`        //设备信息
	UserID     int64      `json:"userID,string,optional"` //分享的对象
	SchemaPerm []string   `json:"schemaPerm,optional"`    //物模型权限,只需要填写需要授权并授权的物模型id
	AccessPerm []string   `json:"accessPerm,optional"`    //操作权限 hubLog:设备消息记录,ota:ota升级权限,deviceTiming:设备定时
}

type UserDeviceShareReadReq struct {
	ID     int64       `json:"id,optional"`
	Device *DeviceCore `json:"device,optional"` //设备信息
}

type VerifyOtaFirmwareReq struct {
	FirmwareID       int64    `json:"firmwareId"`       // 固件ID
	ProductID        string   `json:"productID"`        // 产品ID
	Tags             []Tag    `json:"tags"`             // 标签列表
	DeviceNames      []string `json:"deviceNames"`      // 设备名称列表
	TimeoutInMinutes int64    `json:"timeoutInMinutes"` // 超时时间（分钟）
	NeedPush         int64    `json:"needPush"`         // 是否需要主动推送
	NeedConfirm      int64    `json:"needConfirm"`      // 是否需要自主控制
	DownloadProtocol string   `json:"downloadProtocol"` // 下载协议
}

type WithID struct {
	ID int64 `json:"id,optional"` // id
}

type WithIDOrCode struct {
	ID   int64  `json:"id,optional"` // id
	Code string `json:"code,optional"`
}
